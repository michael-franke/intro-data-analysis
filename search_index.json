[["index.html", "An Introduction to Data Analysis", " An Introduction to Data Analysis Michael Franke last rendered at: 2021-03-24 21:24:18 This book provides basic reading material for an introduction to data analysis. It uses R to handle, plot and analyze data. After covering the use of R for data wrangling and plotting, the book introduces key concepts of data analysis from a Bayesian and a frequentist tradition. This text is intended for use as a first introduction to statistics for an audience with some affinity towards programming, but no prior exposition to R. Many people have supported this project actively by providing text, examples, code or technical support. Many thanks to (in alphabetic order): Tobias Anton, Florence Bockting, Noa Kallioinen, Minseok Kang, Marcel Klehr, Özge Özenoglu, Maria Pershina, Timo Roettger, Polina Tsvilodub and Inga Wohlert. Work on this web-book has been kindly supported financially by the Lower Saxony Ministry for Science and Culture (project “Innovation plus 2020/21”). "],["general-introduction.html", "1 General Introduction", " 1 General Introduction This chapter lays out the learning goals of this book (Section 1.1) and describes how these goals are to be achieved (Section 1.2). Sections 1.3 and 1.4 detail which technical tools and theoretical concepts are covered in the course, and which are not. There will be some information on the kinds of data sets we will use during the course in Section 1.5. Section 1.6 provides information about how to install the necessary tools for this course. Finally, Section 1.7 provides more information on how a 12-week course can be structured based on the material in this web-book. "],["Chap-01-00-intro-learning-goals.html", "1.1 Learning goals", " 1.1 Learning goals At the end of this course students should: have gained the competence to understand complex data sets, manipulate a data set (using R), so as to plot aspects of it in ways that are useful for answering a given research question understand the general logic of statistical inference, in particular be able to interpret and apply standard analyses from a frequentist and a Bayesian approach be able to independently evaluate statistical analyses based on their adequacy for a given research question and data set be able to critically assess the adequacy of analyses commonly found in the literature Notice that this is, although a lot of hard work already, still rather modest! It doesn’t actually say that we necessarily aim at the competence to do it or even to do it flawlessly! Our main goal is understanding, because that is the foundation of practical success and the foundation of an ability to learn more in the future. We do not teach tricks! We do not share recipes! "],["Chap-01-00-intro-course-structure.html", "1.2 Course structure", " 1.2 Course structure The course consists of five parts. After giving a more detailed overview of the course in this chapter, Part I introduces R, the main programming language that we will use. Part II covers what is often called descriptive statistics. It also gives us room to learn more about R when we massage data into shape, compute summary statistics, and plot different data types in different ways. Part III covers the basic theoretical concepts of Bayesian data analysis. Part IV introduces regression modeling. Part V introduces basic ideas from frequentist data analysis and compares the frequentist and the Bayesian approach. A number of characteristic features distinguishes this course from the bulk of its cousins out there. First, we use a model-centric approach, i.e., we are going to explicitly represent and talk about statistical models as a formalized set of the assumptions which underly a specific analysis. Second, we will use a computational approach, i.e., we foster an understanding of mathematical notions with computer simulations or other variants of helpful code. Third, this course takes a dual approach in that it introduces both the frequentist and the Bayesian approach to statistical inference. We will start off with the Bayesian approach, because it is arguably more intuitive. Yet, a model-centric Bayesian approach also helps with understanding basic concepts from the frequentist paradigm. Fourth, the course focuses on generalized linear models, a class of models that have become the new standard for analyses of experimental data in the social and psychological sciences. They are also very useful for data exploration in other domains (such as machine learning). There are also appendices with additional information: Further useful material (textbooks, manuals, etc.) is provided in Appendix A. Appendix B covers the most important probability distributions used in this book. An excursion providing more information about the important Exponential Family of probability distributions and the Maximum Entropy Principle is given in Appendix C. The data sets which reoccur throughout the book as “running examples” are succinctly summarized in Appendix D. Appendix E surveys and motivates ideas for good scientific practice and principles of open science. "],["Chap-01-00-intro-tools.html", "1.3 Tools used in this course", " 1.3 Tools used in this course The main programming language used in this course is R (R Core Team 2018). We will make heavy use of the tidyverse package (Wickham 2017), which provides a unified set of functions and conventions that deviate (sometimes: substantially) from basic R. We will also be using the probabilistic programming language WebPPL (Goodman and Stuhlmüller 2014), but only “passively” in order to quickly obtain results from probabilistic calculations that we can experiment with directly in the browser in order to better understand certain ideas or concepts. You will not need to learn to write WebPPL code yourself. We will rely on the R package brms (Burkner 2017) for running Bayesian generalized regression models, which itself relies on the probabilistic programming language Stan (Carpenter et al. 2017). We will, however, not learn to use Stan in this course, but we will take a glimpse at some Stan code to have seen, at least roughly, where the Markov Chain Monte Carlo samples come from which we will use. Section 1.6 gives information about how to install the tools necessary for this course. References "],["Chap-01-00-intro-topics.html", "1.4 Topics covered (and not covered) in the course", " 1.4 Topics covered (and not covered) in the course The main topics that this course will cover are: data preparation: how to clean up and massage a data set into an appropriate shape for plotting and analysis data visualization: how to select relevant aspects of data for informative visualization statistical models: what that is, and why it’s beneficial to think in terms of models, not tests statistical inference: what that is, and how it’s done in frequentist and Bayesian approaches hypothesis testing: how to test assumptions about a model’s parameters generalized regression: how to apply generalized regression models to different types of data sets There is, obviously, a lot that we will not cover in this course. We will, for instance, not dwell at any length on the specifics of algorithms for computing statistical inferences or model fits. We will also only deal with the history of statistics and questions of philosophy of science at the very end of this course and only to the extent that it helps us to better understand the theoretical notions and practical habits that are important in the context of this course. We will also not do extremely heavy math. There are at least two different motivations for data analysis, and it is important to keep them apart. This course focuses on data analysis for explanation, i.e., routines that help us understand reality through inspection of empirical data. We will only glance at the alternative approach, which is data analysis for prediction, i.e., using models to predict future observations, as commonly practiced in machine learning and its applications. In sloppy slogan form, this course treats data science for scientific knowledge gain, not data science as an engineering application. "],["Chap-01-00-intro-data-sets.html", "1.5 Data sets covered", " 1.5 Data sets covered Data analysis can be quite varied because data itself can be quite varied. We try to present some variation, but since this is an introductory course with lots of other ground to cover, we will be slightly conservative in the kind of data that we analyze. The focus is on data from behavioral experiments (like categorical choices or reaction times). There will be no analyses specifically tailored to pictures, sounds, dates or time sequences in this course. Appendix D gives an overview of the most important, recurring data sets used in this course. Most of the data sets that we will use repeatedly in this class come from various psychological experiments. To make this even more immersive, these experiments are implemented as browser-based experiments, using _magpie. This makes it possible for students of this course to actually conduct the exact experiments whose data the book will analyze (and maybe generate some more intuitions and some hypotheses). More on data sets used in this book is provided in Appendix D. "],["Chap-01-00-intro-installation.html", "1.6 Installation", " 1.6 Installation To follow the code in this book, you need a recent version of R (recommended is an R version at least 4.0). We recommend the use of RStudio. The course also has its own R package. The aida package contains convenience functions introduced and used in this book. It can be installed by executing the following code. (More on R, packages and their installation in the next chapter.) install.packages(&#39;remotes&#39;) remotes::install_github(&#39;michael-franke/aida-package&#39;) This course also requires the packages rstan and brms which let R interact with the probabilistic programming language Stan. Installation of these packages can be difficult. If you run into trouble during the installation of these packages, please follow the instructions on the Stan homepage for the most recent recommendations for installation for your OS. "],["Chap-01-00-intro-schedule.html", "1.7 Example schedule (12-week course)", " 1.7 Example schedule (12-week course) It is possible to teach the content of this web-book in a semester (12 weeks). Below is an example schedule of how the material can be chunked. This schedule assumes that sections marked as “excursions” are skipped and that lecturers give clear guidance as to which aspects of each chapter are most important. Table 1.1: Example schedule for a 12-week course based on this web-book. week topic chapter 1 overiew, installation, first steps in R 1 &amp; 2.1 2 basics of R 2 3 data types &amp; wrangling 3 &amp; 4 4 summary statistics &amp; plotting 5 &amp; 6 5 probability basics 7 6 models &amp; parameter inference 8 &amp; 9 7 model comparison &amp; hypothesis testing 10 &amp; 11 8 linear regression 12 &amp; 13 9 categorical predictors &amp; GLM 14 &amp; 15 10 frequentist statistics 16 11 Bayes vs frequentist 17 12 discussion / reflection "],["Chap-01-01-R.html", "2 Basics of R", " 2 Basics of R R is a specialized programming language for data science. Though old, it is heavily supported by an active community. New tools for data handling, visualization, and statistical analysis are provided in the form of packages.1 While other programming languages, like Python or Julia, specialized for scientific computing, also lend themselves beautifully for data analysis, the choice of R in this book is motivated because R’s raison d’être is data analysis. Also, some of the R packages used in this book provide cutting-edge methods that are not as conveniently available in other programming languages (yet). In a manner of speaking, there are two flavors of R. We should distinguish base R from the tidyverse. Base R is what you have when you do not load any packages. We enter the tidyverse by loading the package tidyverse (see below for information on how to do that). The tidyverse consists of several components (which are actually stand-alone packages that can be loaded separately if needed) all of which supply extra functionality for data analysis, based on a unifying philosophy and representation format. While eventually interchangeable, the look-and-feel of base R and the tidyverse is quite different. Figure 2.1 lists a selection of packages from the tidyverse in relation to their role at different stages of the process of data analysis. Figure 2.1: Overview of selected packages from the tidyverse. The image is taken from this introduction to the tidyverse. The official documentation for base R is “An Introduction to R”. The standard reference for using the tidyverse is “R for Data Science (R4DS)”. There are some very useful cheat sheets which you should definitely check out! There are pointers to further material in Appendix A. The learning goals for this chapter are: become familiar with R, its syntax and basic notions become familiar with the key functionality of the tidyverse understand and write simple R scripts be able to write documents in Rmarkdown Packages live in the official package repository CRAN, or are supplied in less standardized forms, e.g., via open repositories, such as GitHub.↩ "],["ch1-first-steps.html", "2.1 First steps", " 2.1 First steps R is an interpreted language. This means that you do not have to compile it. You can just evaluate it line by line, in a so-called session. The session stores the current values of all variables. Usually, code is stored in a script, so one does not have to retype it when starting a new session.2 Try this out by either typing r to open an R session in a terminal or load RStudio.3 You can immediately calculate stuff: 6 * 7 ## [1] 42 Exercise 2.1 Use R to calculate 5 times the result of 659 minus 34. Solution 5 * (659 - 34) ## [1] 3125 2.1.1 Functions R has many built-in functions. The most common situation is that the function is called by its name using prefix notation, followed by round brackets that enclose the function’s arguments (separated by commas if there are multiple arguments). For example, the function round takes a number and, by default, returns the closest integer: # the function `round` takes a number as an argument and # returns the closest integer (default) round(0.6) ## [1] 1 Actually, round allows several arguments. It takes as input the number x to be rounded and another integer number digits which gives the number of digits after the comma to which x should be rounded. We can then specify these arguments in a function call of round by providing the named arguments. # rounds the number `x` to the number `digits` of digits round(x = 0.138, digits = 2) ## [1] 0.14 If all of the parsed arguments are named, then their order does not matter. But all non-named arguments have to be presented in the positions expected by the function after subtracting the named arguments from the ordered list of arguments (to find out the right order one should use help, as explained below in 2.1.6). Here are examples for illustration: round(x = 0.138, digits = 2) # works as intended round(digits = 2, x = 0.138) # works as intended round(0.138, digits = 2) # works as intended round(0.138, 2) # works as intended round(x = 0.138, 2) # works as intended round(digits = 2, 0.138) # works as intended round(2, x = 0.138) # works as intended round(2, 0.138) # does not work as intended (returns 2) Functions can have default values for some or for all of their arguments. In the case of round, the default is digits = 0. There is obviously no default for x in the function round. round(x = 6.138) # returns 6 ## [1] 6 Some functions can take an arbitrary number of arguments. The function sum, which sums up numbers is a point in case. # adds all of its arguments together sum(1, 2, 3) ## [1] 6 Selected functions can also be expressed as operators in infix notation. This applies to frequently recurring operations, such as mathematical operations or logical comparisons. # both of these calls sum 1, 2, and 3 together sum(1, 2, 3) # prefix notation 1 + 2 + 3 # infix notation An expression like 3 + 5 is internally processed as the function `+`(3, 5) which is equivalent to sum(3, 5). Section 2.3 will list some of the most important built-in functions. It will also explain how to define your own functions. 2.1.2 Variables You can assign values to variables using three assignment operators: -&gt;, &lt;- and =, like so: x &lt;- 6 # assigns 6 to variable x 7 -&gt; y # assigns 7 to variable y z = 3 # assigns 3 to variable z x * y / z # returns 6 * 7 / 3 = 14 ## [1] 14 Use of = is discouraged.4 It is good practice to use a consistent naming scheme for variables. This book uses snake_case_variable_names and tends towards using long_and_excessively_informative_names for important variables, and short variable names, like i, j or x, for local variables, indices etc. Exercise 2.2 Create two variables, a and b, and assign the values 103 and 14 to them, respectively. Next, divide variable a by variable b and produce an output with three digits after the comma. Solution a &lt;- 103 b &lt;- 14 round(x = a / b, digits = 3) ## [1] 7.357 2.1.3 Literate coding It is good practice to document code with short but informative comments. Comments in R are demarcated with #. x &lt;- 4711 # a nice number from Cologne Since everything on a line after an occurrence of # is treated as a comment, it is possible to break long function calls across several lines, and to add comments to each line: round( # call the function `round` x = 0.138, # number to be rounded digits = 2 # number of after-comma digits to round to ) In RStudio, you can use Command+Shift+C (on Mac) and Ctrl+Shift+C (on Windows/Linux) to comment or uncomment code, and you can use comments to structure your scripts. Any comment followed by ---- is treated as a (foldable) section in RStudio. # SECTION: variable assignments ---- x &lt;- 6 y &lt;- 7 # SECTION: some calculations ---- x * y Exercise 2.3 Provide extensive comments to all operations in the solution code of the previous exercise. Solution a &lt;- 103 # assign value 103 to variable `a` b &lt;- 14 # assign value 14 to variable `b` round( # produce a rounded number x = a / b, # number to be rounded is a/b digits = 3 # show three digits after the comma ) ## [1] 7.357 2.1.4 Objects Strictly speaking, all entities in R are objects but that is not always apparent or important for everyday practical purposes (see the manual for more information). R supports an object-oriented programming style, but we will not make (explicit) use of this functionality. In fact, this book heavily uses and encourages a functional programming style (see Section 2.4). However, some functions (e.g., optimizers or fitting functions for statistical models) return objects, and we will use this output in various ways. For example, if we run some model on a data set the output is an object. Here, for example, we run a regression model, that will be discussed later on in the book, on a dataset called cars. # you do not need to understand this code model_fit = lm(formula = speed~dist, data = cars) # just notice that the function `lm` returns an object is.object(model_fit) ## [1] TRUE # printing an object on the screen usually gives you summary information print(model_fit) ## ## Call: ## lm(formula = speed ~ dist, data = cars) ## ## Coefficients: ## (Intercept) dist ## 8.2839 0.1656 2.1.5 Packages Much of R’s charm unfolds through the use of packages. CRAN has the official package repository. To install a new package from a CRAN mirror use the install.packages function. For example, to install the package remotes, you would use: install.packages(&quot;remotes&quot;) Once installed, you need to load your desired packages for each fresh session, using a command like the following:5 library(remotes) Once loaded, all functions, data, etc. that ship with a package are available without additional reference to the package name. If you want to be careful or courteous to an admirer of your code, you can reference a function from a package also by explicitly referring to that package. For example, the following code calls the function install_github from the package remotes explicitly.6 remotes::install_github(&quot;SOME-URL&quot;) Indeed, the install_github function allows you to install bleeding-edge packages from GitHub. You can install all packages relevant for this book using the following code (after installing the remotes package): remotes::install_github(&quot;michael-franke/aida-package&quot;) After this installation, you can load all packages for this book simply by using: library(aida) In RStudio, there is a special tab in the pane with information on “files”, “plots” etc. to show all installed packages. This also shows which packages are currently loaded. 2.1.6 Getting help If you encounter a function like lm that you do not know about, you can access its documentation with the help function or just typing ?lm. For example, the following call summons the documentation for lm, the first parts of which are shown in Figure 2.2. help(lm) Figure 2.2: Excerpt from the documentation of the lm function. If you are looking for help on a more general topic, use the function help.search. It takes a regular expression as input and outputs a list of occurrences in the available documentation. A useful shortcut for help.search is just to type ?? followed by the (unquoted) string to search for. For example, calling either of the following lines might produce a display like in Figure 2.3. # two equivalent ways for obtaining help on search term &#39;linear&#39; help.search(&quot;linear&quot;) ??linear Figure 2.3: Result of calling help.search for the term ‘linear’. The top entries in Figure 2.3 are vignettes. These are compact manuals or tutorials on particular topics or functions, and they are directly available in R. If you want to browse through the vignettes available on your machine (which depend on which packages you have installed), go ahead with: browseVignettes() Exercise 2.4 Look up the help page for the command round. As you know about this function already, focus on getting a feeling for how the help text is structured and the most important bits of information are conveyed. Try to understand what the other functions covered in this entry do and when which one would be most useful. Line-by-line execution of code is useful for quick development and debugging. Make sure to learn about keyboard shortcuts to execute single lines or chunks of code in your favorite editor, e.g., check the RStudio Cheat Sheet for information on its keyboard shortcuts.↩ You might need to add R to the PATH variables of your operating system to let the terminal know where R was installed (e.g. C:\\Program Files\\R\\R-4.0.3\\bin\\x64). Also, when starting a session in a terminal, you can exit a running R session by typing quit() or q().↩ You can produce &lt;- in RStudio with Option-- (on Mac) and Alt-- (on Windows/Linux). For other useful keyboard shortcuts, see here.↩ You need to make sure that all packages you need for a session are loaded, so you would need to supply several commands like library(PCKG_NAME) for all required packages.↩ Calling functions in this explicit way also dispenses the need to load the package first (though you need to have installed it before), and it might help with naming conflicts when different packages define identically named functions.↩ "],["ch1-data-types.html", "2.2 Data types", " 2.2 Data types To learn about a new programming language entails to first learn something about what kinds of objects (elements, first-order citizens) you will have to deal with. Let’s therefore briefly go through the data types that are most important for our later purposes. We will see how to deal with numeric information, Booleans, strings and so forth. In general, we can assess the type of an object stored in variable x with the function typeof(x). Let’s just try this for a bunch of things, just to give you an overview of some of R’s data types (not all of which are important to know about right from the start): typeof(3) # returns type &quot;double&quot; typeof(TRUE) # returns type &quot;logical&quot; typeof(cars) # returns &quot;list&quot; (includes data.frames, tibbles, objects, ...) typeof(&quot;huhu&quot;) # returns &quot;character&quot; (= string) typeof(mean) # returns &quot;closure&quot; (= function) typeof(c) # returns &quot;builtin&quot; (= deep system internal stuff) typeof(round) # returns type &quot;special&quot; (= well, special stuff?) If you really wonder, you can sometimes learn more about an object, if you just print it out as a string: # `lm` is actually a function (&quot;linear model&quot;) # the function `str` casts this function into a string # the result is then printed to screen str(lm) ## function (formula, data, subset, weights, na.action, method = &quot;qr&quot;, model = TRUE, ## x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, contrasts = NULL, ## offset, ...) It is sometimes possible to cast objects of one type into another type XXX using functions as.XXX in base R or as_XXX in the tidyverse. # casting Boolean value `TRUE` into number format as.numeric(TRUE) # returns 1 ## [1] 1 Casting can also happen explicitly. The expressions TRUE and FALSE are built-in variables for the Boolean values “true” and “false”. But when we use them in mathematical expressions, we can do math with them, like so: TRUE + TRUE + FALSE + TRUE + TRUE ## [1] 4 2.2.1 Numeric vectors &amp; matrices R is essentially an array-based language. Arrays are arbitrary but finite-dimensional matrices. We will discuss what is usually referred to as vectors (= one-dimensional arrays), matrices (= two-dimensional arrays), and arrays (= more-than-two-dimensional) in this section with a focus on numeric information. But it is important to keep in mind that arrays can contain objects of other types than numeric information (as long as all objects in the array are of the same type). 2.2.1.1 Numeric information Standard number format in R is double. typeof(3) ## [1] &quot;double&quot; We can also represent numbers as integers and complex. typeof(as.integer(3)) # returns &#39;integer&#39; ## [1] &quot;integer&quot; typeof(as.complex(3)) # returns &#39;complex&#39; ## [1] &quot;complex&quot; 2.2.1.2 Numeric vectors As a generally useful heuristic, expect every numerical information to be treated as a vector (or higher-order: matrix, array, … ; see below), and to expect any (basic, mathematical) operation in R to (most likely) apply to the whole vector, matrix, array, collection.7 This makes it possible to ask for the length of a variable to which we assign a single number, for instance: x &lt;- 7 length(x) ## [1] 1 We can even index such a variable: x &lt;- 7 x[1] # what is the entry in position 1 of the vector x? ## [1] 7 Or assign a new value to a hitherto unused index: x[3] &lt;- 6 # assign the value 6 to the 3rd entry of vector x x # notice that the 2nd entry is undefined, or &quot;NA&quot;, not available ## [1] 7 NA 6 Vectors in general can be declared with the built-in function c(). To memorize this, think of concatenation or combination. x &lt;- c(4, 7, 1, 1) # this is now a 4-place vector x ## [1] 4 7 1 1 There are also helpful functions to generate sequences of numbers: 1:10 # returns 1, 2, 3, ..., 10 seq(from = 1, to = 10, by = 1) # returns 1, 2, 3, ..., 10 seq(from = 1, to = 10, by = 0.5) # returns 1, 1.5, 2, ..., 9.5, 10 seq(from = 0, to = 1 , length.out = 11) # returns 0, 0.1, ..., 0.9, 1 Indexing in R starts with 1, not 0! x &lt;- c(4, 7, 1, 1) # this is now a 4-place vector x[2] ## [1] 7 And now we see what is meant above when we said that (almost) every mathematical operation can be expected to apply to a vector: x &lt;- c(4, 7, 1, 1) # 4-placed vector as before x + 1 ## [1] 5 8 2 2 Exercise 2.5 Create a vector that contains all even numbers from 0 to 20 and assign it to a variable. Now transform the variable such that it contains only odd numbers up to 20 using mathematical operation. Notice that the numbers above 20 should not be included! [Hint: use indexing.] Solution a &lt;- seq(from = 0, to = 20, by = 2) a &lt;- a + 1 a &lt;- a[1:10] a ## [1] 1 3 5 7 9 11 13 15 17 19 2.2.1.3 Numeric matrices Matrices are declared with the function matrix. This function takes, for instance, a vector as an argument. x &lt;- c(4, 7, 1, 1) # 4-placed vector as before (m &lt;- matrix(x)) # cast x into matrix format ## [,1] ## [1,] 4 ## [2,] 7 ## [3,] 1 ## [4,] 1 Notice that the result is a matrix with a single column. This is important. R uses so-called column-major mode.8 This means that it will fill columns first. For example, a matrix with three columns based on a six-placed vector 1, 2, \\(\\dots\\), 6 will be built by filling the first column from top to bottom, then the second column top to bottom, and so on.9 m &lt;- matrix(1:6, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 In line with a column-major mode, vectors are treated as column vectors in matrix operations: x = c(1, 0, 1) # 3-place vector m %*% x # dot product with previous matrix &#39;m&#39; ## [,1] ## [1,] 6 ## [2,] 8 As usual, and independently of a column- or row-major mode, matrix indexing starts with the row index: m[1,] # produces first row of matrix &#39;m&#39; ## [1] 1 3 5 Exercise 2.6 Create a sequence of 9 numbers, equally spaced, starting from 0 and ending with 1. Assign this sequence to a vector called x. Now, create a matrix, stored in variable X, with three columns and three rows that contain the numbers of this vector in the usual column-major fashion. Solution x &lt;- seq(from = 0, to = 1, length.out = 9) X &lt;- matrix(x, ncol = 3) X ## [,1] [,2] [,3] ## [1,] 0.000 0.375 0.750 ## [2,] 0.125 0.500 0.875 ## [3,] 0.250 0.625 1.000 We have not yet covered this, but give it a try and guess what might be a convenient and very short statement to compute the sum of all numbers in matrix X. Solution sum(X) ## [1] 4.5 2.2.1.4 Arrays Arrays are simply higher-dimensional matrices. We will not make (prominent) use of arrays in this book. 2.2.1.5 Names for vectors, matrices and arrays The positions in a vector can be given names. This is extremely useful for good “literate coding” and therefore highly recommended. The names of vector x’s positions are retrieved and set by the names function:10 students &lt;- c(&quot;Jax&quot;, &quot;Jamie&quot;, &quot;Jason&quot;) # names of students grades &lt;- c(1.3, 2.7, 2.0) # a vector of grades names(grades) # retrieve names: with no names so far ## NULL names(grades) &lt;- students # assign names names(grades) # retrieve names again: names assigned ## [1] &quot;Jax&quot; &quot;Jamie&quot; &quot;Jason&quot; grades # output shows names ## Jax Jamie Jason ## 1.3 2.7 2.0 But we can also do this in one swoop, like so: c(Jax = 1.3, Jamie = 2.7, Jason = 2.0) ## Jax Jamie Jason ## 1.3 2.7 2.0 Names for matrices are retrieved or set with functions rownames and colnames. # declare matrix m &lt;- matrix(1:6, ncol = 3) # assign row and column names, using function # `str_c` which is described below rownames(m) &lt;- str_c(&quot;row&quot;, 1:nrow(m), sep = &quot;_&quot;) colnames(m) &lt;- str_c(&quot;col&quot;, 1:ncol(m), sep = &quot;_&quot;) m ## col_1 col_2 col_3 ## row_1 1 3 5 ## row_2 2 4 6 2.2.2 Booleans There are built-in names for Boolean values “true” and “false”, predictably named TRUE and FALSE. Equivalent shortcuts are T and F. If we attempt to do math with Boolean vectors, the outcome is what any reasonable logician would expect: x &lt;- c(T, F, T) 1 - x ## [1] 0 1 0 x + 3 ## [1] 4 3 4 Boolean vectors can be used as index sets to extract elements from other vectors. # vector 1, 2, ..., 5 number_vector &lt;- 1:5 # index of odd numbers set to `TRUE` boolean_vector &lt;- c(T, F, T, F, T) # returns the elements from number vector, for which # the corresponding element in the Boolean vector is true number_vector[boolean_vector] ## [1] 1 3 5 2.2.3 Special values There are a couple of keywords reserved in R for special kinds of objects: NA: “not available”; represent missing values in data NaN: “not a number”; e.g., division zero by zero Inf or -Inf: infinity and negative infinity; returned when a number is too big or divided by zero NULL: the NULL object; often returned when a function is undefined for the provided input 2.2.4 Characters (= strings) Strings are called characters in R. We will be stubborn and call them strings for most of the time here. We can assign a string value to a variable by putting the string in double-quotes: x &lt;- &quot;huhu&quot; typeof(x) ## [1] &quot;character&quot; We can create vectors of characters in the obvious way: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) chr_vector ## [1] &quot;huhu&quot; &quot;hello&quot; &quot;huhu&quot; &quot;ciao&quot; The package stringr from the tidyverse also provides very useful and, in comparison to base R, more uniform functions for string manipulation. The cheat sheet for the stringr package is highly recommended for a quick overview. Below are some examples. Function str_c concatenates strings: str_c(&quot;Hello&quot;, &quot;Hi&quot;, &quot;Hey&quot;, sep = &quot;! &quot;) ## [1] &quot;Hello! Hi! Hey&quot; We can find the indices of matches in a character vector with str_which: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) str_which(chr_vector, &quot;hu&quot;) ## [1] 1 3 Similarly, str_detect gives a Boolean vector of matching: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) str_detect(chr_vector, &quot;hu&quot;) ## [1] TRUE FALSE TRUE FALSE If we want to get the strings matching a pattern, we can use str_subset: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) str_subset(chr_vector, &quot;hu&quot;) ## [1] &quot;huhu&quot; &quot;huhu&quot; Replacing all matches with another string works with str_replace_all: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) str_replace_all(chr_vector, &quot;h&quot;, &quot;B&quot;) ## [1] &quot;BuBu&quot; &quot;Bello&quot; &quot;BuBu&quot; &quot;ciao&quot; For data preparation, we often need to split strings by a particular character. For instance, a set of reaction times could be separated by a character line “|”. We can split this string representation to get individual measurements like so: # three measures of reaction time in a single string reaction_times &lt;- &quot;123|234|345&quot; # notice that we need to doubly (!) escape character | # notice also that the result is a list (see below) str_split(reaction_times, &quot;\\\\|&quot;, n = 3) ## [[1]] ## [1] &quot;123&quot; &quot;234&quot; &quot;345&quot; 2.2.5 Factors Factors are special vectors, which treat their elements as instances of a finite set of categories. To create a factor, we can use the function factor. The following code creates a factor from a character vector. Notice that, when printing, we get information of the kinds of entries (= categories) that occurred in the original character vector: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) factor(chr_vector) ## [1] huhu hello huhu ciao ## Levels: ciao hello huhu For plotting or other representational purposes, it can help to manually specify an ordering on the levels of a factor using the levels argument: # the order of levels is changed manually factor(chr_vector, levels = c(&quot;huhu&quot;, &quot;ciao&quot;, &quot;hello&quot;)) ## [1] huhu hello huhu ciao ## Levels: huhu ciao hello Even though we specified an ordering among factor levels, the last code chunk nonetheless creates what R treats as an unordered factor. There are also genuine ordered factors. An ordered factor is created by setting the argument ordered = T, and optionally also specifying a specific ordering of factor levels, like so: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) factor( chr_vector, # the vector to treat as factor ordered = T, # make sure it&#39;s treated as ordered factor levels = c(&quot;huhu&quot;, &quot;ciao&quot;, &quot;hello&quot;) # specify order of levels by hand ) ## [1] huhu hello huhu ciao ## Levels: huhu &lt; ciao &lt; hello Having both unordered and ordered factors is useful for representing data from experiments, e.g., from categorical or ordinal variables (see Chapter 3). The difference between an unordered factor with explicit ordering information and an ordered factor is subtle and not important in the beginning. (This only matters, for example, in the context of regression modeling.) Factors are trickier to work with than mere vectors because they are rigid about the represented factor levels. Adding an item that does not belong to any of a factor’s levels, leads to trouble: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) my_factor &lt;- factor( chr_vector, # the vector to treat as factor ordered = T, # make sure it&#39;s treated as ordered factor levels = c(&quot;huhu&quot;, &quot;ciao&quot;, &quot;hello&quot;) # specify order of levels ) my_factor[5] &lt;- &quot;huhu&quot; # adding a &quot;known category&quot; is okay my_factor[6] &lt;- &quot;moin&quot; # adding an &quot;unknown category&quot; does not work my_factor ## [1] huhu hello huhu ciao huhu &lt;NA&gt; ## Levels: huhu &lt; ciao &lt; hello The forcats package from the tidyverse helps in dealing with factors. You should check the Cheat Sheet for more helpful functionality. Here is an example of how to expand the levels of a factor: chr_vector &lt;- c(&quot;huhu&quot;, &quot;hello&quot;, &quot;huhu&quot;, &quot;ciao&quot;) my_factor &lt;- factor( chr_vector, # the vector to treat as factor ordered = T, # make sure it&#39;s treated as ordered factor levels = c(&quot;huhu&quot;, &quot;ciao&quot;, &quot;hello&quot;) # specify order of levels ) my_factor[5] &lt;- &quot;huhu&quot; # adding a &quot;known category&quot; is okay my_factor &lt;- fct_expand(my_factor, &quot;moin&quot;) # add new category my_factor[6] &lt;- &quot;moin&quot; # adding new item now works my_factor ## [1] huhu hello huhu ciao huhu moin ## Levels: huhu &lt; ciao &lt; hello &lt; moin It is sometimes useful (especially for plotting) to flexibly reorder the levels of an ordered factor. Here are some useful functions from the forcats package: my_factor # original factor ## [1] huhu hello huhu ciao huhu moin ## Levels: huhu &lt; ciao &lt; hello &lt; moin fct_rev(my_factor) # reverse level order ## [1] huhu hello huhu ciao huhu moin ## Levels: moin &lt; hello &lt; ciao &lt; huhu fct_relevel( # manually supply new level order my_factor, c(&quot;hello&quot;, &quot;ciao&quot;, &quot;huhu&quot;) ) ## [1] huhu hello huhu ciao huhu moin ## Levels: hello &lt; ciao &lt; huhu &lt; moin 2.2.6 Lists, data frames &amp; tibbles Lists are key-value pairs. They are created with the built-in function list. The difference between a list and a named vector is that in the latter, all elements must be of the same type. In a list, the elements can be of arbitrary type. They can also be vectors or even lists themselves. For example: my_list &lt;- list( single_number = 42, chr_vector = c(&quot;huhu&quot;, &quot;ciao&quot;), nested_list = list(x = 1, y = 2, z = 3) ) my_list ## $single_number ## [1] 42 ## ## $chr_vector ## [1] &quot;huhu&quot; &quot;ciao&quot; ## ## $nested_list ## $nested_list$x ## [1] 1 ## ## $nested_list$y ## [1] 2 ## ## $nested_list$z ## [1] 3 To access a list element by its name (= key), we can use the $ sign followed by the unquoted name, double square brackets [[ &quot;name&quot; ]] with the quoted name inside, or indices in double brackets, like so: # all of these return the same list element my_list$chr_vector ## [1] &quot;huhu&quot; &quot;ciao&quot; my_list[[&quot;chr_vector&quot;]] ## [1] &quot;huhu&quot; &quot;ciao&quot; my_list[[2]] ## [1] &quot;huhu&quot; &quot;ciao&quot; Lists are very important in R because almost all structured data that belongs together is stored as lists. Objects are special kinds of lists. Data is stored in special kinds of lists, so-called data frames or so-called tibbles. A data frame is base R’s standard format to store data in. A data frame is a list of vectors of equal length. Data sets are instantiated with the function data.frame: # fake experimental data exp_data &lt;- data.frame( trial = 1:5, condition = factor( c(&quot;C1&quot;, &quot;C2&quot;, &quot;C1&quot;, &quot;C3&quot;, &quot;C2&quot;), ordered = T ), response = c(121, 133, 119, 102, 156) ) exp_data ## trial condition response ## 1 1 C1 121 ## 2 2 C2 133 ## 3 3 C1 119 ## 4 4 C3 102 ## 5 5 C2 156 Exercise 2.7 Create a vector a that contains the names of three of your best (imaginary) friends and a vector b with their (imaginary) age. Create a data frame that represents this information (one column with names and one with respective age). Notice that column names should represent the information they contain! Solution a &lt;- c(&quot;M&quot;, &quot;N&quot;, &quot;H&quot;) b &lt;- c(23, 41, 13) best_friends &lt;- data.frame(name = a, age = b) best_friends ## name age ## 1 M 23 ## 2 N 41 ## 3 H 13 We can access columns of a data frame, just like we access elements in a list. Additionally, we can also use index notation, like in a matrix: # gives the value of the cell in row 2, column 3 exp_data[2, 3] # returns 133 ## [1] 133 Exercise 2.8 Display the column of names of your (imaginary) friends from the best_friends data frame. Solution best_friends[&quot;name&quot;] ## name ## 1 M ## 2 N ## 3 H best_friends[1] ## name ## 1 M ## 2 N ## 3 H Now show only the names of friends who are younger than 22 (or some other age that makes sense for your friends and their ages). [Hint: you can write x &lt;= 22 to get a Boolean vector of the same length as x with an entry TRUE at all indices where x is no bigger than 22.] Solution best_friends[best_friends$age &lt;= 22, &quot;name&quot;] ## [1] &quot;H&quot; In RStudio, you can inspect data in data frames (and tibbles (see below)) with the function View. Tibbles are the tidyverse counterpart of data frames. We can cast a data frame into a tibble, using as_tibble. Notice that the information shown for a tibble is much richer than what is provided when printing the content of a data frame. as_tibble(exp_data) ## # A tibble: 5 x 3 ## trial condition response ## &lt;int&gt; &lt;ord&gt; &lt;dbl&gt; ## 1 1 C1 121 ## 2 2 C2 133 ## 3 3 C1 119 ## 4 4 C3 102 ## 5 5 C2 156 We can also create a tibble directly with the keyword tibble. Indeed, the creation of tibbles is conveniently more flexible than the creation of data frames: the former allows dynamic look-up of previously defined elements. my_tibble &lt;- tibble(x = 1:10, y = x^2) # dynamic construction possible my_dataframe &lt;- data.frame(x = 1:10, y = x^2) # ERROR :/ Another important difference between data frames and tibbles concerns the default treatment of character (= string) vectors. When reading in data from a CSV file as a data frame (using function read.csv), each character vector is treated as a factor by default. But when using read_csv to read CSV data into a tibble character vector are not treated as factors. There is also a very convenient function, called tribble, which allows you to create a tibble by explicitly writing out the information in the rows. hw_points &lt;- tribble( ~hw_nr, ~Jax, ~Jamie, ~Jason, &quot;HW1&quot;, 33, 24, 17, &quot;HW2&quot;, 41, 23, 8 ) hw_points ## # A tibble: 2 x 4 ## hw_nr Jax Jamie Jason ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 HW1 33 24 17 ## 2 HW2 41 23 8 Exercise 2.9 Assign to the variable bff a tibble with the following columns (with reasonable names): at least four names of your (imaginary) best friends, their current country of residence, their age, and a Boolean column storing whether they are not older than 23. Ideally, use dynamic construction and the &lt;= operator as in previous exercises. Solution bff &lt;- tibble( name = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), residence = c(&quot;UK&quot;, &quot;JP&quot;, &quot;CH&quot;, &quot;JA&quot;), age = c(24, 45, 72, 12), young = age &lt;= 23 ) bff ## # A tibble: 4 x 4 ## name residence age young ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 A UK 24 FALSE ## 2 B JP 45 FALSE ## 3 C CH 72 FALSE ## 4 D JA 12 TRUE If you are familiar with Python’s scipy and numpy packages, this is R’s default mode of treating numerical information.↩ Python, on the other hand, uses the reverse row-major mode.↩ It is in this sense that the “first index moves fastest” in column-major mode, which is another frequently given explanation of column-major mode.↩ Notice that we can create strings (actually called ‘characters’ in R) with double quotes.↩ "],["Chap-01-01-functions.html", "2.3 Functions", " 2.3 Functions 2.3.1 Some important built-in functions Many helpful functions are defined in base R or supplied by packages. We recommend browsing the Cheat Sheets every now and then to pick up more useful stuff for your inventory. Here are some functions that are very basic and generally useful. 2.3.1.1 Standard logic &amp;: “and” |: “or” !: “not” negate(): a pipe-friendly ! (see Section 2.5 for more on piping) all(): returns true of a vector if all elements are T any(): returns true of a vector if at least one element is T 2.3.1.2 Comparisons &lt;: smaller &gt;: greater ==: equal (you can also use near()instead of == e.g. near(3/3,1)returns TRUE) &gt;=: greater or equal &lt;=: less or equal !=: not equal 2.3.1.3 Set theory %in%: whether an element is in a vector union(x, y): union of x and y intersect(x, y): intersection of x and y setdiff(x, y): all elements in x that are not in y 2.3.1.4 Sampling and combinatorics runif(): random number from unit interval [0;1] sample(x, size, replace): take size samples from x (with replacement if replace is T) choose(n, k): number of subsets of size n out of a set of size k (binomial coefficient) 2.3.2 Defining your own functions If you find yourself in a situation in which you would like to copy-paste some code, possibly with minor amendments, this usually means that you should wrap some recurring operations into a custom-defined function. There are two ways of defining your own functions: as a named function, or an anonymous function. 2.3.2.1 Named functions The special operator supplied by base R to create new functions is the keyword function. Here is an example of defining a new function with two input variables x and y that returns a computation based on these numbers. We assign a newly created function to the variable cool_function so that we can use this name to call the function later. Notice that the use of the return keyword is optional here. If it is left out, the evaluation of the last line is returned. # define a new function # - takes two numbers x &amp; y as argument # - returns x * y + 1 cool_function &lt;- function(x, y) { return(x * y + 1) } # apply `cool_function` to some numbers: cool_function(3, 3) # returns 10 cool_function(1, 1) # returns 2 cool_function(1:2, 1) # returns vector [2,3] cool_function(1) # throws error: &#39;argument &quot;y&quot; is missing, with no default&#39; cool_function() # throws error: &#39;argument &quot;x&quot; is missing, with no default&#39; We can give default values for the parameters passed to a function: # same function as before but with # default values for each argument cool_function_2 &lt;- function(x = 2, y = 3) { return(x * y + 1) } # apply `cool_function_2` to some numbers: cool_function_2(3, 3) # returns 10 cool_function_2(1, 1) # returns 2 cool_function_2(1:2, 1) # returns vector [2,3] cool_function_2(1) # returns 4 (= 1 * 3 + 1) cool_function_2() # returns 7 (= 2 * 3 + 1) Exercise 2.10 Create a function called bigger_100 which takes two numbers as input and outputs 0 if their product is less than or equal to 100, and 1 otherwise. (Hint: remember that you can cast a Boolean value to an integer with as.integer.) Solution bigger_100 &lt;- function(x, y) { return(as.integer(x * y &gt; 100)) } bigger_100(40, 3) ## [1] 1 2.3.2.2 Anonymous functions Notice that we can feed functions as parameters to other functions. This is an important ingredient of a functional-style of programming, and something that we will rely on heavily in this book (see Section 2.4). When supplying a function as an argument to another function, we might not want to name the function that is passed. Here’s a (stupid, but hopefully illustrating) example. We first define the named function new_applier_function which takes two arguments as input: an input vector, which is locally called input in the scope of the function’s body, and a function, which is locally called function_to_apply. Our new function new_applier_function first checks whether the input vector has more than one element, throws an error if not, and otherwise applies the argument function function_to_apply to the vector input. # define a function that takes a vector and a function as an argument new_applier_function &lt;- function(input, function_to_apply) { # check if input vector has at least 2 elements if (length(input) &lt;= 1) { # terminate and show informative error message stop(&quot;Error in &#39;new_applier_function&#39;: input vector has length &lt;= 1.&quot;) } # otherwise apply the function to the input vector return(function_to_apply(input)) } We use this new function to show the difference between named and unnamed functions, in particular why the latter can be very handy and elegant. First, we consider a case where we use new_applier_function in connection with the named built-in function sum: # sum vector with built-in &amp; named function new_applier_function( input = 1:3, # input vector function_to_apply = sum # built-in &amp; named function to apply ) # returns 6 If instead of an existing named function, we want to use a new function to supply to new_applier_function, we could define that function first and give it a name, but if we only need it “in situ” for calling new_applier_function once, we can also write this: # Sum vector with anonymous function new_applier_function( input = 1:3, # input vector function_to_apply = function(in_vec) { return(in_vec[1] + in_vec[2]) } ) # returns 3 (as it only sums the first two arguments) Exercise 2.11 How many arguments should you pass to a function that… …tells if the sum of two numbers is even? …applies two different operations on a variable and sums the results? Operations are not fixed in the function. Solution Two arguments. Three arguments. Call the function new_applier_function with input = 1:3 and an anonymous function that returns just the first two elements of the input vector in reverse order (as a vector). Solution new_applier_function( input = 1:3, # input vector function_to_apply = function(in_vec) { return(c(in_vec[c(2,1)])) } ) "],["ch-01-01-loops-and-maps.html", "2.4 Loops and maps", " 2.4 Loops and maps 2.4.1 For-loops For iteratively performing computation steps, R has a special syntax for for loops. Here is an example of an (again, stupid, but illustrative) example of a for loop in R: # fix a vector to transform input_vector &lt;- 1:6 # create output vector for memory allocation output_vector &lt;- integer(length(input_vector)) # iterate over length of input for (i in 1:length(input_vector)) { # multiply by 10 if even if (input_vector[i] %% 2 == 0) { output_vector[i] &lt;- input_vector[i] * 10 } # otherwise leave unchanged else { output_vector[i] &lt;- input_vector[i] } } output_vector ## [1] 1 20 3 40 5 60 Exercise 2.12 Let’s practice for-loops and if/else statements! Create a vector a with 10 random integers from range (1:50). Create a second vector b that has the same length as vector a. Then fill vector b such that the \\(i\\)th entry in b is the mean of a[(i-1):(i+1)]. Do that using a for-loop. Note that missing values are equal to 0 (see example below). Print out the result as a tibble whose columns are a and b. Example: If a has the values [25, 39, 12, 33, 47, 3, 48, 14, 45, 8], then vector b should contain the values [21, 25, 28, 31, 28, 33, 22, 36, 22, 18] when rounded to whole integers. The value in the fourth position of b (value 31), is obtained with (a[3] + a[4] + a[5])/3. The value in the first position of b (value 21) is obtained with (0 + a[1] + a[2])/3 and similarly the last value with (a[9] + a[10] + 0)/3. (Hint: use conditional statements if, if else and else to deal specifically with the edge cases (first and last entry in the vectors).) Solution a &lt;- c(sample((1:50), 10, replace = T)) b &lt;- c(integer(length(a))) for (i in 1:length(a)){ if (i == 1) { b[i] &lt;- (sum(a[i:(i+1)])/3) } else if (i == length(a)) { b[i] &lt;- (sum((a[(i-1):i]))/3) } else { b[i] &lt;- (mean(a[(i-1):(i+1)])) } } tibble(a, b) ## # A tibble: 10 x 2 ## a b ## &lt;int&gt; &lt;dbl&gt; ## 1 18 15 ## 2 27 24.3 ## 3 28 23 ## 4 14 20.7 ## 5 20 17 ## 6 17 17 ## 7 14 17.3 ## 8 21 18 ## 9 19 19.7 ## 10 19 12.7 2.4.2 Functional iterators Base R provides functional iterators (e.g., apply), but we will use the functional iterators from the purrr package. The main functional operator from purrr is map which takes a vector and a function, applies the function to each element in the vector and returns a list with the outcome. There are also versions of map, written as map_dbl (double), map_lgl (logical) or map_df (data frame), which return a vector of doubles, Booleans or a data frame. The following code repeats the previous example which used a for-loop but now within a functional style using the functional iterator map_dbl: input_vector &lt;- 1:6 map_dbl( input_vector, function(i) { if (input_vector[i] %% 2 == 0) { return(input_vector[i] * 10) } else { return (input_vector[i]) } } ) ## [1] 1 20 3 40 5 60 We can write this even shorter, using purrr’s short-hand notation for functions:11 input_vector &lt;- 1:6 map_dbl( input_vector, ~ ifelse(.x %% 2 == 0, .x * 10, .x) ) ## [1] 1 20 3 40 5 60 The trailing ~ indicates that we define an anonymous function. It, therefore, replaces the usual function(...) call which indicates which arguments the anonymous function expects. To make up for this, after the ~ we can use .x for the first (and only) argument of our anonymous function. To apply a function to more than one input vector, element per element, we can use pmap and its derivatives, like pmap_dbl etc. pmap takes a list of vectors and a function. In short-hand notation, we can define an anonymous function with ~ and integers like ..1, ..2 etc, for the first, second … argument. For example: x &lt;- 1:3 y &lt;- 4:6 z &lt;- 7:9 pmap_dbl( list(x, y, z), ~ ..1 - ..2 + ..3 ) ## [1] 4 5 6 Exercise 2.13 Use map_dbl and an anonymous function to take the following input vector and return a vector whose \\(i\\)th element is the cumulative product of input up to the \\(i\\)th position divided by the cumulative sum of input up to that position. (Hint: the cumulative product up to position \\(i\\) is produced by prod(input[1:i]); notice that you need to “loop over”, so to speak, the index \\(i\\), not the elements of the vector input.) input &lt;- c(12, 6, 18) Solution map_dbl( 1:length(input), function(i) { prod(input[1:i]) / sum(input[1:i]) } ) ## [1] 1 4 36 Just for the record, we can achieve the same result also by ifelse(input_vector %% 2 == 0, input_vector * 10, input_vector).↩ "],["Chap-01-01-piping.html", "2.5 Piping", " 2.5 Piping When we use a functional style of programming, piping is your best friend. Consider the standard example of applying functions in what linguists would call “center-embedding”. We start with the input (written inside the inner-most bracketing), then apply the first function round, then the second mean, writing each next function call “around” the previous. # define input input_vector &lt;- c(0.4, 0.5, 0.6) # first round, then take mean mean(round(input_vector)) ## [1] 0.3333333 Things quickly get out of hand when more commands are nested. A common practice is to store intermediate results of computations in new variables which are only used to pass the result into the next step. # define input input_vector &lt;- c(0.4, 0.5, 0.6) # rounded input rounded_input &lt;- round(input_vector) # mean of rounded input mean(rounded_input) ## [1] 0.3333333 Piping lets you pass the result of a previous function call into the next. The magrittr package supplies a special infix operator %&gt;% for piping.12 The pipe %&gt;% essentially takes what results from evaluating the expression on its left-hand side and inputs it as the first argument in the function on its right-hand side. So x %&gt;% f is equivalent to f(x). Or, to continue the example from above, we can now write: input_vector %&gt;% round %&gt;% mean ## [1] 0.3333333 The functions defined as part of the tidyverse are all constructed in such a way that the first argument is the most likely input you would like to pipe into them. But if you want to pipe the left-hand side into another argument slot than the first, you can do that by using the . notation to mark the slot where the left-hand side should be piped into: y %&gt;% f(x, .) is equivalent to f(x, y). Exercise 2.14 A friendly colleague has sent reaction time data in a weird format: weird_RTs &lt;- c(&quot;RT = 323&quot;, &quot;RT = 345&quot;, &quot;RT = 421&quot;, &quot;RT = 50&quot;) Starting with that vector, use a chain of pipes to: extract the numeric information from the string, cast the information into a vector of type numeric, take the log, take the mean, round to 2 significant digits. (Hint: to get the numeric information use stringr::str_sub, which works in this case because the numeric information starts after the exact same number of characters.) Solution weird_RTs %&gt;% stringr::str_sub(start = 6) %&gt;% as.numeric() %&gt;% log %&gt;% mean %&gt;% signif(digits = 2) ## [1] 5.4 The pipe symbol %&gt;% can be inserted in RStudio with Ctrl+Shift+M (Win/Linux) or Cmd+Shift+M (Mac).↩ "],["ch-01-01-Rmarkdown.html", "2.6 Rmarkdown", " 2.6 Rmarkdown Rmarkdown is a simple markup language that embeds R code and its output in order to produce a large variety of document types as output, including HTML or PDF (see Figure 2.4). Figure 2.4: Artwork by allison_horst A strong argument for using something like Rmarkdown in your research pipeline in reproducibility (see Figure 2.5). When you prepare a data set and perform a statistical analysis, for example, you will by necessity make a lot of detailed decisions, not all of which are easy to report in natural language, but all of which combined, contribute to the results you eventually report, e.g., in a research or term paper. Since science aims for objectivity and social structures of scrutinizing previous results, it is important to share with other researchers all of your assumptions and decisions of detail. Ideally, therefore, you can share something like a nicely commented Rmarkdown file that contains every step of the analysis. Figure 2.5: Artwork by allison_horst To get familiar with Rmarkdown, please follow this tutorial. "],["Chap-02-01-data.html", "3 Data, variables &amp; experimental designs", " 3 Data, variables &amp; experimental designs The focus of this course is on data from behavioral experiments, mostly from cognitive psychology or linguistics.13 Data from behavioral experiments are reasonably “well-behaved” data to analyze, in the sense that they require less preprocessing (such as, for instance, data from EEG experiments), and so provide an excellent starting point into data analysis. However, we should not lose sight of the rich and diverse guises of data that are relevant for scientific purposes. After discussing briefly what “data” is in general in Section 3.1, Section 3.2 surveys some of the richness and diversity in which “data” can occur. But it then hones in on some basic distinctions of the kinds of data we will frequently deal with in the cognitive sciences in Section 3.3. We also pick up a few relevant concepts of experimental design in Section 3.4. The learning goals for this chapter are: distinguish different kinds of variables dependent vs. independent nominal vs. ordinal vs. metric get familiar with basic aspects of experimental design factorial designs within- vs. between-subjects design repeated measures randomization, fillers and controls sample size A behavioral experiment is an experiment that records participants’ behavioral choices, such as button clicks or linguistic responses in the form of text or speech. This contrasts with, say, neurological experiments in which participants’ brain activity is recorded, such as with fMRI or EEG, or, e.g., in a psycholinguistic context, processing-related experiments in which secondary measures of cognitive activity are measured, such as eye-movements, pupil dilation or galvanic skin responses.↩ "],["Chap-02-01-data-what-is-data.html", "3.1 What is data?", " 3.1 What is data? Some say we live in the data age. But what is data actually? Purist pedants say: “The plural of datum” and add that a datum is just an observation. But when we say “data”, we usually mean a bit more than a bunch of observations. The observation that Jones had apple and banana for breakfast, is maybe interesting but not what we usually call “data”. The Merriam-Webster offers the following definition: Factual information (such as measurements or statistics) used as a basis for reasoning, discussion, or calculation. This is a teleological definition in the sense that it refers to a purpose: data is something that is “used as basis for reasoning, discussion, or calculation”. So, what we mean by “data” is, in large part, defined by what we intend to do with it. Another important aspect of this definition is that we usually consider data to be systematically structured in some way or another. Even when we speak of “raw data”, we expect there to be some structure (maybe labels, categories etc.) that distinguishes data from uninterpretable noise (e.g., the notion of a “variable”, discussed in Section 3.3). In sum, we can say that data is a representation of information stored in a systematic way for the purpose of inference, argument or decision making. Let us consider an example of data from a behavioral experiment, namely the King of France experiment. It is not important to know about this experiment for now. We just want to have a first glimpse at how data frequently looks like. Using R (in ways that we will discuss in the next chapter), we can show the content of part of the data as follows: ## # A tibble: 6 x 4 ## submission_id trial_number trial_type response ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 192 1 practice FALSE ## 2 192 2 practice TRUE ## 3 192 3 practice FALSE ## 4 192 4 practice TRUE ## 5 192 5 practice TRUE ## 6 192 1 filler TRUE We see that the data is represented as a tibble and that there are different kinds of column with different kinds of information. The submission_id is an anonymous identifier for the person whose data is shown here. The trial_number is a consecutive numbering of the different stages of the experiment (at each of which the participant gave one response, listed in the response column). The trial_type tells us which kind of trial each observation is from. There are more columns in this data set, but this is just for a first, rough impression of how “data” might look like. The most important thing to see here is that, following the definition above, data is “information stored in a systematic way”. "],["Chap-02-01-data-kinds-of-data.html", "3.2 Different kinds of data", " 3.2 Different kinds of data There are different kinds of data. Figure 3.1 shows some basic distinctions, represented in a conceptual hierarchy. Figure 3.1: Hierarchy of different kinds of data relevant for ‘data science’. It is easy but wrong to think that data always has to be information based on observations of the world. It is easy to think this because empirical data, i.e., data obtained from empirical observation, is the most common form of data (given that it is, arguably, most relevant for decision making and argument). But it is wrong to think this because we can just as well look at virtual data. For example, virtual data, which is of interest to a data analyst, could be data obtained from computer simulation studies, e.g., from, say, one billion runs of a multi-agent simulation intended to shed light on the nature of cooperative interaction. It makes sense to analyze such data with the same tools as data from an experiment. For instance, we might find out that some parameter constellations in the simulation run are (statistically) most conducive to producing cooperative behavior among our agents. Another example of virtual data is data generated as predictions of a model, which we can use to test whether that model is any good, in so-called model criticism.14 Finally, we should also include logically possible sample data in this list, because of its importance to central ideas of statistical inference (especially \\(p\\)-values, see Section 16). Logically possible sample data are those that were neither observed nor predicted by a model, but something that could have been observed hypothetically, something that it is merely logically possible to observe, even if it would almost never happen in reality or would not be predicted by any serious model. The most frequent form of data, empirical data about the actual world, comes in two major variants. Observational data is data gathered by (passively) observing and recording what would have happened even if we had not been interested in it, so to speak. Examples of observational data are collections of socio-economic variables, like gender, education, income, number of children, etc. In contrast, experimental data is data recorded in a strict regime of manipulation-and-observation, i.e., a scientific experiment. Some pieces of information can only be recorded in an observational study (annual income), and others can only be obtained through experimentation (memory span). Both methods of data acquisition have their own pros and cons. Here are some of the more salient ones: Table 3.1: Comparison of the pros and cons of observational data and experimental data. observational experimental ecologically valid possibly artificial easy/easier to obtain hard/harder to obtain correlation &amp; causation hard to tease apart may yield information on causation vs. correlation No matter what kind of data we have at hand, there are at least two prominent purposes for which data can be useful: explanation and prediction. Though related, it is useful to keep these purposes cleanly apart. Data analysis for explanation uses the data to better understand the source of the data (the world, a computer simulation, a model, etc.). Data analysis for prediction tries to extract regularities from the data gathered so far to make predictions (as accurately as possible) about future or hitherto unobserved data. We will later speak of prior/posterior predictions for this kind of data. Other applicable terms are repeat data or sometimes fake data.↩ "],["Chap-02-01-data-variables.html", "3.3 On the notion of “variables”", " 3.3 On the notion of “variables” Data used for data analysis, even if it is “raw data”, i.e., data before preprocessing and cleaning, is usually structured or labeled in some way or other. Even if the whole data we have is a vector of numbers, we would usually know what these numbers represent. For instance, we might just have a quintuple of numbers, but we would (usually/ideally) know that these represent the results of an IQ test. # a simple data vector of IQ-scores IQ_scores &lt;- c(102, 115, 97, 126, 87) Or we might have a Boolean vector with the information of whether each of five students passed an exam. But even then we would (usually/ideally) know the association between names and test results, as in a table like this: # who passed the exam exam_results &lt;- tribble( ~student, ~pass, &quot;Jax&quot;, TRUE, &quot;Jason&quot;, FALSE, &quot;Jamie&quot;, TRUE ) Association of information, as between different columns in a table like the one above, is crucial. Most often, we have more than one kind of observation that we care about. Most often, we care about systematic relationships between different observables in the world. For instance, we might want to look at a relation between, on the one hand, the chance of passing an exam and, on the other hand, the proportion of attendance of the course’s tutorial sessions: # proportion of tutorials attended and exam pass/fail exam_results &lt;- tribble( ~student, ~tutorial_proportion, ~pass, &quot;Jax&quot;, 0.0, TRUE, &quot;Jason&quot;, 0.78, FALSE, &quot;Jamie&quot;, 0.39, TRUE ) exam_results ## # A tibble: 3 x 3 ## student tutorial_proportion pass ## &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 Jax 0 TRUE ## 2 Jason 0.78 FALSE ## 3 Jamie 0.39 TRUE Data of this kind is also called rectangular data, i.e., data that fits into a rectangular table (More on the structure of rectangular data in Section 4.2.). In the example above, every column represents a variable of interest. A (data) variable stores the observations that are of the same kind.15 Different kinds of variables are distinguished based on the structural properties of the kinds of observations that they represent. Common types of variables are, for instance: nominal variable: each observation is an instance of a (finite) set of clearly distinct categories, lacking a natural ordering; binary variable: special case of a nominal variable where there are only two categories; Boolean variable: special case of a binary variable where the two categories are Boolean values “true” and “false”; ordinal variable: each observation is an instance of a (finite) set of clearly distinct and naturally ordered categories, but there is no natural meaning of distance between categories (i.e., it makes sense to say that A is “more” than B but not that A is three times “more” than B); metric variable: each observation is isomorphic to a subset of the reals and interval-scaled (i.e., it makes sense to say that A is three times “more” than B); Examples of some different kinds of variables are shown in Figure 3.2, and Table 3.2 lists common and/or natural ways of representing different kinds of (data) variables in R. Figure 3.2: Examples of different kinds of (data) variables. Artwork by allison_horst. Table 3.2: Common / natural formats for representing data of different kinds in R. variable type representation in R nominal / binary unordered factor Boolean logical vector ordinal ordered factor metric numeric vector In experimental data, we also distinguish the dependent variable(s) from the independent variable(s). The dependent variables are the variables that we do not control or manipulate in the experiment, but the ones that we are curious to record (e.g., whether a patient recovered from an illness within a week). Dependent variables are also called to-be-explained variables. The independent variables are the variables in the experiment that we manipulate (e.g., which drug to administer), usually with the intention of seeing a particular effect on the dependent variables. Independent variables are also called explanatory variables. Exercise 3.1: Variables You are given the following table of observational data: ## # A tibble: 7 x 8 ## name age gender handedness height education has_pets mood ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; ## 1 A 24 female right 1.74 undergraduate FALSE neutral ## 2 B 32 non-binary right 1.68 graduate TRUE happy ## 3 C 23 male left 1.62 high school TRUE OK ## 4 D 27 male right 1.84 graduate FALSE very happy ## 5 E 26 non-binary left 1.59 undergraduate FALSE very happy ## 6 F 28 female right 1.66 graduate TRUE OK ## 7 G 35 male right 1.68 high school FALSE neutral For each column, decide which type of variable (nominal, binary, etc.) is stored. Solution name: nominal variable age: metric variable gender: nominal variable handedness: binary variable height: metric variable education: ordinal variable has_pets: Boolean variable mood: ordinal variable This sense of “data variable” is not to be confused with the notion of a “random variable”, a concept we will introduce later in Section 7.4. The term “data variable” is not commonly used; the common term is merely “variable”.↩ "],["Chap-02-01-data-exp-design.html", "3.4 Basics of experimental design", " 3.4 Basics of experimental design The most basic template for an experiment is to just measure a quantity of interest (the dependent variable), without taking into account any kind of variation in any kind of independent variables. For instance, we measure the time it takes for an object with a specific shape and weight to hit the ground when dropped from a height of exactly 2 meters. To filter out measurement noise, we do not just record one observation, but, ideally, as much as we possibly and practically can. We use the measurements, in our concrete example: time measurements, to test a theory about acceleration and gravity. Data from such a simple measurement experiment would be just a single vector of numbers. A more elaborate kind of experiment would allow for at least one independent variable. Another archetypical example of an empirical experiment would be a medical study, e.g., one in which we are interested in the effect of a particular drug on the blood pressure of patients. We would then randomly allocate each participant to one of two groups. One group, the treatment group, receives the drug in question; the other group, the control group, receives a placebo (and nobody, not even the experimenter, knows who receives what). After a pre-defined exposure to either drug or placebo, blood pressure (for simplicity, just systolic blood pressure) is measured. The interesting question is whether there is a difference between the measurements across groups. This is a simple example of a one-factor design. The factor in question is which group any particular measurement belongs to. Data from such an experiment could look like this: tribble( ~subj_id, ~group, ~systolic, 1, &quot;treatment&quot;, 118, 2, &quot;control&quot;, 132, 3, &quot;control&quot;, 116, 4, &quot;treatment&quot;, 127, 5, &quot;treatment&quot;, 122 ) ## # A tibble: 5 x 3 ## subj_id group systolic ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 treatment 118 ## 2 2 control 132 ## 3 3 control 116 ## 4 4 treatment 127 ## 5 5 treatment 122 For the purposes of this course, which is not a course on experimental design, just a few key concepts of experimental design are important to be aware of. We will go through some of these issues in the following. 3.4.1 What to analyze? – Dependent variables To begin with, it is important to realize that there is quite some variation in what counts as a dependent variable. Not only can there be more than one dependent variable, but each dependent variable can also be of quite a different type (nominal, ordinal, metric, …), as discussed in the previous section. Moreover, we need to carefully distinguish between the actual measurement/observation and the dependent variable itself. The dependent variable is (usually) what we plot, analyze and discuss, but very often, we measure much more or something else. The dependent variable (of analysis) could well just be one part of the measurement. For example, a standard measure of blood pressure has a number for systolic and another for diastolic pressure. Focussing on just one of these numbers is a (hopefully: theoretically motivated; possibly: arbitrary; in the worst case: result-oriented) decision of the analyst. More interesting examples of such data preprocessing frequently arise in the cognitive sciences, for example: eye-tracking: the measured data are triples consisting of a time-point and two spatial coordinates, but what might be analyzed is just the relative proportion of looks at a particular spatial region of interest (some object on the screen) in a particular temporal region of interest (up to 200 ms after the image appeared) EEG: individual measurements obtained by EEG are very noisy, so that the dependent measure in many analyses is an aggregation over the mean voltage recorded by selected electrodes, where averages are taken for a particular subject over many trials of the same condition (repeated measures) that this subject has seen But we do not need to go fancy in our experimental methods to see how issues of data processing affect data analysis at its earliest stages, namely by selecting the dependent variable (that which is to be analyzed). Just take the distinction between closed questions and open questions in text-based surveys. In closed questions, participants select an answer from a finite (usually) small number of choices. In open questions, however, they can write text freely, or they can draw, sing, pronounce, gesture, etc. Open response formats are great and naturalistic, but they, too, often require the analyst to carve out a particular aspect of the (rich, natural) observed reality to enter the analysis. 3.4.2 Conditions, trials, items A factorial design is an experiment with at least two independent variables, all of which are (ordered or unordered) factors.16 Many psychological studies are factorial designs. Whole batteries of analysis techniques have been developed specifically tuned to these kinds of experiments. Factorial designs are often described in terms of short abbreviations. For example, an experiment described as a “\\(n \\times m\\) factorial design” would have two factors of interest, the first of which has \\(n\\) levels, the second of which has \\(m\\) levels. For example, a \\(2 \\times 3\\) factorial design could have one independent variable recording a binary distinction between control and treatment group, and another independent variable representing an orthogonal distinction of gender in categories ‘male’, ‘female’ and ‘non-binary’. For a \\(2 \\times 2 \\times 3\\) factorial design, there are 2 * 2 * 3 = 12 different experimental conditions (also sometimes called design cells). An important distinction in experimental design is whether all participants contribute data to all of the experimental conditions, or whether each only contributes to a part of it. If participants only contribute data to a part of all experimental conditions, this is called a between-subjects design. If all participants contribute data to all experimental conditions, we speak of a within-subjects design. Clearly, sometimes the nature of a design factor determines whether the study can be within-subjects. For example, switching gender for the purpose of a medical study on blood pressure drugs is perhaps a tad much to ask of a participant (though possibly a very enlightening experience). If there is room for the experimenter’s choice of study type, it pays to be aware of some of the clear advantages and drawbacks of either method, as listed in Table 3.3. Table 3.3: Comparison of the pros and cons of between- and within-subjects designs. between-subjects within-subjects no confound between conditions possible cross-contamination between conditions more participants needed fewer participants needed less associated information for analysis more associated data for analysis No matter whether we are dealing with a between- or within-subjects design, another important question is whether each participant gives us only one observation per design cell, or more than one. If participants contribute more than one observation to a design cell, we speak of a repeated-measures design. Such designs are useful as they help separate the signal from the noise (recall the initial example of time measurement from physics). They are also economical because getting several observations worth of relevant data from a single participant for each design cell means that we have to get fewer people to do the experiment (normally). However, exposing a participant repeatedly to the same experimental condition can be detrimental to an experiment’s purpose. Participants might recognize the repetition and develop quick coping strategies to deal with the boredom, for example. For this reason, repeated-measures designs usually include different kinds of trials: Critical trials belong to, roughly put, the actual experiment, e.g., one of the experiment’s design cells. Filler trials are packaged around the critical trials to prevent blatant repetition, predictability or recognition of the experiment’s purpose. Control trials are trials whose data is not used for statistical inference but for checking the quality of the data (e.g., attention checks or tests of whether a participant understood the task correctly). When participants are exposed to several different kinds of trials and even several instances of the same experimental condition, it is also often important to introduce some variability between the instances of the same types of trials. Therefore, psychological experiments often use different items, i.e., different (theoretically exchangeable) instantiations of the same (theoretically important) pattern. For example, if a careful psycholinguist designs a study on the processing of garden-path sentences, she will include not just one example (“The horse raced past the barn fell”) but several (e.g., “Since Jones frequently jogs a mile is a short distance to her”). Item-variability is also important for statistical analyses, as we will see when we talk about hierarchical modeling. In longer experiments, especially within-subjects repeated-measures designs in which participants encounter a lot of different items for each experimental condition, clever regimes of randomization are important to minimize the possible effect of carry-over artifacts, for example. A frequent method is pseudo-randomization, where the trial sequence is not completely arbitrary but arbitrary within certain constraints, such as a particular block design, where each block presents an identical number of trials of each type, but each block shuffles the sequence of its types completely at random. The complete opposite of a within-participants repeated measures design is a so-called single-shot experiment in which any participant gives exactly one data point for one experimental condition. 3.4.3 Sample size A very important question for experimental design is that of the sample size: how many data points do we need (per experimental condition)? We will come back to this issue only much later in this course when we talk about statistical inference. This is because the decision of how many, say, participants to invite for a study should ideally be influenced not by the available time and money, but also by statistical considerations of the kind: how many data points do I need in order to obtain a reasonable level of confidence in the resulting statistical inferences I care about? Exercise 3.2: Experimental Design Suppose that we want to investigate the effect of caffeine ingestion and time of day on reaction times in solving simple math tasks. The following table shows the measurements of two participants: ## # A tibble: 12 x 4 ## subject_id `RT (ms)` caffeine `time of day` ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 43490 none morning ## 2 1 35200 medium morning ## 3 1 33186 high morning ## 4 1 26350 none afternoon ## 5 1 27004 medium afternoon ## 6 1 26492 high afternoon ## 7 2 42904 none morning ## 8 2 36129 medium morning ## 9 2 30340 high morning ## 10 2 28455 none afternoon ## 11 2 40593 medium afternoon ## 12 2 23992 high afternoon Is this experiment a one-factor or a full factorial design? What is/are the factor(s)? How many levels does each factor have? Solution This experiment is a \\(3 \\times 2\\) full factorial design. It has two factors, caffeine (levels: none, medium, high) and time of day (levels: morning, afternoon). How many experimental conditions are there? Solution There are 3 * 2 = 6 different experimental conditions. Is it a between- or within-subjects design? Solution Within-subjects design (each participant contributes data to all experimental conditions). What is the dependent variable, what is/are the independent variable(s)? Solution Dependent variable: RT (the reaction time) Independent variable 1: caffeine (the caffeine dosage) Independent variable 2: time of day Is this experiment a repeated measures design? Explain your answer. Solution No, each participant contributes exactly one data point per design cell. The archetypical medical experiment discussed above is a one-factor design. In contrast, the term ‘factorial design’ is usually used to refer to what is also often called a full factorial design. These are designs with at least two independent variables.↩ "],["data-wrangling.html", "4 Data Wrangling", " 4 Data Wrangling The information relevant for our analysis goals is not always directly accessible. Sometimes, we must first uncover it effortfully from an inconvenient representation. Also, sometimes data must be cleaned (ideally: by a priori specified criteria) through removing data points that are deemed of insufficient quality for a particular goal. All of this, and more, is the domain of data wrangling: preprocessing, cleaning, reshaping, renaming etc. Section 4.1 describes how to read data from and write data to files. Section 4.2 introduces the concept of tidy data. We then look at a few common tricks of data manipulation in Section 4.3. We will learn about grouping operations in Section 4.4. Finally, we look at a concrete application in Section 4.5. The learning goals for this chapter are: be able to read from and write data to files understand the notion of tidy data be able to solve common problems of data preprocessing "],["Chap-02-02-data-IO.html", "4.1 Data in, data out", " 4.1 Data in, data out The readr package handles the reading and writing of data stored in text files.17 Here is a cheat sheet on the topic: data I/O cheat sheet. The data sets we will mainly deal with in this course are included in the aida package for convenience. Occasionally, we will also read in data stored in CSV files. Reading a data set from a CSV file works with the read_csv function: fresh_raw_data &lt;- read_csv(&quot;PATH/FILENAME_RAW_DATA.csv&quot;) Writing to a CSV file can be done with the write_csv function: write_csv(processed_data, &quot;PATH/FILENAME_PROCESSED_DATA.csv&quot;) If you want to use a different delimiter (between cells) than a comma, you can use read_delim and write_delim for example, which take an additional argument delim to be set to the delimiter in question. # reading data from a file where cells are (unconventionally) delimited by string &quot;|&quot; data_from_weird_file &lt;- read_delim(&quot;WEIRD_DATA_FILE.TXT&quot;, delim = &quot;|&quot;) Other packages help with reading data from and writing data to other file types, such as excel sheets. Look at the data I/O cheat sheet for more information.↩ "],["Chap-02-02-data-tidy-data.html", "4.2 Tidy data", " 4.2 Tidy data The same data can be represented in multiple ways. There is even room for variance in the class of rectangular representations of data. Some manners of representations are more useful for certain purposes than for others. For data analysis (plotting, statistical analyses) we prefer to represent our data as (rectangular) tidy data. A concise rationale for using tidy data is given in Figure 4.1. Figure 4.1: Artwork by allison_horst 4.2.1 Running example Consider the example of student grades for two exams in a course. A compact way of representing the data for visual digestion is the following representation: exam_results_visual &lt;- tribble( ~exam, ~&quot;Rozz&quot;, ~&quot;Andrew&quot;, ~&quot;Siouxsie&quot;, &quot;midterm&quot;, &quot;1.3&quot;, &quot;2.0&quot;, &quot;1.7&quot;, &quot;final&quot; , &quot;2.3&quot;, &quot;1.7&quot;, &quot;1.0&quot; ) exam_results_visual ## # A tibble: 2 x 4 ## exam Rozz Andrew Siouxsie ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 midterm 1.3 2.0 1.7 ## 2 final 2.3 1.7 1.0 This is how such data would frequently be represented, e.g., in tables in a journal. Indeed, Rmarkdown helps us present this data in an appetizing manner, e.g., in Table 4.1, which is produced by the code below: knitr::kable( exam_results_visual, caption = &quot;Fictitious exam results of fictitious students.&quot;, booktabs = TRUE ) Table 4.1: Fictitious exam results of fictitious students. exam Rozz Andrew Siouxsie midterm 1.3 2.0 1.7 final 2.3 1.7 1.0 Though highly perspicuous, this representation of the data is not tidy, in the special technical sense we endorse here. A tidy representation of the course results could be this: exam_results_tidy &lt;- tribble( ~student, ~exam, ~grade, &quot;Rozz&quot;, &quot;midterm&quot;, 1.3, &quot;Andrew&quot;, &quot;midterm&quot;, 2.0, &quot;Siouxsie&quot;, &quot;midterm&quot;, 1.7, &quot;Rozz&quot;, &quot;final&quot;, 2.3, &quot;Andrew&quot;, &quot;final&quot;, 1.7, &quot;Siouxsie&quot;, &quot;final&quot;, 1.0 ) exam_results_tidy ## # A tibble: 6 x 3 ## student exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Rozz midterm 1.3 ## 2 Andrew midterm 2 ## 3 Siouxsie midterm 1.7 ## 4 Rozz final 2.3 ## 5 Andrew final 1.7 ## 6 Siouxsie final 1 4.2.2 Definition of tidy data Following Wickham (2014), a tidy representation of (rectangular) data is defined as one where: each variable forms a column, each observation forms a row, and each type of observational unit forms a table. Any data set that is not tidy is messy data. Messy data that satisfies the first two constraints, but not the third will be called almost tidy data in this course. We will work, wherever possible, with data that is at least almost tidy. Figure 4.2 shows a graphical representation of the concept of tidy data. Figure 4.2: Organization of tidy data (taken from Wickham and Grolemund (2016)). 4.2.3 Excursion: non-redundant data The final condition in the definition of tidy data is not particularly important for us here (since we will make do with ‘almost tidy data’), but to understand it nonetheless consider the following data set: exam_results_overloaded &lt;- tribble( ~student, ~stu_number, ~exam, ~grade, &quot;Rozz&quot;, &quot;666&quot;, &quot;midterm&quot;, 1.3, &quot;Andrew&quot;, &quot;1969&quot;, &quot;midterm&quot;, 2.0, &quot;Siouxsie&quot;, &quot;3.14&quot;, &quot;midterm&quot;, 1.7, &quot;Rozz&quot;, &quot;666&quot;, &quot;final&quot;, 2.3, &quot;Andrew&quot;, &quot;1969&quot;, &quot;final&quot;, 1.7, &quot;Siouxsie&quot;, &quot;3.14&quot;, &quot;final&quot;, 1.0 ) exam_results_overloaded ## # A tibble: 6 x 4 ## student stu_number exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Rozz 666 midterm 1.3 ## 2 Andrew 1969 midterm 2 ## 3 Siouxsie 3.14 midterm 1.7 ## 4 Rozz 666 final 2.3 ## 5 Andrew 1969 final 1.7 ## 6 Siouxsie 3.14 final 1 This table is not tidy in an intuitive sense because it includes redundancy. Why list the student numbers twice, once with each observation of exam score? The table is not tidy in the technical sense that not every observational unit forms a table, i.e., the observation of student numbers and the observation of exam scores should be stored independently in different tables, like so: # same as before exam_results_tidy &lt;- tribble( ~student, ~exam, ~grade, &quot;Rozz&quot;, &quot;midterm&quot;, 1.3, &quot;Andrew&quot;, &quot;midterm&quot;, 2.0, &quot;Siouxsie&quot;, &quot;midterm&quot;, 1.7, &quot;Rozz&quot;, &quot;final&quot;, 2.3, &quot;Andrew&quot;, &quot;final&quot;, 1.7, &quot;Siouxsie&quot;, &quot;final&quot;, 1.0 ) # additional table with student numbers student_numbers &lt;- tribble( ~student, ~student_number, &quot;Rozz&quot;, &quot;666&quot;, &quot;Andrew&quot;, &quot;1969&quot;, &quot;Siouxsie&quot;, &quot;3.14&quot; ) Notice that, although the information is distributed over two tibbles, it is linked by the common column student. If we really need to bring all of the information together, the tidyverse has a quick and elegant solution: full_join(exam_results_tidy, student_numbers, by = &quot;student&quot;) ## # A tibble: 6 x 4 ## student exam grade student_number ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Rozz midterm 1.3 666 ## 2 Andrew midterm 2 1969 ## 3 Siouxsie midterm 1.7 3.14 ## 4 Rozz final 2.3 666 ## 5 Andrew final 1.7 1969 ## 6 Siouxsie final 1 3.14 Exercise 4.1: Tidy or Untidy? Lets take a look at this made up data set: data &lt;- tribble( ~subject_id, ~choices, ~reaction_times, 1, &quot;A,B,B&quot;, &quot;312 433 365&quot;, 2, &quot;B,A,B&quot;, &quot;393 491 327&quot;, 3, &quot;B,A,A&quot;, &quot;356 313 475&quot;, 4, &quot;A,B,B&quot;, &quot;292 352 378&quot;) Is this data tidy or untidy? Explain your reasoning. Solution This data is untidy for given reasons: Each row contains more than one observation. Most fields contain more than one value. References "],["Chap-02-02-data-preprocessing-cleaning.html", "4.3 Data manipulation: the basics", " 4.3 Data manipulation: the basics 4.3.1 Pivoting The tidyverse strongly encourages the use of tidy data, or at least almost tidy data. If your data is (almost) tidy, you can be reasonably sure that you can plot and analyze the data without additional wrangling. If your data is not (almost) tidy because it is too wide or too long (see below), what is required is a joyful round of pivoting. There are two directions of pivoting: making data longer, and making data wider. 4.3.1.1 Making too wide data longer with pivot_longer Consider the previous example of messy data again: exam_results_visual &lt;- tribble( ~exam, ~&quot;Rozz&quot;, ~&quot;Andrew&quot;, ~&quot;Siouxsie&quot;, &quot;midterm&quot;, &quot;1.3&quot;, &quot;2.0&quot;, &quot;1.7&quot;, &quot;final&quot; , &quot;2.3&quot;, &quot;1.7&quot;, &quot;1.0&quot; ) exam_results_visual ## # A tibble: 2 x 4 ## exam Rozz Andrew Siouxsie ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 midterm 1.3 2.0 1.7 ## 2 final 2.3 1.7 1.0 This data is “too wide”. We can make it longer with the function pivot_longer from the tidyr package. Check out the example below before we plunge into a description of pivot_longer. exam_results_visual %&gt;% pivot_longer( # pivot every column except the first # (a negative number here means &quot;exclude column with that index number&quot;) cols = - 1, # name of new column which contains the # names of the columns to be &quot;gathered&quot; names_to = &quot;student&quot;, # name of new column which contains the values # of the cells which now form a new column values_to = &quot;grade&quot; ) %&gt;% # optional reordering of columns (to make # the output exactly like `exam_results_tidy`) select(student, exam, grade) ## # A tibble: 6 x 3 ## student exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Rozz midterm 1.3 ## 2 Andrew midterm 2.0 ## 3 Siouxsie midterm 1.7 ## 4 Rozz final 2.3 ## 5 Andrew final 1.7 ## 6 Siouxsie final 1.0 What pivot_longer does, in general, is take a bunch of columns and gather the values of all cells in these columns into a single, new column, the so-called value column, i.e., the column with the values of the cells to be gathered. If pivot_longer stopped here, we would lose information about which cell values belonged to which original column. Therefore, pivot_longer also creates a second new column, the so-called name column, i.e., the column with the names of the original columns that we gathered together. Consequently, in order to do its job, pivot_longer minimally needs three pieces of information:18 which columns to spin around (function argument cols) the name of the to-be-created new value column (function argument values_to) the name of the to-be-created new name column (function argument names_to) For different ways of selecting columns to pivot around, see Section 4.3.3 below. 4.3.1.2 Making too long data wider with pivot_wider Consider the following example of data which is untidy because it is too long: mixed_results_too_long &lt;- tibble(student = rep(c(&#39;Rozz&#39;, &#39;Andrew&#39;, &#39;Siouxsie&#39;), times = 2), what = rep(c(&#39;grade&#39;, &#39;participation&#39;), each = 3), howmuch = c(2.7, 2.0, 1.0, 75, 93, 33)) mixed_results_too_long ## # A tibble: 6 x 3 ## student what howmuch ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Rozz grade 2.7 ## 2 Andrew grade 2 ## 3 Siouxsie grade 1 ## 4 Rozz participation 75 ## 5 Andrew participation 93 ## 6 Siouxsie participation 33 This data is untidy because it lumps two types of different measurements (a course grade, and the percentage of participation) in a single column. These are different variables, and so should be represented in different columns. To fix a data representation that is too long, we can make it wider with the help of the pivot_wider function from the tidyr package. We look at an example before looking at the general behavior of the pivot_wider function. mixed_results_too_long %&gt;% pivot_wider( # column containing the names of the new columns names_from = what, # column containing the values of the new columns values_from = howmuch ) ## # A tibble: 3 x 3 ## student grade participation ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rozz 2.7 75 ## 2 Andrew 2 93 ## 3 Siouxsie 1 33 In general, pivot_wider picks out two columns, one column of values to distribute into new to-be-created columns, and one vector of names or groups which contains the information about the, well, names of the to-be-created new columns. There are more refined options for pivot_wider, some of which we will encounter in the context of concrete cases of application. 4.3.2 Subsetting rows &amp; columns If a data set contains too much information for your current purposes, you can discard irrelevant (or unhelpful) rows and columns. The function filter takes a Boolean expression and returns only those rows of which the Boolean expression is true: exam_results_tidy %&gt;% # keep only entries with grades better than # or equal to 1.7 filter(grade &lt;= 1.7) ## # A tibble: 4 x 3 ## student exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Rozz midterm 1.3 ## 2 Siouxsie midterm 1.7 ## 3 Andrew final 1.7 ## 4 Siouxsie final 1 To select rows by an index or a vector of indeces, use the slice function: exam_results_tidy %&gt;% # keep only entries from rows with an even index slice(c(2, 4, 6)) ## # A tibble: 3 x 3 ## student exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Andrew midterm 2 ## 2 Rozz final 2.3 ## 3 Siouxsie final 1 The function select allows to pick out a subset of columns. Interestingly, it can also be used to reorder columns, because the order in which column names are specified matches the order in the returned tibble. exam_results_tidy %&gt;% # select columns `grade` and `exam` select(grade, exam) ## # A tibble: 6 x 2 ## grade exam ## &lt;dbl&gt; &lt;chr&gt; ## 1 1.3 midterm ## 2 2 midterm ## 3 1.7 midterm ## 4 2.3 final ## 5 1.7 final ## 6 1 final 4.3.3 Tidy selection of column names To select the columns in several functions within the tidyverse, such as pivot_longer or select, there are useful helper functions from the tidyselect package. Here are some examples:19 # bogus code for illustration of possibilities! SOME_DATA %&gt;% select( ... # could be one of the following # all columns indexed 2, 3, ..., 10 2:10 # all columns except the one called &quot;COLNAME&quot; - COLNAME # all columns with names starting with &quot;STRING&quot; starts_with(&quot;STRING&quot;) # all columns with names ending with &quot;STRING&quot; ends_with(&quot;STRING&quot;) # all columns with names containing &quot;STRING&quot; contains(&quot;STRING&quot;) # all columns with names of the form &quot;Col_i&quot; with i = 1, ..., 10 num_range(&quot;Col_&quot;, 1:10) ) 4.3.4 Adding, changing and renaming columns To add a new column, or to change an existing one use the function mutate, like so: exam_results_tidy %&gt;% mutate( # add a new column called &#39;passed&#39; depending on grade # [NB: severe passing conditions in this class!!] passed = grade &lt;= 1.7, # change an existing column; here: change # character column &#39;exam&#39; to ordered factor exam = factor(exam, ordered = T) ) ## # A tibble: 6 x 4 ## student exam grade passed ## &lt;chr&gt; &lt;ord&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 Rozz midterm 1.3 TRUE ## 2 Andrew midterm 2 FALSE ## 3 Siouxsie midterm 1.7 TRUE ## 4 Rozz final 2.3 FALSE ## 5 Andrew final 1.7 TRUE ## 6 Siouxsie final 1 TRUE If you want to rename a column, function rename is what you want: exam_results_tidy %&gt;% # rename existing column &quot;student&quot; to new name &quot;participant&quot; # [NB: rename takes the new name first] rename(participant = student) ## # A tibble: 6 x 3 ## participant exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Rozz midterm 1.3 ## 2 Andrew midterm 2 ## 3 Siouxsie midterm 1.7 ## 4 Rozz final 2.3 ## 5 Andrew final 1.7 ## 6 Siouxsie final 1 4.3.5 Splitting and uniting columns Here is data from course homework: homework_results_untidy &lt;- tribble( ~student, ~results, &quot;Rozz&quot;, &quot;1.0,2.3,3.0&quot;, &quot;Andrew&quot;, &quot;2.3,2.7,1.3&quot;, &quot;Siouxsie&quot;, &quot;1.7,4.0,1.0&quot; ) This is not a useful representation format. Results of three homework sets are mushed together in a single column. Each value is separated by a comma, but it is all stored as a character vector. To disentangle information in a single column, use the separate function: homework_results_untidy %&gt;% separate( # which column to split up col = results, # names of the new column to store results into = str_c(&quot;HW_&quot;, 1:3), # separate by which character / reg-exp sep = &quot;,&quot;, # automatically (smart-)convert the type of the new cols convert = T ) ## # A tibble: 3 x 4 ## student HW_1 HW_2 HW_3 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rozz 1 2.3 3 ## 2 Andrew 2.3 2.7 1.3 ## 3 Siouxsie 1.7 4 1 If you have a reason to perform the reverse operation, i.e., join together several columns, use the unite function. 4.3.6 Sorting a data set If you want to indicate a fixed order of the reoccurring elements in a (character) vector, e.g., for plotting in a particular order, you should make this column an ordered factor. But if you want to order a data set along a column, e.g., for inspection or printing as a table, then you can do that by using the arrange function. You can specify several columns to sort alpha-numerically in ascending order, and also indicate a descending order using the desc function: exam_results_tidy %&gt;% arrange(desc(student), grade) ## # A tibble: 6 x 3 ## student exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Siouxsie final 1 ## 2 Siouxsie midterm 1.7 ## 3 Rozz midterm 1.3 ## 4 Rozz final 2.3 ## 5 Andrew final 1.7 ## 6 Andrew midterm 2 4.3.7 Combining tibbles There are frequent occasions on which data from two separate variables need to be combined. The simplest case is where two entirely disjoint data sets merely need to be glued together, either horizontally (binding columns together with function cbind) or vertically (binding rows together with function rbind). new_exam_results_tidy &lt;- tribble( ~student, ~exam, ~grade, &quot;Rozz&quot;, &quot;bonus&quot;, 1.7, &quot;Andrew&quot;, &quot;bonus&quot;, 2.3, &quot;Siouxsie&quot;, &quot;bonus&quot;, 1.0 ) rbind( exam_results_tidy, new_exam_results_tidy ) ## # A tibble: 9 x 3 ## student exam grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Rozz midterm 1.3 ## 2 Andrew midterm 2 ## 3 Siouxsie midterm 1.7 ## 4 Rozz final 2.3 ## 5 Andrew final 1.7 ## 6 Siouxsie final 1 ## 7 Rozz bonus 1.7 ## 8 Andrew bonus 2.3 ## 9 Siouxsie bonus 1 If two data sets have information in common, and the combination should respect that commonality, the join family of functions is of great help. Consider the case of distributed information again that we looked at to understand the third constraint of the concept of “tidy data”. There are two tibbles, both of which contain information about the same students. They share the column student (this does not necessarily have to be in the same order!) and we might want to join the information from both sources into a single (messy but almost tidy) representation, using full_join. We have seen an example already, which is repeated here: # same as before exam_results_tidy &lt;- tribble( ~student, ~exam, ~grade, &quot;Rozz&quot;, &quot;midterm&quot;, 1.3, &quot;Andrew&quot;, &quot;midterm&quot;, 2.0, &quot;Siouxsie&quot;, &quot;midterm&quot;, 1.7, &quot;Rozz&quot;, &quot;final&quot;, 2.3, &quot;Andrew&quot;, &quot;final&quot;, 1.7, &quot;Siouxsie&quot;, &quot;final&quot;, 1.0 ) # additional table with student numbers student_numbers &lt;- tribble( ~student, ~student_number, &quot;Rozz&quot;, &quot;666&quot;, &quot;Andrew&quot;, &quot;1969&quot;, &quot;Siouxsie&quot;, &quot;3.14&quot; ) full_join(exam_results_tidy, student_numbers, by = &quot;student&quot;) ## # A tibble: 6 x 4 ## student exam grade student_number ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Rozz midterm 1.3 666 ## 2 Andrew midterm 2 1969 ## 3 Siouxsie midterm 1.7 3.14 ## 4 Rozz final 2.3 666 ## 5 Andrew final 1.7 1969 ## 6 Siouxsie final 1 3.14 If two data sets are to be joined by a column that is not exactly shared by both sets (one contains entries in this column that the other doesn’t) then a full_join will retain all information from both. If that is not what you want, check out alternative functions like right_join, semi_join etc. using the data wrangling cheat sheet. Exercise 4.2: Data Wrangling in R We are working with the same example as in the earlier exercise: data &lt;- tribble( ~subject_id, ~choices, ~reaction_times, 1, &quot;A,B,B&quot;, &quot;312 433 365&quot;, 2, &quot;B,A,B&quot;, &quot;393 491 327&quot;, 3, &quot;B,A,A&quot;, &quot;356 313 475&quot;, 4, &quot;A,B,B&quot;, &quot;292 352 378&quot; ) Take a look at the following code snippet. Explain what the individual parts (indicated by the numbers) do. What will the result look like? choice_data &lt;- data %&gt;% #1 select(subject_id, choices) %&gt;% #2 separate( col = choices, into = str_c(&quot;C_&quot;, 1:3), sep = &quot;,&quot;) %&gt;% #3 pivot_longer( cols = -1, names_to = &quot;condition&quot;, values_to = &quot;response&quot;) Solution Selecting two columns (subject_id and choices) out of the data set. In the data set, each cell in the choices column contains more than one value. To separate them, we take this column and divide the strings by the “,”. The names are then given for each line from one to three. Now we are making the data set longer, so that each condition is its own row. We are pivoting each column apart from the first. The names of the columns are combined in a column called condition and the values are put into a column called response. The result: choice_data ## # A tibble: 12 x 3 ## subject_id condition response ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 C_1 A ## 2 1 C_2 B ## 3 1 C_3 B ## 4 2 C_1 B ## 5 2 C_2 A ## 6 2 C_3 B ## 7 3 C_1 B ## 8 3 C_2 A ## 9 3 C_3 A ## 10 4 C_1 A ## 11 4 C_2 B ## 12 4 C_3 B There are alternative possibilities for specifying names of the value and name column, which allow for more dynamic construction of strings. We will not cover all of these details here, but we will use some of these alternative specifications in subsequent examples.↩ The helpers from the tidyselect package also accept regular expressions.↩ "],["Chap-02-02-data-grouping-nesting.html", "4.4 Grouped operations", " 4.4 Grouped operations A frequently occurring problem in data analysis is to obtain a summary statistic (see Chapter 5) for different subsets of data. For example, we might want to calculate the average score for each student in our class. We could do that by filtering like so (notice that pull gives you the column vector specified): # extracting mean grade for Rozz mean_grade_Rozz &lt;- exam_results_tidy %&gt;% filter(student == &quot;Rozz&quot;) %&gt;% pull(grade) %&gt;% mean mean_grade_Rozz ## [1] 1.8 But then we need to do that two more times. So, as we shouldn’t copy-paste code, we write a function and use map_dbl to add a mean for each student: get_mean_for_student &lt;- function(student_name) { exam_results_tidy %&gt;% filter(student == student_name) %&gt;% pull(grade) %&gt;% mean } map_dbl( exam_results_tidy %&gt;% pull(student) %&gt;% unique, get_mean_for_student ) ## [1] 1.80 1.85 1.35 Also not quite satisfactory, clumsy and error-prone. Enter, grouping in the tidyverse. If we want to apply a particular operation to all combinations of levels of different variables (no matter whether they are encoded as factors or not when we group), we can do this with the function group_by, followed by either a call to mutate or summarise. Check this example: exam_results_tidy %&gt;% group_by(student) %&gt;% summarise( student_mean = mean(grade) ) ## # A tibble: 3 x 2 ## student student_mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 Andrew 1.85 ## 2 Rozz 1.8 ## 3 Siouxsie 1.35 The function summarise returns a single row for each combination of levels of grouping variables. If we use the function mutate instead, the summary statistic is added (repeatedly) in each of the original rows: exam_results_tidy %&gt;% group_by(student) %&gt;% mutate( student_mean = mean(grade) ) ## # A tibble: 6 x 4 ## # Groups: student [3] ## student exam grade student_mean ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rozz midterm 1.3 1.8 ## 2 Andrew midterm 2 1.85 ## 3 Siouxsie midterm 1.7 1.35 ## 4 Rozz final 2.3 1.8 ## 5 Andrew final 1.7 1.85 ## 6 Siouxsie final 1 1.35 The latter can sometimes be handy, for example when overlaying a plot of the data with grouped means, for instance. It may be important to remember that after a call of group_by, the resulting tibbles retains the grouping information for all subsequent operations. To remove grouping information, use the function ungroup. "],["Chap-02-02-data-case-study-KoF.html", "4.5 Case study: the King of France", " 4.5 Case study: the King of France Let’s go through one case study of data preprocessing and cleaning. We look at the example introduced and fully worked out in Appendix D.3. (Please read Section D.3.1 to find out more about where this data set is coming from.) The raw data set is part of the aida package and can be loaded using: data_KoF_raw &lt;- aida::data_KoF_raw We then take a glimpse at the data: glimpse(data_KoF_raw ) ## Rows: 2,813 ## Columns: 16 ## $ submission_id &lt;dbl&gt; 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,… ## $ RT &lt;dbl&gt; 8110, 35557, 3647, 16037, 11816, 6024, 4986, 13019, 53… ## $ age &lt;dbl&gt; 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57… ## $ comments &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ item_version &lt;chr&gt; &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;… ## $ correct_answer &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FA… ## $ education &lt;chr&gt; &quot;Graduated College&quot;, &quot;Graduated College&quot;, &quot;Graduated C… ## $ gender &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;fem… ## $ languages &lt;chr&gt; &quot;English&quot;, &quot;English&quot;, &quot;English&quot;, &quot;English&quot;, &quot;English&quot;,… ## $ question &lt;chr&gt; &quot;World War II was a global war that lasted from 1914 t… ## $ response &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FA… ## $ timeSpent &lt;dbl&gt; 39.48995, 39.48995, 39.48995, 39.48995, 39.48995, 39.4… ## $ trial_name &lt;chr&gt; &quot;practice_trials&quot;, &quot;practice_trials&quot;, &quot;practice_trials… ## $ trial_number &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, … ## $ trial_type &lt;chr&gt; &quot;practice&quot;, &quot;practice&quot;, &quot;practice&quot;, &quot;practice&quot;, &quot;pract… ## $ vignette &lt;chr&gt; &quot;undefined&quot;, &quot;undefined&quot;, &quot;undefined&quot;, &quot;undefined&quot;, &quot;u… The variables in this data set are: submission_id: unique identifier for each participant RT: the reaction time for each decision age: the (self-reported) age of the participant comments: the (optional) comments each participant may have given item_version: the condition which the test sentence belongs to (only given for trials of type main and special) correct_answer: for trials of type filler and special what the true answer should have been education: the (self-reported) education level with options Graduated College, Graduated High School, Higher Degree gender: (self-reported) gender languages: (self-reported) native languages question: the sentence to be judged true or false response: the answer (“TRUE” or “FALSE”) on each trial trial_name: whether the trial is a main or practice trials (levels main_trials and practice_trials) trial_number: consecutive numbering of each participant’s trial trial_type: whether the trial was of the category filler, main, practice or special, where the latter encodes the “background checks” vignette: the current item’s vignette number (applies only to trials of type main and special) Let’s have a brief look at the comments (sometimes helpful, usually entertaining) and the self-reported native languages: data_KoF_raw %&gt;% pull(comments) %&gt;% unique ## [1] NA ## [2] &quot;I hope I was right most of the time!&quot; ## [3] &quot;My level of education is Some Highschool, not finished. So I couldn&#39;t input what was correct, so I&#39;m leaving a comment here.&quot; ## [4] &quot;It was interesting, and made re-read questions to make sure they weren&#39;t tricks. I hope I got them all correct.&quot; ## [5] &quot;Worked well&quot; ## [6] &quot;A surprisingly tricky study! Thoroughly enjoyed completing it, despite several red herrings!!&quot; ## [7] &quot;n/a&quot; ## [8] &quot;Thank you for the opportunity.&quot; ## [9] &quot;this was challenging&quot; ## [10] &quot;I&#39;m not good at learning history so i might of made couple of mistakes. I hope I did well. :)&quot; ## [11] &quot;Interesting survey - thanks!&quot; ## [12] &quot;no&quot; ## [13] &quot;Regarding the practice question - I&#39;m aware that Alexander Bell invented the telephone, but in reality, it was a collaborative effort by a team of people&quot; ## [14] &quot;Fun study!&quot; ## [15] &quot;Fun stuff&quot; data_KoF_raw %&gt;% pull(languages) %&gt;% unique ## [1] &quot;English&quot; &quot;english&quot; &quot;English, Italian&quot; ## [4] &quot;English/ ASL&quot; &quot;English and Polish&quot; &quot;Chinese&quot; ## [7] &quot;English, Mandarin&quot; &quot;Polish&quot; &quot;Turkish&quot; ## [10] NA &quot;English, Sarcasm&quot; &quot;English, Portuguese&quot; We might wish to exclude people who do not include “English” as one of their native languages in some studies. Here, we do not since we also have strong, more specific filters on comprehension (see below). Since we are not going to use this information later on, we might as well discard it now: data_KoF_raw &lt;- data_KoF_raw %&gt;% select(-languages, -comments, -age, -RT, -education, -gender) But even after pruning irrelevant columns, this data set is still not ideal. We need to preprocess it more thoroughly to make it more intuitively manageable. For example, the information in column trial_name does not give the trial’s name in an intuitive sense, but its type: whether it is a practice or a main trial. But this information, and more, is also represented in the column trial_type. The column item_version contains information about the experimental condition. To see this (mess), the code below prints the selected information from the main trials of only one participant in an order that makes it easier to see what is what. data_KoF_raw %&gt;% # ignore practice trials for the moment # focus on one participant only filter(trial_type != &quot;practice&quot;, submission_id == 192) %&gt;% select(trial_type, item_version, question) %&gt;% arrange(desc(trial_type), item_version) %&gt;% print(n = Inf) ## # A tibble: 24 x 3 ## trial_type item_version question ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 special none The Pope is currently not married. ## 2 special none Germany has volcanoes. ## 3 special none France has a king. ## 4 special none Canada is a democracy. ## 5 special none Belgium has rainforests. ## 6 main 0 The volcanoes of Germany dominate the landscape. ## 7 main 1 Canada has an emperor, and he is fond of sushi. ## 8 main 10 Donald Trump, his favorite nature spot is not the Be… ## 9 main 6 The King of France isn’t bald. ## 10 main 9 The Pope’s wife, she did not invite Angela Merkel fo… ## 11 filler none The Solar System includes the planet Earth. ## 12 filler none Vatican City is the world&#39;s largest country by land … ## 13 filler none Big Ben is a very large building in the middle of Pa… ## 14 filler none Harry Potter is a series of fantasy novels written b… ## 15 filler none Taj Mahal is a mausoleum on the bank of the river in… ## 16 filler none James Bond is a spanish dancer from Madrid. ## 17 filler none The Pacific Ocean is a large ocean between Japan and… ## 18 filler none Australia has a very large border with Brazil. ## 19 filler none Steve Jobs was an American inventor and co-founder o… ## 20 filler none Planet Earth is part of the galaxy ‘Milky Way’. ## 21 filler none Germany shares borders with France, Belgium and Denm… ## 22 filler none Antarctica is a continent covered almost completely … ## 23 filler none The Statue of Liberty is a colossal sculpture on Lib… ## 24 filler none English is the main language in Australia, Britain a… We see that the information in item_version specifies the critical condition. To make this more intuitively manageable, we would like to have a column called condition and it should, ideally, also contain useful information for the cases where trial_type is not main or special. That is why we will therefore remove the column trial_name completely, and create an informative column condition in which we learn of every row whether it belongs to one of the five experimental conditions, and if not whether it is a filler or a “background check” (= special) trial. data_KoF_processed &lt;- data_KoF_raw %&gt;% # drop redundant information in column `trial_name` select(-trial_name) %&gt;% # discard practice trials filter(trial_type != &quot;practice&quot;) %&gt;% mutate( # add a &#39;condition&#39; variable condition = case_when( trial_type == &quot;special&quot; ~ &quot;background check&quot;, trial_type == &quot;main&quot; ~ str_c(&quot;Condition &quot;, item_version), TRUE ~ &quot;filler&quot; ) %&gt;% # make the new &#39;condition&#39; variable a factor factor( ordered = T, levels = c( str_c(&quot;Condition &quot;, c(0, 1, 6, 9, 10)), &quot;background check&quot;, &quot;filler&quot; ) ) ) 4.5.1 Cleaning the data We clean the data in two consecutive steps: Remove all data from any participant who got more than 50% of the answers to the filler material wrong. Remove individual main trials if the corresponding “background check” question was answered wrongly. 4.5.1.1 Cleaning by-participant # look at error rates for filler sentences by subject # mark every subject as an outlier when they # have a proportion of correct responses of less than 0.5 subject_error_rate &lt;- data_KoF_processed %&gt;% filter(trial_type == &quot;filler&quot;) %&gt;% group_by(submission_id) %&gt;% summarise( proportion_correct = mean(correct_answer == response), outlier_subject = proportion_correct &lt; 0.5 ) %&gt;% arrange(proportion_correct) Apply the cleaning step: # add info about error rates and exclude outlier subject(s) d_cleaned &lt;- full_join(data_KoF_processed, subject_error_rate, by = &quot;submission_id&quot;) %&gt;% filter(outlier_subject == FALSE) 4.5.1.2 Cleaning by-trial # exclude every critical trial whose &#39;background&#39; test question was answered wrongly d_cleaned &lt;- d_cleaned %&gt;% # select only the &#39;background question&#39; trials filter(trial_type == &quot;special&quot;) %&gt;% # is the background question answered correctly? mutate( background_correct = correct_answer == response ) %&gt;% # select only the relevant columns select(submission_id, vignette, background_correct) %&gt;% # right join lines to original data set right_join(d_cleaned, by = c(&quot;submission_id&quot;, &quot;vignette&quot;)) %&gt;% # remove all special trials, as well as main trials with incorrect background check filter(trial_type == &quot;main&quot; &amp; background_correct == TRUE) For later reuse, both the preprocessed and the cleaned data set are included in the aida package as well. They are loaded by calling aida::data_KoF_preprocessed and aida::data_KoF_cleaned, respectively. "],["Chap-02-03-summary-statistics.html", "5 Summary statistics", " 5 Summary statistics A summary statistic is a single number that represents one aspect of a possibly much more complex chunk of data. This single number might, for example, indicate the maximum or minimum value of a vector of one billion observations. The large data set (one billion observations) is reduced to a single number which represents one aspect of that data. Summary statistics are, as a general (but violable) rule, many-to-one surjections. They compress complex information into a simpler, compressed representation. Summary statistics are useful for understanding the data at hand, for communication about a data set, but also for subsequent statistical analyses. As we will see later on, many statistical tests look at a summary statistic \\(x\\), which is a single value derived from data set \\(D\\), and compare \\(x\\) to an expectation of what \\(x\\) should be like if the process that generated \\(D\\) really had a particular property. For the moment, however, we use summary statistics only to get comfortable with data: understanding it better and gaining competence to manipulate it. Section 5.1 first uses the Bio-Logic Jazz-Metal data set to look at a very intuitive class of summary statistics for categorical data, namely counts and proportions. Section 5.2 introduces summary statistics for simple, one-dimensional vectors with numeric information. Section 5.3 looks at measures of the relation between two numerical vectors, namely covariance and correlation. These last two sections use the avocado data set. The learning goals for this chapter are: become able to compute counts and frequencies for categorical data understand and be able to compute summary statistics for one-dimensional metric data: measures of central tendency mean, mode, median measures of dispersion variance, standard deviation, quantiles non-parametric estimates of confidence bootstrapped CI of the mean understand and be able to compute for two-dimensional metric data: covariance Bravais-Pearson correlation "],["Chap-02-03-summary-statistics-counts.html", "5.1 Counts and proportions", " 5.1 Counts and proportions Very familiar instances of summary statistics are counts and frequencies. While there is no conceptual difficulty in understanding these numerical measures, we have yet to see how to obtain counts for categorical data in R. The Bio-Logic Jazz-Metal data set provides nice material for doing so. If you are unfamiliar with the data and the experiment that generated it, please have a look at Appendix Chapter D.4. 5.1.1 Loading and inspecting the data We load the preprocessed data immediately (see Appendix D.4 for details on how this preprocessing was performed). data_BLJM_processed &lt;- aida::data_BLJM The preprocessed data lists, for each participant (in column submission_id) the binary choice (in column response) in a particular condition (in column condition). head(data_BLJM_processed) ## # A tibble: 6 x 3 ## submission_id condition response ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 379 BM Beach ## 2 379 LB Logic ## 3 379 JM Metal ## 4 378 JM Metal ## 5 378 LB Logic ## 6 378 BM Beach 5.1.2 Obtaining counts with n, count and tally To obtain counts, the dplyr package offers the functions n, count and tally, among others.20 The function n does not take arguments and is useful for counting rows. It works inside of summarise and mutate and is usually applied to grouped data sets. For example, we can get a count of how many observations the data in data_BLJM_processed contains for each condition by first grouping by variable condition and then calling n (without arguments) inside of summarise: data_BLJM_processed %&gt;% group_by(condition) %&gt;% summarise(nr_observation_per_condition = n()) %&gt;% ungroup() ## # A tibble: 3 x 2 ## condition nr_observation_per_condition ## &lt;chr&gt; &lt;int&gt; ## 1 BM 102 ## 2 JM 102 ## 3 LB 102 Notice that calling n without grouping just gives you the number of rows in the data set: data_BLJM_processed %&gt;% summarize(n_rows = n()) ## # A tibble: 1 x 1 ## n_rows ## &lt;int&gt; ## 1 306 This can also be obtained simply by (although in a different output format!): nrow(data_BLJM_processed) ## [1] 306 Counting can be helpful also when getting acquainted with a data set, or when checking whether the data is complete. For example, we can verify that every participant in the experiment contributed three data points like so: data_BLJM_processed %&gt;% group_by(submission_id) %&gt;% summarise(nr_data_points = n()) ## # A tibble: 102 x 2 ## submission_id nr_data_points ## &lt;dbl&gt; &lt;int&gt; ## 1 278 3 ## 2 279 3 ## 3 280 3 ## 4 281 3 ## 5 282 3 ## 6 283 3 ## 7 284 3 ## 8 285 3 ## 9 286 3 ## 10 287 3 ## # … with 92 more rows The functions tally and count are essentially just convenience wrappers around n. While tally expects that the data is already grouped in the relevant way, count takes a column specification as an argument and does the grouping (and final ungrouping) implicitly. For instance, the following code blocks produce the same output, one using n, the other using count, namely the total number of times a particular response has been given in a particular condition: data_BLJM_processed %&gt;% group_by(condition, response) %&gt;% summarise(n = n()) ## # A tibble: 6 x 3 ## # Groups: condition [3] ## condition response n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 BM Beach 44 ## 2 BM Mountains 58 ## 3 JM Jazz 64 ## 4 JM Metal 38 ## 5 LB Biology 58 ## 6 LB Logic 44 data_BLJM_processed %&gt;% # use function `count` from `dplyr` package dplyr::count(condition, response) ## # A tibble: 6 x 3 ## condition response n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 BM Beach 44 ## 2 BM Mountains 58 ## 3 JM Jazz 64 ## 4 JM Metal 38 ## 5 LB Biology 58 ## 6 LB Logic 44 So, these counts suggest that there is an overall preference for mountains over beaches, Jazz over Metal and Biology over Logic. Who would have known!? These counts are overall numbers. They do not tell us anything about any potentially interesting relationship between preferences. So, let’s have a closer look at the number of people who selected which music-subject pair. We collect these counts in variable BLJM_associated_counts. We first need to pivot the data, using pivot_wider, to make sure each participant’s choices are associated with each other, and then take the counts of interest: BLJM_associated_counts &lt;- data_BLJM_processed %&gt;% pivot_wider(names_from = condition, values_from = response) %&gt;% # drop the Beach vs. Mountain condition select(-BM) %&gt;% dplyr::count(JM, LB) BLJM_associated_counts ## # A tibble: 4 x 3 ## JM LB n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Jazz Biology 38 ## 2 Jazz Logic 26 ## 3 Metal Biology 20 ## 4 Metal Logic 18 We can also produce a table of proportions from this, simply by dividing the column called n by the total number of observations using sum(n). We can also flip the table around into a more convenient (though messy) representation: BLJM_associated_counts %&gt;% # look at relative frequency, not total counts mutate(n = n / sum(n)) %&gt;% pivot_wider(names_from = LB, values_from = n) ## # A tibble: 2 x 3 ## JM Biology Logic ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Jazz 0.373 0.255 ## 2 Metal 0.196 0.176 Eye-balling this table of relative frequencies, we might indeed hypothesize that preference for musical style is not independent of preference for an academic subject. The impression is corroborated by looking at the plot in Figure 5.1. More on this later! Figure 5.1: Proportions of jointly choosing a musical style and an academic subfield in the Bio-Logic Jazz-Metal data set. Useful base R functions for obtaining counts are table and prop.table.↩ "],["Chap-02-03-summary-statistics-1D.html", "5.2 Central tendency and dispersion", " 5.2 Central tendency and dispersion This section will look at two types of summary statistics: measures of central tendency and measures of dispersion. Measures of central tendency map a vector of observations onto a single number that represents, roughly put, “the center”. Since what counts as a “center” is ambiguous, there are several measures of central tendencies. Different measures of central tendencies can be more or less adequate for one purpose or another. The type of variable (nominal, ordinal or metric, for instance) will also influence the choice of measure. We will visit three prominent measures of central tendency here: (arithmetic) mean, median and mode. Measures of dispersion indicate how much the observations are spread out around, let’s say, “a center”. We will visit three prominent measures of dispersion: the variance, the standard deviation and quantiles. To illustrate these ideas, consider the case of a numeric vector of observations. Central tendency and dispersion together describe a (numeric) vector by giving indicative information about the point around which the observations spread, and how far away from that middle point they tend to lie. Fictitious examples of observation vectors with higher or lower central tendency and higher or lower dispersion are given in Figure 5.2. Figure 5.2: Fictitious data points with higher/lower central tendencies and higher/lower dispersion. NB: The points are ‘jittered’ along the vertical dimension for better visibility; only the horizontal dimension is relevant here. 5.2.1 The data for the remainder of the chapter In the remainder of this chapter, we will use the avocado data set, a very simple and theory-free example in which we can explore two metric variables: the average price at which avocados were sold during specific intervals of time and the total amount of avocados sold. We load the (pre-processed) data into a variable named avocado_data (see Appendix D.5 for more information on this data set): avocado_data &lt;- aida::data_avocado We can then take a glimpse: glimpse(avocado_data) ## Rows: 18,249 ## Columns: 7 ## $ Date &lt;date&gt; 2015-12-27, 2015-12-20, 2015-12-13, 2015-12-06, 20… ## $ average_price &lt;dbl&gt; 1.33, 1.35, 0.93, 1.08, 1.28, 1.26, 0.99, 0.98, 1.0… ## $ total_volume_sold &lt;dbl&gt; 64236.62, 54876.98, 118220.22, 78992.15, 51039.60, … ## $ small &lt;dbl&gt; 1036.74, 674.28, 794.70, 1132.00, 941.48, 1184.27, … ## $ medium &lt;dbl&gt; 54454.85, 44638.81, 109149.67, 71976.41, 43838.39, … ## $ large &lt;dbl&gt; 48.16, 58.33, 130.50, 72.58, 75.78, 43.61, 93.26, 8… ## $ type &lt;chr&gt; &quot;conventional&quot;, &quot;conventional&quot;, &quot;conventional&quot;, &quot;co… The columns that will interest us the most in this chapter are: average_price - average price of a single avocado total_volume_sold - total number of avocados sold type - whether the price/amount is for a conventional or an organic avocado In particular, we will look at summary statistics for average_price and total_volume_sold, either for the whole data set or independently for each type of avocado. Notice that both of these variables are numeric. They are vectors of numbers, each representing an observation. 5.2.2 Measures of central tendency 5.2.2.1 The (arithmetic) mean If \\(\\vec{x} = \\langle x_1, \\dots , x_n \\rangle\\) is a vector of \\(n\\) observations with \\(x_i \\in \\mathbb{R}\\) for all \\(1 \\le i \\le n\\), the (arithmetic) mean of \\(x\\), written \\(\\mu_{\\vec{x}}\\), is defined as \\[\\mu_{\\vec{x}} = \\frac{1}{n}\\sum_{i=1}^n x_i\\,.\\] The arithmetic mean can be understood intuitively as the center of gravity. If we place a marble on a wooden board for every \\(x_i\\), such that every marble is equally heavy and the differences between all data measurements are identical to the distances between the marbles, the arithmetic mean is where you can balance the board with the tip of your finger. Example. The mean of the vector \\(\\vec{x} = \\langle 0, 3, 6, 7\\rangle\\) is \\(\\mu_{\\vec{x}} = \\frac{0 + 3 + 6 + 7}{4} = \\frac{16}{4} = 4\\,.\\) The black dots in the graph below show the data observations, and the red cross indicates the mean. Notice that the mean is clearly not the mid-point between the maximum and the minimum (which here would be 3.5). To calculate the mean of a large vector, R has a built-in function mean, which we have in fact used frequently before. Let’s use it to calculate the mean of the variable average_price for different types of avocados: avocado_data %&gt;% group_by(type) %&gt;% summarise( mean_price = mean(average_price) ) ## # A tibble: 2 x 2 ## type mean_price ## &lt;chr&gt; &lt;dbl&gt; ## 1 conventional 1.16 ## 2 organic 1.65 Unsurprisingly, the overall mean of the observed prices is (numerically) higher for organic avocados than for conventional ones. Excursion. It is also possible to conceptualize the arithmetic mean as the expected value when sampling from the observed data. This is useful for linking the mean of a data sample to the expected value of a random variable, a concept we will introduce in Chapter 7. Suppose you have gathered the data \\(\\vec{x} = \\langle 0, 3, 6, 7\\rangle\\). What is the expected value that you think you will obtain if you sample from this data vector once? – Wait! What does that even mean? Expected value? Sampling once? Suppose that some joker from around town invites you for a game. The game goes like this: The joker puts a ball in an urn, one for each data observation. The joker writes the observed value on the ball corresponding to that value. You pay the joker a certain amount of money to be allowed to draw one ball from the urn. The balls are indistinguishable and the process of drawing is entirely fair. You receive the number corresponding to the ball you drew paid out in silver coins. (For simplicity, we assume that all numbers are non-negative, but that is not crucial. If a negative number is drawn, you just have to pay the joker that amount.) How many silver coins would you maximally pay to play one round? Well, of course, no more than four (unless you value gaming on top of silver)! This is because 4 is the expected value of drawing once. This, in turn, is because every ball has a chance of 0.25 of being drawn. So you can expect to earn 0 silver with a 25% chance, 3 with a 25% chance, 6 with a 25% chance and 7 with a 25% chance. In this sense, the mean is the expected value of sampling once from the observed data. 5.2.2.2 The median If \\(\\vec{x} = \\langle x_1, \\dots , x_n \\rangle\\) is a vector of \\(n\\) data observations from an at least ordinal measure and if \\(\\vec{x}\\) is ordered such that for all \\(1 \\le i &lt; n\\) we have \\(x_i \\le x_{i+1}\\), the median is the value \\(x_i\\) such that the number of data observations that are bigger or equal to \\(x_i\\) and the number of data observations that are smaller or equal to \\(x_i\\) are equal. Notice that this definition may yield no unique median. In that case, different alternative strategies are used, depending on the data type at hand (ordinal or metric). (See also the example below.) The median corresponds to the 50% quartile, a concept introduced below. Example. The median of the vector \\(\\vec{x} = \\langle 0, 3, 6, 7 \\rangle\\) does not exist by the definition given above. However, for metric measures, where distances between measurements are meaningful, it is customary to take the two values “closest to where the median should be” and average them. In the example at hand, this would be \\(\\frac{3 + 6}{2} = 4.5\\). The plot below shows the data points in black, the mean as a red cross (as before) and the median as a blue circle. The function median from base R computes the median of a vector. It also takes an ordered factor as an argument. median(c(0, 3, 6, 7 )) ## [1] 4.5 To please the avocados, let’s also calculate the median price of both types of avocados and compare these to the means we calculated earlier already: avocado_data %&gt;% group_by(type) %&gt;% summarise( mean_price = mean(average_price), median_price = median(average_price) ) ## # A tibble: 2 x 3 ## type mean_price median_price ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 conventional 1.16 1.13 ## 2 organic 1.65 1.63 5.2.2.3 The mode The mode is the unique value that occurred most frequently in the data. If there is no unique value with that property, there is no mode. While the mean is only applicable to metric variables, and the median only to variables that are at least ordinal, the mode is only reasonable for variables that have a finite set of different possible observations (nominal or ordinal). There is no built-in function in R to return the mode of a (suitable) vector, but it is easily retrieved by obtaining counts. Exercise 5.1: Mean, median, mode Compute the mean, median and mode of data vector \\(\\vec{x} = \\langle1,2,4,10\\rangle\\). Solution Mean: \\(\\frac{1+2+4+10}{4}=\\frac{17}{4}=4.25\\) Median: \\(\\frac{2+4}{2}=3\\) Mode: all values are equally frequent, so there is no (unique) mode. Now add two numbers to the vector such that the median stays the same, but mode and mean change. Solution Numbers to add: \\(1, 10 \\to \\vec{x} = \\langle1,1,2,4,10,10\\rangle\\) New mean: \\(\\frac{1+1+2+4+10+10}{6}=\\frac{28}{6}\\approx4.67\\) New mode: Both \\(1\\) and \\(10\\) are equally frequent and more frequent than all other numbers. Consequently, there is no (unique) mode. Decide for the following statements whether they are true or false: The mean is a measure of central tendency, which can be quite sensitive to even single outliers in the data. If \\(\\vec{x}\\) is a vector of binary Boolean outcomes, we can retrieve the proportion of occurrences of TRUE in \\(\\vec{x}\\) by the R function mean(x). Solution Both statements are correct. 5.2.3 Measures of dispersion Measures of dispersion indicate how much the observed data is spread out around a measure of central tendency. Intuitively put, they provide a measure for how diverse, variable, clustered, concentrated or smeared out the data observations are. In the following, we will cover three common notions: variance, standard deviation and quantiles. 5.2.3.1 Variance The variance is a common and very useful measure of dispersion for metric data. The variance \\(\\text{Var}(\\vec{x})\\) of a vector of metric observations \\(\\vec{x}\\) of length \\(n\\) is defined as the average of the squared distances from the mean: \\[\\text{Var}(\\vec{x}) = \\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu_{\\vec{x}})^2\\] Example. The variance of the vector \\(\\vec{x} = \\langle 0, 3, 6, 7 \\rangle\\) is computed as: \\[\\text{Var}(\\vec{x}) = \\frac{1}{4} \\ \\left ( (0-4)^2 + (3-4)^2 + (6-4)^2 + (7-4)^2 \\right ) = \\] \\[ \\frac{1}{4} \\ (16 + 1 + 4 + 9) = \\frac{30}{4} = 7.5\\] Figure 5.3 shows a geometric interpretation of the variance for the running example of vector \\(\\vec{x} = \\langle 0, 3, 6, 7 \\rangle\\). Figure 5.3: Geometrical interpretation of variance. Four data points (orange dots) and their mean (red cross) are shown, together with the squares whose sides are the differences between the observed data points and the mean. The numbers in white give the area of each square, which is also indicated by the coloring of each rectangle. We can calculate the variance in R explicitly: x &lt;- c(0, 3, 6, 7) sum((x - mean(x))^2) / length(x) ## [1] 7.5 There is also a built-in function var from base R. Using this we get a different result though: x &lt;- c(0, 3, 6, 7) var(x) ## [1] 10 This is because var computes the variance by a slightly different formula to obtain an unbiased estimator of the variance for the case that the mean is not known but also estimated from the data. The formula for the unbiased estimator that R uses, simply replaces the \\(n\\) in the denominator by \\(n-1\\):21 \\[\\text{Var}(\\vec{x}) = \\frac{1}{n-1} \\sum_{i=1}^n (x_i - \\mu_{\\vec{x}})^2\\] 5.2.3.2 Standard deviation The standard deviation \\(\\text{SD}(\\vec{x})\\) of numeric vector \\(\\vec{x}\\) is just the square root of the variance: \\[ \\text{SD}(\\vec{x}) = \\sqrt{\\text{Var}(\\vec{x})} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu_{\\vec{x}})^2}\\] Let’s calculate the (unbiased) variance and standard deviation for the average_price of different types of avocados: avocado_data %&gt;% group_by(type) %&gt;% summarize( variance_price = var(average_price), stddev_price = sd(average_price), ) ## # A tibble: 2 x 3 ## type variance_price stddev_price ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 conventional 0.0692 0.263 ## 2 organic 0.132 0.364 5.2.3.3 Quantiles For a vector \\(\\vec{x}\\) of at least ordinal measures, we can generalize the concept of a median to an arbitrary quantile. A \\(k\\)% quantile is the element \\(x_i\\) in \\(\\vec{x}\\), such that \\(k\\)% of the data in \\(\\vec{x}\\) lies below \\(x_i\\). If this definition does not yield a unique element for some \\(k\\)% threshold, similar methods to what we saw for the median are applied. We can use the base R function quantile to obtain the 10%, 25%, 50% and 85% quantiles (just arbitrary picks) for the average_price in the avocado data set: quantile( # vector of observations x = avocado_data$average_price, # which quantiles probs = c(0.1, 0.25, 0.5, 0.85) ) ## 10% 25% 50% 85% ## 0.93 1.10 1.37 1.83 This tells us, for instance, that only about ten percent of the data observations had prices lower than $0.93. Exercise 5.2: Variance, standard deviation, quantiles Compute the unbiased variance and standard deviation of data vector \\(\\vec{y} = \\langle4,2,6,8\\rangle\\). Solution \\[ \\begin{align} \\mu_{\\vec{y}} &amp;= \\frac{4+2+6+8}{4}=5 \\\\ Var(\\vec{y}) &amp;= \\frac{1}{n-1}\\sum_{i = 1}^n (y_i-\\mu_{\\vec{y}})^2 \\\\ &amp;= \\frac{1}{4-1}((4-5)^2+(2-5)^2+(6-5)^2+(8-5)^2) \\\\ &amp;= \\frac{1}{3}(1+9+1+9) = \\frac{20}{3} \\approx 6.67 \\\\ SD(\\vec{y}) &amp;= \\sqrt{Var(\\vec{y})} = \\sqrt{6.67} \\approx 2.58 \\end{align} \\] Decide for the following statements whether they are true or false: The median is the 50% quantile. A 10% quantile of 0.2 indicates that 10% of the data observations are above 0.2. The 85% quantile of a vector with unequal numbers always has a larger value than the 25% quantile. Solution Statements a. and c. are correct. 5.2.4 Excursion: Quantifying confidence with bootstrapping Bootstrapping is an elegant way to obtain measures of confidence for summary statistics. These measures of confidence can be used for parameter inference, too. We will discuss parameter inference at length in Chapter 9. In this course, we will not use bootstrapping as an alternative approach to parameter inference. We will, however, follow a common practice (at least in some areas of Cognitive Psychology) to use bootstrapped 95% confidence intervals of the mean as part of descriptive statistics, i.e., in summaries and plots of the data. The bootstrap is a method from a more general class of algorithms, namely so-called resampling methods. The general idea is, roughly put, that we treat the data at hand as the true representation of reality. We then imagine that we run an experiment on that (restricted, hypothetical) reality. We then ask ourselves: What would we estimate (e.g., as a mean) in any such hypothetical experiment? The more these hypothetical measures derived from hypothetical experiments based on a hypothetical reality differ, the less confident we are in the estimate. Sounds weird, but it’s mind-blowingly elegant. An algorithm for constructing a 95% confidence interval of the mean of vector \\(D\\) of numeric data with length \\(k\\) looks as follows: take \\(k\\) samples from \\(D\\) with replacement, call this \\(D^{\\textrm{rep}}\\)22 calculate the mean \\(\\mu(D^{\\textrm{rep}})\\) of the newly sampled data repeat steps 1 and 2 to gather \\(r\\) means of different resamples of \\(D\\); call the result vector \\(\\mu_{\\textrm{sampled}}\\) the boundaries of the 95% inner quantile of \\(\\mu_{\\textrm{sampled}}\\) are the bootstrapped 95% confidence interval of the mean The higher \\(r\\), i.e., the more samples we take, the better the estimate. The higher \\(k\\), i.e., the more observations we have to begin with, the less variable the means \\(\\mu(D^{\\textrm{rep}})\\) of the resampled data will usually be. Hence, usually, the higher \\(k\\), the smaller the bootstrapped 95% confidence interval of the mean. Here is a convenience function that we will use throughout the book to produce bootstrapped 95% confidence intervals of the mean (the functions is also supplied directly as part of the aida package): ## takes a vector of numbers and returns bootstrapped 95% ConfInt ## of the mean, based on `n_resamples` re-samples (default: 1000) bootstrapped_CI &lt;- function(data_vector, n_resamples = 1000) { resampled_means &lt;- map_dbl(seq(n_resamples), function(i) { mean(sample(x = data_vector, size = length(data_vector), replace = T) ) } ) tibble( &#39;lower&#39; = quantile(resampled_means, 0.025), &#39;mean&#39; = mean(data_vector), &#39;upper&#39; = quantile(resampled_means, 0.975) ) } Applying this method to the vector of average avocado prices, we get: bootstrapped_CI(avocado_data$average_price) ## # A tibble: 1 x 3 ## lower mean upper ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.40 1.41 1.41 Notice that, since average_price has length 18249, i.e., we have \\(k = 18249\\) observations in the data, the bootstrapped 95% confidence interval is rather narrow. Compare this against a case of \\(k = 300\\), obtained by only looking at the first 300 entries in average_price: # first 300 observations of `average price` only smaller_data &lt;- avocado_data$average_price[1:300] bootstrapped_CI(smaller_data) ## # A tibble: 1 x 3 ## lower mean upper ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.14 1.16 1.17 The mean is different (because we are looking at earlier time points) but, importantly, the interval is larger because with only 300 observations, we have less confidence in the estimate. Exercise 5.3: Bootstrapped Confidence Intervals Explain in your own words how the bootstrapping-algorithm works for obtaining 95% confidence intervals of the mean (2-3 sentences). Solution To get the 95% CI of the mean, we repeatedly take samples from a data vector (with replacement) and calculate the mean of each sample. After taking \\(k\\) samples and calculating each mean \\(\\mu\\), we get a vector of means \\(\\mu_{sampled}\\). The 95% CI ranges between the boundaries of the 95% inner quantile of \\(\\mu_{sampled}\\). Decide for the following statements whether they are true or false: The more samples we take from our data, the larger the 95% confidence interval gets. A larger 95% confidence interval of the mean indicates higher uncertainty regarding the mean. The 95% confidence interval of the mean contains 95% of the values of \\(\\mu_{sampled}\\). Solution Statements b. and c. are correct. 5.2.4.1 Summary functions with multiple outputs, using nested tibbles To obtain summary statistics for different groups of a variable, we can use the function bootstrapped_CI conveniently in concert with nested tibbles, as demonstrated here: avocado_data %&gt;% group_by(type) %&gt;% # nest all columns except grouping-column &#39;type&#39; in a tibble # the name of the new column is &#39;price_tibbles&#39; nest(.key = &quot;price_tibbles&quot;) %&gt;% # collect the summary statistics for each nested tibble # the outcome is a new column with nested tibbles summarise( CIs = map(price_tibbles, function(d) bootstrapped_CI(d$average_price)) ) %&gt;% # unnest the newly created nested tibble unnest(CIs) ## # A tibble: 2 x 4 ## type lower mean upper ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 conventional 1.15 1.16 1.16 ## 2 organic 1.65 1.65 1.66 Using nesting in this case is helpful because we only want to run the bootstrap function once, but we need both of the numbers it returns. The following explains nesting based on this example. To understand what is going on with nested tibbles, notice that the nest function in this example creates a nested tibble with just two rows, one for each value of the variable type, each of which contains a tibble that contains all the data. The column price_tibbles in the first row contains the whole data for all observations for conventional avocados: avocado_data %&gt;% group_by(type) %&gt;% # nest all columns except grouping-column &#39;type&#39; in a tibble # the name of the new column is &#39;price_tibbles&#39; nest(.key = &quot;price_tibbles&quot;) %&gt;% # extract new column with tibble pull(price_tibbles) %&gt;% # peak at the first entry in this vector .[1] %&gt;% head() ## [[1]] ## # A tibble: 9,126 x 6 ## Date average_price total_volume_sold small medium large ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015-12-27 1.33 64237. 1037. 54455. 48.2 ## 2 2015-12-20 1.35 54877. 674. 44639. 58.3 ## 3 2015-12-13 0.93 118220. 795. 109150. 130. ## 4 2015-12-06 1.08 78992. 1132 71976. 72.6 ## 5 2015-11-29 1.28 51040. 941. 43838. 75.8 ## 6 2015-11-22 1.26 55980. 1184. 48068. 43.6 ## 7 2015-11-15 0.99 83454. 1369. 73673. 93.3 ## 8 2015-11-08 0.98 109428. 704. 101815. 80 ## 9 2015-11-01 1.02 99811. 1022. 87316. 85.3 ## 10 2015-10-25 1.07 74339. 842. 64757. 113 ## # … with 9,116 more rows After nesting, we call the custom function bootstrapped_CI on the variable average_price inside of every nested tibble, so first for the conventional, then the organic avocados. The result is a nested tibble. If we now look inside the new column CI, we see that its cells contain tibbles with the output of each call of bootstrapped_CI: avocado_data %&gt;% group_by(type) %&gt;% # nest all columns except grouping-column &#39;type&#39; in a tibble # the name of the new column is &#39;price_tibbles&#39; nest(.key = &quot;price_tibbles&quot;) %&gt;% # collect the summary statistics for each nested tibble # the outcome is a new column with nested tibbles summarise( CIs = map(price_tibbles, function(d) bootstrapped_CI(d$average_price)) ) %&gt;% # extract new column vector with nested tibbles pull(CIs) %&gt;% # peak at the first entry .[1] %&gt;% head() ## [[1]] ## # A tibble: 1 x 3 ## lower mean upper ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.15 1.16 1.16 Finally, we unnest the new column CIs to obtain the final result (code repeated from above): avocado_data %&gt;% group_by(type) %&gt;% # nest all columns except grouping-column &#39;type&#39; in a tibble # the name of the new column is &#39;price_tibbles&#39; nest(.key = &quot;price_tibbles&quot;) %&gt;% # collect the summary statistics for each nested tibble # the outcome is a new column with nested tibbles summarise( CIs = map(price_tibbles, function(d) bootstrapped_CI(d$average_price)) ) %&gt;% # unnest the newly created nested tibble unnest(CIs) ## # A tibble: 2 x 4 ## type lower mean upper ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 conventional 1.15 1.16 1.16 ## 2 organic 1.65 1.65 1.66 For the current purpose, it is not important what a biased or unbiased estimator is and why this subtle change in the formula matters. We will come back to the issue of estimation in Chapter 9.↩ \\(D^{\\textrm{rep}}\\) is short for “repeated data”. We will use this concept more later on. The idea is that we consider “hypothetical data” which we have not perceived, but which we might have. Repeated data is (usually) of the same shape and form as the original, observed data, which is also sometimes noted as \\(D^{\\textrm{obs}}\\) for clarity in comparison to \\(D^{\\textrm{rep}}\\).↩ "],["Chap-02-03-summary-statistics-2D.html", "5.3 Covariance and correlation", " 5.3 Covariance and correlation 5.3.1 Covariance Let \\(\\vec{x}\\) and \\(\\vec{y}\\) be two vectors of numeric data of the same length, such that all pairs of \\(x_i\\) and \\(y_i\\) are associated observations. For example, the vectors avocado_data$total_volume_sold and avocado_data$average_price would be such vectors. The covariance between \\(\\vec{x}\\) and \\(\\vec{y}\\) measures, intuitively put, the degree to which changes in one vector correspond with changes in the other. Formally, covariance is defined as follows (notice that we use \\(n-1\\) in the denominator to obtain an unbiased estimator if the means are unknown): \\[\\text{Cov}(\\vec{x},\\vec{y}) = \\frac{1}{n-1} \\ \\sum_{i=1}^n (x_i - \\mu_{\\vec{x}}) \\ (y_i - \\mu_{\\vec{y}})\\] There is a visually intuitive geometric interpretation of covariance. To see this, let’s look at a small contrived example. contrived_example &lt;- tribble( ~x, ~y, 2, 2, 2.5, 4, 3.5, 2.5, 4, 3.5 ) First, notice that the mean of x and y is 3: # NB: `map_df` here iterates over the columns of the tibble in its # first argument slot means_contr_example &lt;- map_df(contrived_example, mean) means_contr_example ## # A tibble: 1 x 2 ## x y ## &lt;dbl&gt; &lt;dbl&gt; ## 1 3 3 We can then compute the covariance as follows: contrived_example &lt;- contrived_example %&gt;% mutate( area_rectangle = (x - mean(x)) * (y - mean(y)), covariance = 1 / (n() - 1) * sum((x - mean(x)) * (y - mean(y))) ) contrived_example ## # A tibble: 4 x 4 ## x y area_rectangle covariance ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 2 1 0.25 ## 2 2.5 4 -0.5 0.25 ## 3 3.5 2.5 -0.25 0.25 ## 4 4 3.5 0.5 0.25 Similar to what we did with the variance, we can give a geometrical interpretation of covariance. Figure 5.4 shows the four summands contributing to the covariance of the contrived_example. What this graph clearly shows is that summands can have different signs. If \\(x_i\\) and \\(y_i\\) are both bigger than the mean, or if both are smaller than the mean, then the corresponding summand is positive. Otherwise, the corresponding summand is negative. This means that the covariance captures the degree to which pairs of \\(x_i\\) and \\(y_i\\) tend to deviate from the mean in the same general direction. A positive covariance is indicative of a positive general association between \\(\\vec{x}\\) and \\(\\vec{y}\\), while a negative covariance suggests that as you increase \\(x_i\\), the associated \\(y_i\\) becomes smaller. Figure 5.4: Geometrical interpretation of covariance. Four data points (orange dots) and their mean (white dot) are shown, together with the squares whose sides are the differences between the observed data points and the mean. The numbers in white give the area of each square, which is also indicated by the coloring of each rectangle. We can, of course, also calculate the covariance just with the built-in base R function cov: with(contrived_example, cov(x, y)) ## [1] 0.25 And, using this function, we can calculate the covariance between the logarithm of total_volume_sold and average_price in the avocado data:23 with(avocado_data, cov(log(total_volume_sold), average_price)) ## [1] -0.5388084 Interestingly, the negative covariance in this example suggests that across all associated data pairs, the larger total_volume_sold, the lower average_price. It is important that this is a descriptive statistics, and that this is not to be interpreted as evidence of a causal relation between the two measures of interest. Not in this example, not in any other. The covariance describes associated data points; it alone does not provide any evidence for causal relationships. 5.3.2 Correlation Covariance is a very useful notion to show how two variables, well, co-vary. But the problem with this notion of covariance is that it is not invariant under linear transformation. Consider the contrived_example from above once more. The original data had the following covariance: with(contrived_example, cov(x, y)) ## [1] 0.25 But if we just linearly transform, say, vector y to 1000 * y + 500 (e.g., because we switch to an equivalent, but numerically different measuring scale, such as going from Celcius to Fahrenheit), we obtain: with(contrived_example, cov(x, 1000 * y + 500)) ## [1] 250 This is a problem in so far as that we would like to have a measure of how much two variables co-vary that is robust against linear changes, say in measurement scale, like the difference between Celcius and Fahrenheit. To compensate for this problem, we can look at Bravais-Pearson correlation, which is covariance standardized by standard deviations: \\[r_{\\vec{x}\\vec{y}} = \\frac{\\text{Cov}(\\vec{x}, \\vec{y})}{\\text{SD}(\\vec{x}) \\ \\text{SD}(\\vec{y})}\\] Let’s check invariance under linear transformation, using the built-in function cor. The correlation coefficient for the original data is: with(contrived_example, cor(x, y)) ## [1] 0.3 The correlation coefficient for the data with linearly transformed y is: with(contrived_example, cor(x, 1000 * y + 500)) ## [1] 0.3 Indeed, the correlation coefficient is nicely bounded to lie between -1 and 1. A correlation coefficient of 0 is to be interpreted as the absence of any correlation. A correlation coefficient of 1 is a perfect positive correlation (the higher \\(x_i\\), the higher \\(y_i\\)), and -1 indicates a perfect negative correlation (the higher \\(x_i\\), the lower \\(y_i\\)). Again, pronounced positive or negative correlations are not to be confused with strong evidence for a causal relation. It is just a descriptive statistic capturing a property of associated measurements. In the avocado data, the logarithm of total_volume_sold shows a noteworthy correlation with average_price. This is also visible in Figure 5.5. with(avocado_data, cor(log(total_volume_sold), average_price)) ## [1] -0.5834087 Figure 5.5: Scatter plot of avocado prices, plotted against (logarithms of) the total amount sold. The black line is a linear regression line indicating the (negative) correlation between these measures (more on this later). Exercise 5.4: Covariance and Correlation Given two vectors of paired metric measurements \\(\\vec{x}\\) and \\(\\vec{y}\\), you are given the covariance \\(Cov(\\vec{x},\\vec{y}) = 1\\) and the variance of each vector \\(Var(\\vec{x}) = 25\\) and \\(Var(\\vec{y}) = 36\\). Compute Pearson’s correlation coefficient for \\(\\vec{x}\\) and \\(\\vec{y}\\). Solution \\(r_{\\vec{x}\\vec{y}}=\\frac{1}{\\sqrt{25}\\sqrt{36}}=\\frac{1}{30}\\) Decide for the following statements whether they are true or false: The covariance is bounded between -100 and 100. The Pearson correlation coefficient is bounded between 0 and 1. For any (non-trivial) vector \\(\\vec{x}\\) of metric measurements, \\(Cor(\\vec{x},\\vec{x}) = 1\\). Solution Statement c. is correct. We use the logarithm of total_volume_sold because we also used the logarithm for plotting before. Using the logarithm also gives a better linear fit, but what that means we will only see much later when we talk about linear regression.↩ "],["Chap-02-02-visualization.html", "6 Data Visualization", " 6 Data Visualization Numerical summaries of complex data always incur information loss. Still lossy, but less so (if done well), is visualization. Any serious data analysis should start with a process in which the analyst becomes intimate with the data at hand. Visualization is an integral part of data-intimacy. Section 6.1 demonstrates how summary statistics can be misleading and how a simple visualization can be much more revealing. Section 6.2 offers some reflection on what makes a data visualization successful. Section 6.3 introduces the basics of data visualization with the ggplot package, an integral part of the tidyverse.24 This first exposition is based on a scatter plot for the avocado price data. Going beyond scatter plots, Section 6.4 looks at some common types of plots and how to realize them using the geom_ family of functions in ggplot. The learning goals for this chapter are: obtain a basic understanding of better/worse plotting understand the idea of hypothesis-driven visualization develop a basic understanding of the ‘grammar of graphs’ get familiar with frequent visualization strategies bar plots, densities, violins, error bars, etc. be able to fine-tune graphs for better visualization It is possible to create ggplot-like graphs with similar syntax in Python, as described here. The Gadfly package for Julia uses very similar ideas (of incremental composition) but a different syntax.↩ "],["Chap-02-04-Anscombe-example.html", "6.1 Motivating example: Anscombe’s quartet", " 6.1 Motivating example: Anscombe’s quartet To see how summary statistics can be highly misleading, and how a simple plot can reveal a lot more, consider a famous dataset available in R (Anscombe 1973): anscombe %&gt;% as_tibble ## # A tibble: 11 x 8 ## x1 x2 x3 x4 y1 y2 y3 y4 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10 10 10 8 8.04 9.14 7.46 6.58 ## 2 8 8 8 8 6.95 8.14 6.77 5.76 ## 3 13 13 13 8 7.58 8.74 12.7 7.71 ## 4 9 9 9 8 8.81 8.77 7.11 8.84 ## 5 11 11 11 8 8.33 9.26 7.81 8.47 ## 6 14 14 14 8 9.96 8.1 8.84 7.04 ## 7 6 6 6 8 7.24 6.13 6.08 5.25 ## 8 4 4 4 19 4.26 3.1 5.39 12.5 ## 9 12 12 12 8 10.8 9.13 8.15 5.56 ## 10 7 7 7 8 4.82 7.26 6.42 7.91 ## 11 5 5 5 8 5.68 4.74 5.73 6.89 There are four pairs of \\(x\\) and \\(y\\) coordinates. Unfortunately, these are stored in long format with two pieces of information buried inside of the column name: for instance, the name x3 contains the information that this column contains the \\(x\\) coordinates for the 3rd pair. This is rather untidy. But, using tools from the dplyr package, we can tidy up quickly: tidy_anscombe &lt;- anscombe %&gt;% as_tibble %&gt;% pivot_longer( ## we want to pivot every column everything(), ## use reg-exps to capture 1st and 2nd character names_pattern = &quot;(.)(.)&quot;, ## assign names to new cols, using 1st part of ## what reg-exp captures as new column names names_to = c(&quot;.value&quot;, &quot;grp&quot;) ) %&gt;% mutate(grp = paste0(&quot;Group &quot;, grp)) tidy_anscombe ## # A tibble: 44 x 3 ## grp x y ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Group 1 10 8.04 ## 2 Group 2 10 9.14 ## 3 Group 3 10 7.46 ## 4 Group 4 8 6.58 ## 5 Group 1 8 6.95 ## 6 Group 2 8 8.14 ## 7 Group 3 8 6.77 ## 8 Group 4 8 5.76 ## 9 Group 1 13 7.58 ## 10 Group 2 13 8.74 ## # … with 34 more rows Here are some summary statistics for each of the four pairs: tidy_anscombe %&gt;% group_by(grp) %&gt;% summarise( mean_x = mean(x), mean_y = mean(y), min_x = min(x), min_y = min(y), max_x = max(x), max_y = max(y), crrltn = cor(x, y) ) ## # A tibble: 4 x 8 ## grp mean_x mean_y min_x min_y max_x max_y crrltn ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Group 1 9 7.50 4 4.26 14 10.8 0.816 ## 2 Group 2 9 7.50 4 3.1 14 9.26 0.816 ## 3 Group 3 9 7.5 4 5.39 14 12.7 0.816 ## 4 Group 4 9 7.50 8 5.25 19 12.5 0.817 These numeric indicators suggest that each pair of \\(x\\) and \\(y\\) values is very similar. Only the ranges seem to differ. A brilliant example of how misleading numeric statistics can be, as compared to a plot of the data:25 tidy_anscombe %&gt;% ggplot(aes(x, y)) + geom_smooth(method = lm, se = F, color = &quot;darkorange&quot;) + geom_point(color = project_colors[3], size = 2) + scale_y_continuous(breaks = scales::pretty_breaks()) + scale_x_continuous(breaks = scales::pretty_breaks()) + labs( title = &quot;Anscombe&#39;s Quartet&quot;, x = NULL, y = NULL, subtitle = bquote(y == 0.5 * x + 3 ~ (r %~~% .82) ~ &quot;for all groups&quot;) ) + facet_wrap(~grp, ncol = 2, scales = &quot;free_x&quot;) + theme(strip.background = element_rect(fill = &quot;#f2f2f2&quot;, colour = &quot;white&quot;)) Figure 6.1: Anscombe’s Quartet: four different data sets, all of which receive the same correlation score. References "],["Chap-02-04-good-visualization.html", "6.2 Visualization: the good, the bad and the infographic", " 6.2 Visualization: the good, the bad and the infographic Producing good data visualization is very difficult. There are no uncontroversial criteria for what a good visualization should be. There are, unfortunately, quite clear examples of really bad visualizations. We will look at some of these examples in the following. An absolute classic on data visualization is an early book by Edward Tufte (1983) entitled “The Visual Display of Quantitative Information”. A distilled and over-simplified summary of Tufte’s proposal is that we should eliminate chart junk and increase the data-ink ratio, a concept which Tufte defines formally. The more information (= data) a plot conveys, the higher the data-ink ratio. The more ink it requires, the lower it is. However, not all information in the data is equally relevant. Also, spending extra ink to reduce the recipient’s mental effort of retrieving the relevant information can be justified. Essentially, I would here propose to consider a special case of data visualization, common to scientific presentations. I want to speak of hypothesis-driven visualization as a way of communicating a clear message, the message we care most about at the current moment of (scientific) exchange. Though merely a special instance of all the goals one could pursue with data visualization, focusing on this special case is helpful because it allows us to formulate a (defeasible) rule of thumb for good visualization in analogy to how natural language ought to be used in order to achieve optimal cooperative information flow (at least as conceived by authors): The vague &amp; defeasible rule of thumb of good data visualization (according to the author). “Communicate a maximal degree of relevant true information in a way that minimizes the recipient’s effort of retrieving this information.” Interestingly, just like natural language also needs to rely on a conventional medium for expressing ideas which might put additional constraints on what counts as optimal communication (e.g., we might not be allowed to drop a pronoun in English even though it is clearly recoverable from the context, and Italian speakers would happily omit it), so do certain unarticulated conventions in each specific scientific field.26 Here are a few examples of bad plotting.27 To begin with, check out this fictitious data set: large_contrast_data &lt;- tribble( ~group, ~treatment, ~measurement, &quot;A&quot;, &quot;on&quot;, 1000, &quot;A&quot;, &quot;off&quot;, 1002, &quot;B&quot;, &quot;on&quot;, 992, &quot;B&quot;, &quot;off&quot;, 990 ) If we are interested in any potential influence of variables group and treatment on the measurement in question, the following graph is ruinously unhelpful because the large size of the bars renders the relatively small differences between them almost entirely unspottable. large_contrast_data %&gt;% ggplot(aes(x = group, y = measurement, fill = treatment)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) A better visualization would be this: large_contrast_data %&gt;% ggplot(aes( x = group, y = measurement, shape = treatment, color = treatment, group = treatment ) ) + geom_point() + geom_line() + scale_y_continuous(breaks = scales::pretty_breaks()) The following examples use the Bio-Logic Jazz-Metal data set, in particular the following derived table of counts or the derived table of proportions: BLJM_associated_counts ## # A tibble: 4 x 3 ## JM LB n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Jazz Biology 38 ## 2 Jazz Logic 26 ## 3 Metal Biology 20 ## 4 Metal Logic 18 It is probably hard to believe but Figure 6.2 was obtained without further intentional uglification just by choosing a default 3D bar plot display in Microsoft’s Excel. It does actually show the relevant information but it is entirely useless for a human observer without a magnifying glass, professional measuring tools and a calculator. Figure 6.2: Example of a frontrunner for the prize of today’s most complete disaster in the visual communication of information. It gets slightly better with the following pie chart of the same numerical information, also generated with Microsoft’s Excel. Subjectively, Figure 6.3 is pretty much anything but pretty. Objectively, it is better than the previous visualization in terms of 3D bar plots shown in Figure 6.2 but the pie chart is still not useful for answering the question which we care about, namely whether logicians are more likely to prefer Jazz over Metal than biologists. Figure 6.3: Example of a rather unhelpful visual representation of the BLJM data (when the research question is whether logicians are more likely to prefer Jazz over Metal than biologists). We can produce a much more useful representation with the code below. (A similar visualization also appeared as Figure 5.1 in the previous chapter.) BLJM_associated_counts %&gt;% ggplot( aes( x = LB, y = n, color = JM, shape = JM, group = JM ) ) + geom_point(size = 3) + geom_line() + labs( title = &quot;Counts of choices of each music+subject pair&quot;, x = &quot;&quot;, y = &quot;&quot; ) Infographics. Scientific communication with visualized data is different from other modes of communication with visualized data. These other contexts come with different requirements for good data visualization. Good examples of highly successful infographics are produced by the famous illustrator Nigel Holmes, for instance. Figure 6.4 is an example from Holmes’ website showing different amounts of energy consumption for different household appliances. The purpose of this visualization is not (only) to communicate information about which of the listed household appliances is most energy-intensive. Its main purpose is to raise awareness for the unexpectedly large energy consumption of household appliances in general (in standby mode).28 Figure 6.4: Example of an infographic. While possibly considered ‘chart junk’ in a scientific context, the eye-catching and highly memorable (and pretty!) artwork serves a strong secondary purpose in contexts other than scientific ones where hypothesis-driven precise communication with visually presented data is key. References "],["Chap-02-04-ggplot.html", "6.3 Basics of ggplot", " 6.3 Basics of ggplot In this section, we will work towards a first plot with ggplot. It will be a scatter plot (more on different kinds of plots in Section 6.4) for the avocado price data. Check out the ggplot cheat sheet for a quick overview of the nuts and bolts of ggplot. The following paragraphs introduce the key concepts of ggplot: incremental composition: adding elements or changing attributes of a plot incrementally convenience functions &amp; defaults: a closer look at high-level convenience functions (like geom_point) and what they actually do layers: seeing how layers are stacked when we call, e.g. different geom_ functions in sequence grouping: what happens when we use grouping information (e.g., for color, shape or in facets) The section finishes with a first full example of a plot that has different layers, uses grouping, and customizes a few other things. To get started, let’s first load the (preprocessed) avocado data set used for plotting: avocado_data &lt;- aida::data_avocado 6.3.1 Incremental composition of a plot The “gg” in the package name ggplot is short for “grammar of graphs”. It provides functions for describing scientific data plots in a compositional manner, i.e., for dealing with different recurrent elements in a plot in an additive way. As a result of this approach, we will use the symbol + to add more and more elements (or to override the implicit defaults in previously evoked elements) to build a plot. For example, we can obtain a scatter plot for the avocado price data simply by first calling the function ggplot, which just creates an empty plot: incrementally_built_plot &lt;- ggplot() The plot stored in variable incrementally_built_plot is very boring. Take a look: incrementally_built_plot As you can see, you do not see anything except a (white) canvas. But we can add some stuff. Don’t get hung up on the details right now, just notice that we use + to add stuff to our plot:29 incrementally_built_plot + # add a geom of type `point` (=&gt; scatter plot) geom_point( # what data to use data = avocado_data, # supply a mapping (in the form of an &#39;aesthetic&#39; (see below)) mapping = aes( # which variable to map onto the x-axis x = total_volume_sold, # which variable to map onto the y-axis y = average_price ) ) You see that the function geom_point is what makes the points appear. You tell it which data to use and which mapping of variables from the data set to elements in the plot you like. That’s it, at least to begin with. We can also supply the information about the data to use and the aesthetic mapping in the ggplot function call. Doing so will make this information the default for any subsequently added layer. Notice also that the data argument in function ggplot is the first argument, so we will frequently make use of piping, like in the following code which is equivalent to the previous in terms of output: avocado_data %&gt;% ggplot(aes(x = total_volume_sold, y = average_price)) + geom_point() 6.3.2 Elements in the layered grammar of graphs Let’s take a step back. Actually, the function geom_point is a convenience function that does a lot of things automatically for us. It helps to understand subsequent code if we peek under the hood at least for a brief moment initially, if only to just realize where some of the terminology in and around the “grammar of graphs” comes from. The ggplot package defines a layered grammar of graphs (Wickham 2010). This is a structured description language for plots (relevant for data science). It uses a smart system of defaults so that it suffices to often just call a convenience wrapper like geom_point. But underneath, there is the possibility of tinkering with (almost?) all of the (layered) elements and changing the defaults if need be. The process of mapping data onto a visualization essentially follows this route: data -&gt; statistical transformation -&gt; geom. object -&gt; aesthetics You supply (tidy) data. The data is then transformed (e.g., by computing a summary statistic) in some way or another. This could just be an “identity map” in which case you will visualize the data exactly as it is. The resulting data representation is mapped onto some spatial (geometric) appearance, like a line, a dot, or a geometric shape. Finally, there is room to alter the specific aesthetics of this mapping from data to visual object, like adjusting the size or the color of a geometric object, possibly depending on some other properties it has (e.g., whether it is an observation for a conventional or an organically grown avocado). To make explicit the steps which are implicitly carried out by geom_point in the example above, here is a fully verbose but output-equivalent sequence of commands that builds the same plot by defining all the basic components manually: avocado_data %&gt;% ggplot() + # plot consists of layers (more on this soon) layer( # how to map columns onto ingredients in the plot mapping = aes(x = total_volume_sold, y = average_price), # what statistical transformation should be used? - here: none stat = &quot;identity&quot;, # how should the transformed data be visually represented? - here: as points geom = &quot;point&quot;, # should we tinker in any other way with the positioning of each element? # - here: no, thank you! position = &quot;identity&quot; ) + # x and y axes are non-transformed continuous scale_x_continuous() + scale_y_continuous() + # we use a cartesian coordinate system (not a polar or a geographical map) coord_cartesian() In this explicit call, we still need to specify the data and the mapping (which variable to map onto which axis). But we need to specify much more. We tell ggplot that we want standard (e.g., not log-transformed) axes. We also tell it that our axes are continuous, that the data should not be transformed and that the visual shape (= geom) to which the data is to be mapped is a point (hence the name geom_point). It is not important to understand all of these components right now. It is important to have seen them once, and to understand that geom_point is a wrapper around this call which assumes reasonable defaults (such as non-transformed axes, points for representation etc.). 6.3.3 Layers and groups ggplot is the “grammar of layered graphs”. Plots are compositionally built by combining different layers, if need be. For example, we can use another function from the geom_ family of functions to display a different visualization derived from the same data on top of our previous scatter plot.30 avocado_data %&gt;% ggplot( mapping = aes( # notice that we use the log (try without it to understand why) x = log(total_volume_sold), y = average_price ) ) + # add a scatter plot geom_point() + # add a linear regression line geom_smooth(method = &quot;lm&quot;) Notice that layering is really sequential. To see this, just check what happens when we reverse the calls of the geom_ functions in the previous example: avocado_data %&gt;% ggplot( mapping = aes( # notice that we use the log (try without it to understand why) x = log(total_volume_sold), y = average_price ) ) + # FIRST: add a linear regression line geom_smooth(method = &quot;lm&quot;) + # THEN: add a scatter plot geom_point() If you want lower layers to be visible behind layers added later, one possibility is to tinker with opacity, via the alpha parameter. Notice that the example below also changes the colors. The result is quite toxic, but at least you see the line underneath the semi-transparent points. avocado_data %&gt;% ggplot( mapping = aes( # notice that we use the log (try without it to understand why) x = log(total_volume_sold), y = average_price ) ) + # FIRST: add a linear regression line geom_smooth(method = &quot;lm&quot;, color = &quot;darkgreen&quot;) + # THEN: add a scatter plot geom_point(alpha = 0.1, color = &quot;orange&quot;) The aesthetics defined in the initial call to ggplot are global defaults for all layers to follow, unless they are overwritten. This also holds for the data supplied to ggplot. For example, we can create a second layer using another call to geom_point from a second data set (e.g., with a summary statistic), like so: # create a small tibble with the means of both # variables of interest avocado_data_means &lt;- avocado_data %&gt;% summarize( mean_volume = mean(log(total_volume_sold)), mean_price = mean(average_price) ) avocado_data_means ## # A tibble: 1 x 2 ## mean_volume mean_price ## &lt;dbl&gt; &lt;dbl&gt; ## 1 11.3 1.41 avocado_data %&gt;% ggplot( aes(x = log(total_volume_sold), y = average_price) ) + # first layer uses globally declared data &amp; mapping geom_point() + # second layer uses different data set &amp; mapping geom_point( data = avocado_data_means, mapping = aes( x = mean_volume, y = mean_price ), # change shape of element to display (see below) shape = 9, # change size of element to display size = 12, color = &quot;skyblue&quot; ) 6.3.4 Grouping Categorical distinction is frequently important in data analysis. Just think of the different combinations of factor levels in a factorial design, or the difference between conventionally grown and organically grown avocados. ggplot understands grouping very well and acts on appropriately, if you tell it to in the right way. Grouping can be relevant for different aspects of a plot: the color of points or lines, their shape, or even whether to plot everything together or separately. For instance, we might want to display different types of avocados in a different color. We can do this like so: avocado_data %&gt;% ggplot( aes( x = log(total_volume_sold), y = average_price, # use a different color for each type of avocado color = type ) ) + geom_point() Notice that we added the grouping information inside of aes to the call of ggplot. This way the grouping is the global default for the whole plot. Check what happens when we then add another layer, like geom_smooth: avocado_data %&gt;% ggplot( aes( x = log(total_volume_sold), y = average_price, # use a different color for each type of avocado color = type ) ) + geom_point() + geom_smooth(method = &quot;lm&quot;) The regression lines will also be shown in the colors of the underlying scatter plot. We can change this by overwriting the color attribute locally, but then we lose the grouping information: avocado_data %&gt;% ggplot( aes( x = log(total_volume_sold), y = average_price, # use a different color for each type of avocado color = type ) ) + geom_point() + geom_smooth(method = &quot;lm&quot;, color = &quot;black&quot;) To retrieve the grouping information, we can change the explicit keyword group (which just treats data from the relevant factor levels differently without directly changing their appearance): avocado_data %&gt;% ggplot( aes( x = log(total_volume_sold), y = average_price, # use a different color for each type of avocado color = type ) ) + geom_point() + geom_smooth( # tell the smoother to deal with avocados types separately aes(group = type), method = &quot;lm&quot;, color = &quot;black&quot; ) Finally, we see that the lines are not uniquely associable with the avocado type, so we can also change the regression line’s shape attribute conditional on avocado type: avocado_data %&gt;% ggplot( aes( x = log(total_volume_sold), y = average_price, # use a different color for each type of avocado color = type ) ) + geom_point() + geom_smooth( # tell the smoother to deal with avocados types separately aes(group = type, linetype = type), method = &quot;lm&quot;, color = &quot;black&quot; ) 6.3.5 Example of a customized plot If done with the proper mind and heart, plots intended to share (and to communicate a point, following the idea of hypothesis-driven visualization) will usually require a lot of tweaking. We will cover some of the most frequently relevant tweaks in Section 6.6. To nevertheless get a feeling of where the journey is going, at least roughly, here is an example of a plot of the avocado data which is much more tweaked and honed. No claim is intended regarding the false idea that this plot is in any sense optimal. There is not even a clear hypothesis or point to communicate. This just showcases some functionality. Notice, for instance, that this plot uses two layers, invoked by geom_point which shows the scatter plot of points and geom_smooth which layers on top the point cloud regression lines (one for each level in the grouping variable). # pipe data set into function `ggplot` avocado_data %&gt;% # reverse factor level so that horizontal legend entries align with # the majority of observations of each group in the plot mutate( type = fct_rev(type) ) %&gt;% # initialize the plot ggplot( # defined mapping mapping = aes( # which variable goes on the x-axis x = total_volume_sold, # which variable goes on the y-axis y = average_price, # which groups of variables to distinguish group = type, # color and fill to change by grouping variable fill = type, linetype = type, color = type ) ) + # declare that we want a scatter plot geom_point( # set low opacity for each point alpha = 0.1 ) + # add a linear model fit (for each group) geom_smooth( color = &quot;black&quot;, method = &quot;lm&quot; ) + # change the default (normal) of x-axis to log-scale scale_x_log10() + # add dollar signs to y-axis labels scale_y_continuous(labels = scales::dollar) + # change axis labels and plot title &amp; subtitle labs( x = &#39;Total volume sold (on a log scale)&#39;, y = &#39;Average price&#39;, title = &quot;Avocado prices against amount sold&quot;, subtitle = &quot;With linear regression lines&quot; ) Exercise 6.1: Find the match Determine which graph was created with which code: Code 1: code_1 &lt;- ggplot(avocado_data, mapping = aes( x = average_price, y = log(total_volume_sold), color = type ) ) + geom_point() + geom_smooth(method = &quot;lm&quot;) Code 2: code_2 &lt;- ggplot(avocado_data, mapping = aes( x = log(total_volume_sold), y = average_price, color = type ) ) + geom_point() + geom_smooth(method = &quot;lm&quot;) Code 3: code_3 &lt;- ggplot(avocado_data, mapping = aes( x = log(total_volume_sold), y = average_price ) ) + geom_smooth(method = &quot;lm&quot;, color = &quot;black&quot;) + geom_point(alpha = 0.1, color = &quot;blue&quot;) + labs( x = &#39;Total volume sold (on a log scale)&#39;, y = &#39;Average price&#39;, title = &quot;Avocado prices against amount sold&quot; ) Code 4: code_4 &lt;- ggplot(avocado_data, mapping = aes( x = log(total_volume_sold), y = average_price, linetype = type ) ) + geom_smooth(method = &quot;lm&quot;, color = &quot;black&quot;) + geom_point(alpha = 0.1, color = &quot;blue&quot;) + labs( x = &#39;Total volume sold (on a log scale)&#39;, y = &#39;Average price&#39;, title = &quot;Avocado prices against amount sold&quot; ) Plot 1: Plot 2: Plot 3: Solution Plot 1: Code 4 Plot 2: Code 1 Plot 3: Code 2 References "],["Chap-02-04-geoms.html", "6.4 A rendezvous with popular geoms", " 6.4 A rendezvous with popular geoms In the following, we will cover some of the more basic geom_ functions relevant for our present purposes. It might be useful to read this section top-to-bottom at least once, not to think of it as a mere reference list. More information is provided by the ggplot cheat sheet. 6.4.1 Scatter plots with geom_point Scatter plots visualize pairs of associated observations as points in space. We have seen this for the avocado prize data above. Let’s look at some of the further arguments we can use to tweak the presentation by geom_point. The following example changes the shape of the objects displayed to tilted rectangles (sometimes called diamonds, e.g., in LaTeX \\diamond) away from the default circles, the color of the shapes, their size and opacity. avocado_data %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point( # shape to display is number 23 (tilted rectangle, see below) shape = 23, # color of the surrounding line of the shape (for shapes 21-24) color = &quot;darkblue&quot;, # color of the interior of each shape fill = &quot;lightblue&quot;, # size of each shape (default is 1) size = 5, # level of opacity for each shape alpha = 0.3 ) How do you know which shape is which number? - By looking at the picture in Figure 6.5, for instance. Figure 6.5: The numerical coding of different shapes in ggplot. Notice that objects 21-24 are sensitive to both color and fill, but the others are only sensitive to color. 6.4.2 Smooth The geom_smooth function operates on two-dimensional metric data and outputs a smoothed line, using different kinds of fitting functions. It is possible to show an indicator of certainty for the fit. We will deal with model fits in later parts of the book. For illustration, just enjoy a few examples here: avocado_data %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point( shape = 23, color = &quot;darkblue&quot;, fill = &quot;lightblue&quot;, size = 3, alpha = 0.3 ) + geom_smooth( # fitting a smoothed curve to the data method = &quot;loess&quot;, # display standard error around smoothing curve se = T, color = &quot;darkorange&quot; ) 6.4.3 Line Use geom_line to display a line for your data if that data has associated (ordered) metric values. You can use argument linetype to specify the kind of line to draw. tibble( x = seq(-4, 8, by = 2), y = x^2 ) %&gt;% ggplot(aes(x, y)) + geom_line( linetype = &quot;dashed&quot; ) Sometimes you may want to draw lines between items that are grouped: BLJM_associated_counts %&gt;% ggplot( aes( x = LB, y = n, color = JM, group = JM ) ) + geom_line(size = 3) 6.4.4 Bar plot A bar plot, plotted with geom_bar or geom_col, displays a single number for each of several groups for visual comparison by length. The difference between these two functions is that geom_bar relies on implicit counting, while geom_col expects the numbers that translate into the length of the bars to be supplied for it. This book favors the use of geom_col by first wrangling the data to show the numbers to be visualized, since often this is the cleaner approach and the numbers are useful to have access to independently (e.g., for referring to in the text). Here’s an example of how bar_plot works (implicitly counting numbers of occurrences): tibble( shopping_cart = c( rep(&quot;chocolate&quot;, 2), rep(&quot;ice-cream&quot;, 5), rep(&quot;cookies&quot;, 8) ) ) %&gt;% ggplot(aes(x = shopping_cart)) + geom_bar() To display this data with geom_col we need to count occurrences first ourselves: tibble( shopping_cart = c( rep(&quot;chocolate&quot;, 2), rep(&quot;ice-cream&quot;, 5), rep(&quot;cookies&quot;, 8) ) ) %&gt;% dplyr::count(shopping_cart) %&gt;% ggplot(aes (x = shopping_cart, y = n)) + geom_col() To be clear, geom_col is essentially geom_bar when we overwrite the default statistical transformation of counting to “identity”: tibble( shopping_cart = c( rep(&quot;chocolate&quot;, 2), rep(&quot;ice-cream&quot;, 5), rep(&quot;cookies&quot;, 8) ) ) %&gt;% dplyr::count(shopping_cart) %&gt;% ggplot(aes (x = shopping_cart, y = n)) + geom_bar(stat = &quot;identity&quot;) Bar plots are a frequent sight in psychology papers. They are also controversial. They often fare badly with respect to the data-ink ratio. Especially, when what is plotted are means of grouped variables. For example, the following plot is rather uninformative (even if the research question is a comparison of means): avocado_data %&gt;% group_by(type) %&gt;% summarise( mean_price = mean(average_price) ) %&gt;% ggplot(aes(x = type, y = mean_price)) + geom_col() It makes sense to use the available space for a more informative report about the distribution of data points around the means, e.g., by using geom_violin or geom_histogram etc. But bar plots may also be good enough if there is not more of immediate relevance, such as when we look at counts or proportions. Still, it might help to include a measure of certainty. For instance, using the King of France data set, we can display proportions of ‘true’ answers with 95% bootstrapped confidence intervals like in the plot below. Notice the use of the geom_errorbar function to display the intervals in the following example. We first load the preprocessed data set. data_KoF_processed &lt;- aida::data_KoF_preprocessed data_KoF_processed %&gt;% # drop unused factor levels droplevels() %&gt;% # get means and 95% bootstrapped CIs for each condition group_by(condition) %&gt;% nest() %&gt;% summarise( CIs = map(data, function(d) bootstrapped_CI(d$response == &quot;TRUE&quot;)) ) %&gt;% unnest(CIs) %&gt;% # plot means and CIs ggplot(aes(x = condition, y = mean, fill = condition)) + geom_col() + geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.2)) + ylim(0, 1) + labs( x = &quot;&quot;, y = &quot;&quot;, title = &quot;Proportion of &#39;TRUE&#39; responses per condition&quot;, subtitle = &quot;Error bars are bootstrapped 95% CIs&quot; ) + theme(legend.position = &quot;none&quot;) + scale_fill_manual(values = project_colors) + theme(axis.text.x = element_text(angle = 30, hjust = 1)) Exercise 6.2: Create a bar plot The data set we will work with in this exercise is currently not part of the aida package. We need to load it like so: url_prefix &lt;- &quot;https://raw.githubusercontent.com/michael-franke/intro-data-analysis/master/data_sets/&quot; WHO_data_url &lt;- str_c(url_prefix, &quot;WHO.csv&quot;) dataWHO &lt;- read_csv(WHO_data_url) Take a look at the data set first, in order to get familiar with it. Create a bar plot, in which Region is on the x-axis and LifeExpectancy_mean is on the y-axis. Each bar should represent the mean life expectancy rate for each region. Solution A minimally functional solution would be this: dataWHO %&gt;% # get the mean for each region group_by(Region) %&gt;% summarise( LifeExpectancy_mean = mean(LifeExpectancy) ) %&gt;% # plot ggplot( aes( x = Region, y = LifeExpectancy_mean, fill = Region ) ) + geom_col() A prettier version suppresses the legend, changes the axis labels, and sligtly tilts the tick labels: dataWHO %&gt;% # get the mean for each region group_by(Region) %&gt;% summarise( LifeExpectancy_mean = mean(LifeExpectancy) ) %&gt;% # plot ggplot( aes( x = Region, y = LifeExpectancy_mean, fill = Region ) ) + geom_col() + # nicer axis labels and a title labs( y = &quot;Mean life expectancy&quot;, title = &quot;Mean life expectancy in different world regions&quot; ) + # hide legend (b/c redundant) theme(legend.position = &quot;none&quot;) + # tilt tick labels by 30 degrees theme(axis.text.x = element_text(angle = 30, hjust = 1)) 6.4.5 Plotting distributions: histograms, boxplots, densities and violins There are different ways for plotting the distribution of observations in a one-dimensional vector, each with its own advantages and disadvantages: the histogram, a box plot, a density plot, and a violin plot. Let’s have a look at each, based on the average_price of different types of avocados. The histogram displays the number of occurrences of observations inside of prespecified bins. By default, the function geom_histogram uses 30 equally spaced bins to display counts of your observations. avocado_data %&gt;% ggplot(aes(x = average_price)) + geom_histogram() If we specify more bins, we get a more fine-grained picture. (But notice that such a high number of bins works for the present data set, which has many observations, but it would not necessarily for a small data set.) avocado_data %&gt;% ggplot(aes(x = average_price)) + geom_histogram(bins = 75) We can also layer histograms but this is usually a bad idea (even if we tinker with opacity) because a higher layer might block important information from a lower layer: avocado_data %&gt;% ggplot(aes(x = average_price, fill = type)) + geom_histogram(bins = 75) An alternative display of distributional metric information is a box plot. Box plots are classics, also called box-and-whiskers plots, and they basically visually report key summary statistics of your metric data. These do work much better than histograms for direct comparison: avocado_data %&gt;% ggplot(aes(x = type, y = average_price)) + geom_boxplot() What we see here is the median for each group (thick black line) and the 25% and 75% quantiles (boxes). The straight lines show the range from the 25% or 75% quantiles to the values given by median + 1.58 * IQR / sqrt(n), where the IQR is the “interquartile range”, i.e., the range between the 25% and 75% quantiles (boxes). To get a better picture of the shape of the distribution, geom_density uses a kernel estimate to show a smoothed line, roughly indicating ranges of higher density of observations with higher numbers. Using opacity, geom_density is useful also for the close comparison of distributions across different groups: avocado_data %&gt;% ggplot(aes(x = average_price, color = type, fill = type)) + geom_density(alpha = 0.5) For many groups to compare, density plots can become cluttered. Violin plots are like mirrored density plots and are better for comparison of multiple groups: avocado_data %&gt;% ggplot(aes(x = type, y = average_price, fill = type)) + geom_violin(alpha = 0.5) A frequently seen method of visualization is to layer a jittered distribution of points under a violin plot, like so: avocado_data %&gt;% ggplot(aes(x = type, y = average_price, fill = type)) + geom_jitter(alpha = 0.3, width = 0.2) + geom_violin(alpha = 0.5) 6.4.6 Rugs Since plotting distributions, especially with high-level abstract smoothing as in geom_density and geom_violin fails to give information about the actual quantity of the data points, rug plots are useful additions to such plots. geom_rug add marks along the axes where different points lie. Here is an example of geom_rug combined with geom_density: avocado_data %&gt;% filter(type == &quot;organic&quot;) %&gt;% ggplot(aes(x = average_price)) + geom_density(fill = &quot;darkorange&quot;, alpha = 0.5) + geom_rug() Here are rugs on a two-dimensional scatter plot: avocado_data %&gt;% filter(type == &quot;conventional&quot;) %&gt;% ggplot(aes(x = total_volume_sold, y = average_price)) + geom_point(alpha = 0.3) + geom_rug(alpha = 0.2) 6.4.7 Annotation It can be useful to add further elements to a plot. We might want to add text, or specific geometrical shapes to highlight aspects of data. The most general function for doing this is annotate. The function annotate takes as a first argument a geom argument, e.g., text or rectangle. It is therefore not a wrapper function in the geom_ family of functions, but the underlying function around which convenience functions like geom_text or geom_rectangle are wrapped. The further arguments that annotate expects depend on the geom it is supposed to realize. Suppose we want to add textual information at a particular coordinate. We can do this with annotate as follows: avocado_data %&gt;% filter(type == &quot;conventional&quot;) %&gt;% ggplot(aes(x = total_volume_sold, y = average_price)) + geom_point(alpha = 0.2) + annotate( geom = &quot;text&quot;, # x and y coordinates for the text x = 2e7, y = 2, # text to be displayed label = &quot;Bravo avocado!&quot;, color = &quot;firebrick&quot;, size = 8 ) We can also single out some data points, like so: avocado_data %&gt;% filter(type == &quot;conventional&quot;) %&gt;% ggplot(aes(x = total_volume_sold, y = average_price)) + geom_point(alpha = 0.2) + annotate( geom = &quot;rect&quot;, # coordinates for the rectangle xmin = 2.1e7, xmax = max(avocado_data$total_volume_sold) + 100, ymin = 0.7, ymax = 1.7, color = &quot;firebrick&quot;, alpha = 0, size = 2 ) "],["Chap-02-04-faceting.html", "6.5 Faceting", " 6.5 Faceting If we have grouping information, sometimes it can just get too much to put all of the information in a single plot, even if we use colors, shapes or line types for disambiguation. Facets are a great way to separately repeat the same kind of plot for different levels of relevant factors. The functions facet_grid and facet_wrap are used for faceting. They both expect a formula-like syntax (we have not yet introduced formulas) using the notation ~ to separate factors. The difference between these functions shows most clearly when we have more than two factors. So let’s introduce a new factor early to the avocado price data, representing whether a recorded measurement was no later than the median date or not. avocado_data_early_late &lt;- avocado_data %&gt;% mutate(early = ifelse(Date &lt;= median(Date), &quot;early&quot;, &quot;late&quot;)) Using facet_grid we get a two-dimensional grid, and we can specify along which axis of this grid the different factor levels are to range by putting the factors in the formula notation like this: row_factor ~ col_factor. avocado_data_early_late %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point(alpha = 0.3, color = &quot;skyblue&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;darkorange&quot;) + facet_grid(type ~ early) The same kind of plot realized with facet_wrap looks slightly different. The different factor level combinations are mushed together into a pair. avocado_data_early_late %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point(alpha = 0.3, color = &quot;skyblue&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;darkorange&quot;) + facet_wrap(type ~ early) Exercise 6.3: Faceting In your own words, describe what each line of the two code chunks above does. Solution For both: Defining which information should be placed on which axis. A scatter plot is created using geom_point to show data points. Furthermore, the alpha level is chosen and the color of the points is skyblue. A line is added using geom_smooth and the method lm. The color of the line is dark orange. Both geom_point and geom_smooth are currently following the mapping given at the beginning. facet_grid: Now the grid is created with facet_grid, which divides the plot into type and time (early or late). In each part of the plot, you now see the subplot, which contains only the data points that belong to the respective combination. Type and time are placed on different axes. facet_wrap: Now the grid is created with facet_wrap, which divides the plot into type and time (early or late). In each part of the plot, you now see the subplot, which contains only the data points that belong to the respective combination. Here, type and time are combined into pairs. With facet_wrap it is possible to specify the desired number of columns or rows: avocado_data_early_late %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point(alpha = 0.3, color = &quot;skyblue&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;darkorange&quot;) + facet_wrap(type ~ early, nrow = 1) "],["Chap-02-04-customization.html", "6.6 Customization etc.", " 6.6 Customization etc. There are many ways in which graphs can (and often: ought to) be tweaked further. The following can only cover a small, but hopefully useful selection. 6.6.1 Themes The general appearance of a plot is governed by its theme. There are many ready-made themes already in the ggplot package, as listed here, and there are more in several other packages. If we store a plot in a variable we can look at how different themes affect it. avocado_grid_plot &lt;- avocado_data_early_late %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point(alpha = 0.3, color = &quot;skyblue&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;darkorange&quot;) + facet_grid(type ~ early) avocado_grid_plot + theme_classic() avocado_grid_plot + theme_void() avocado_grid_plot + theme_dark() The plots in this book use the theme hrbrthemes::theme_ipsum from the hrbrthemes package as a default. You can set the default theme for all subsequent plots using a command like this: # set the &#39;void&#39; theme as global default theme_set( theme_void() ) More elaborate tweaking of a plot’s layout can be achieved by the theme function. There are many options. Some let you do crazy things: avocado_grid_plot + theme(plot.background = element_rect(fill = &quot;darkgreen&quot;)) 6.6.2 Guides When using grouped variables (by color, shape, linetype, group, …) ggplot creates a legend automatically. avocado_data %&gt;% ggplot( mapping = aes( x = log(total_volume_sold), y = average_price, color = type ) ) + geom_point(alpha = 0.5) The legend can be suppressed with the guides command. It takes as arguments the different types of grouping variables (like color, group, etc.). avocado_data %&gt;% ggplot( mapping = aes( x = log(total_volume_sold), y = average_price, color = type ) ) + geom_point(alpha = 0.5) + # no legend for grouping by color guides(color = &quot;none&quot;) 6.6.3 Axes, ticks and tick labels If you need to use a non-standard (Cartesian) axis, you can do so, e.g., by changing the \\(x\\)-axis to a log scale (with base 10): avocado_data %&gt;% ggplot( mapping = aes( x = total_volume_sold, y = average_price, color = type ) ) + geom_point(alpha = 0.5) + scale_x_log10() The scales package has a number of nice convenience functions for tweaking axis ticks (the places where axes are marked and possibly labeled) and tick labels (the labels applied to the tick marks). For example, we can add dollar signs to the price information, like so: avocado_data %&gt;% ggplot( mapping = aes( x = total_volume_sold, y = average_price, color = type ) ) + geom_point(alpha = 0.5) + scale_x_log10() + scale_y_continuous(labels = scales::dollar) 6.6.4 Labels To change any other kind of labeling information (aside from tick mark labels on axes), the labs function can be used. It is rather self-explanatory: avocado_data %&gt;% ggplot( mapping = aes( x = total_volume_sold, y = average_price, color = type ) ) + geom_point(alpha = 0.5) + scale_x_log10() + scale_y_continuous(labels = scales::dollar) + # change axis labels and plot title &amp; subtitle labs( x = &#39;Total volume sold (on a log scale)&#39;, y = &#39;Average price&#39;, title = &quot;Avocado prices plotted against the amount sold per type&quot;, subtitle = &quot;With linear regression lines&quot;, caption = &quot;This plot shows the total volume of avocados sold against the average price for many different points in time.&quot; ) 6.6.5 Combining &amp; arranging plots Presenting visual information in a tightly packed spatial arrangement can be helpful for the spectator. Everything is within a single easy saccade, so to speak. Therefore it can be useful to combine different plots into a single combined plot. The cowplot package helps with this, in particular the function cowplot::plot_grid as shown here: # create an avocado plot avocado_plot &lt;- avocado_data %&gt;% ggplot(aes(x = total_volume_sold, y = average_price)) + geom_point(alpha = 0.5) # create a BLJM bar plot BLJM_plot &lt;- data_BLJM_processed %&gt;% ggplot(aes(x = response)) + geom_bar() # combine both into one cowplot::plot_grid( # plots to combine avocado_plot, BLJM_plot, # number columns ncol = 1 ) 6.6.6 LaTeX expressions in plot labels If you are enthusiastic about LaTeX, you can also use it inside of plot labels. The latex2exp package is useful here, which provides the function latex2exp::TeX to allow you to include LaTeX formulas. Just make sure that you double all backslashes, as in the following example: avocado_data %&gt;% ggplot(aes(x = total_volume_sold, y = average_price)) + geom_point(alpha = 0.5) + labs(title = latex2exp::TeX(&quot;We can use $\\\\LaTeX$ here: $\\\\sum_{i = 0}^n \\\\alpha^i$&quot;)) Exercise 6.4: Customization Feel free to play around with customizing your previously created plots or plots that you find in this book. Try to make annotations or try out different themes and colors. It will help you understand these kinds of plots a little better. "],["Chap-03-01-probability.html", "7 Basics of Probability Theory", " 7 Basics of Probability Theory Probability is the basic ingredient of statistical inference. In this chapter, we will cover the very basics of probability theory. We will visit its axiomatic definition and some common interpretations in Section 7.1, where we also start with the main mental exercise of this section: seeing how probability distributions can be approximately represented by samples. We will cover important concepts such as joint and marginal probability in Section 7.2. This paves the way for learning about conditional probability and Bayes rule in Section 7.3. Section 7.4 introduces the notion of a random variable. Finally, Section 7.5 briefly covers how information about common probability distributions can be accessed in R. The learning goals for this chapter are: become familiar with the notion of probability and also: its axiomatic definition the notion of joint, marginal and conditional probability understand and apply Bayes rule get comfortable with random variables understand how probability distributions are approximately represented by samples become able to use R’s built-in probability distributions "],["Chap-03-01-probability-basics.html", "7.1 Probability", " 7.1 Probability Intuitively put, a probability distribution is a formal construct that captures an agent’s belief state. In Bayesian data analysis, that agent of interest is the analyst themselves or a hypothetical model of the analyst. More concretely, a probability distribution assigns numerical values (conveniently scaled to lie between 0 and 1) to a number of different contingencies, i.e., different ways the world could be. These numbers can be interpreted as the weight of belief (also referred to as “degree of credence” in the philosophical literature) that the agent assigns to each contingency: the higher the number assigned to a contingency, the more likely the agent considers this way the world could be. 7.1.1 Outcomes, events, observations To define the notion of probability, we first consider the space of relevant contingencies (ways the world could be) \\(\\Omega\\) containing all elementary outcomes \\(\\omega_1, \\omega_2, \\dots \\in \\Omega\\) of a process or an event whose execution is (partially) random or unknown. Elementary outcomes are mutually exclusive (\\(\\omega_i \\neq \\omega_j \\; \\text{for} \\,\\forall i \\neq j\\)). The set \\(\\Omega\\) exhausts all possibilities.31 Example. The set of elementary outcomes of a single coin flip is \\(\\Omega_{\\text{coin flip}} = \\left \\{ \\text{heads}, \\text{tails} \\right \\}\\). The elementary outcomes of tossing a six-sided die are \\(\\Omega_{\\text{standard die}} = \\{\\)⚀, ⚁, ⚂, ⚃, ⚄, ⚅ \\(\\}\\).32 An event \\(A\\) is a subset of \\(\\Omega\\). Think of an event as a (possibly partial) observation. We might observe, for instance, not the full outcome of tossing a die, but only that there is a dot in the middle. This would correspond to the event \\(A = \\{\\) ⚀, ⚂, ⚄ \\(\\}\\), i.e., observing an odd-numbered outcome. The trivial observation \\(A = \\Omega\\) and the impossible observation \\(A = \\emptyset\\) are counted as events, too. The latter is included for technical reasons that we don’t need to know for our purpose. For any two events \\(A, B \\subseteq \\Omega\\), standard set operations correspond to logical connectives in the usual way. For example, the conjunction \\(A \\cap B\\) is the observation of both \\(A\\) and \\(B\\); the disjunction \\(A \\cup B\\) is the observation that it is either \\(A\\) or \\(B\\); the negation of \\(A\\), \\(\\overline{A} = \\left \\{ \\omega \\in \\Omega \\mid \\omega \\not \\in A \\right \\}\\), is the observation that it is not \\(A\\). 7.1.2 Probability distributions A probability distribution \\(P\\) over \\(\\Omega\\) is a function \\(P \\ \\colon \\ \\mathfrak{P}(\\Omega) \\rightarrow \\mathbb{R}\\)33 that assigns to all events \\(A \\subseteq \\Omega\\) a real number, such that the following (so-called Kolmogorov axioms) are satisfied: A1. \\(0 \\le P(A) \\le 1\\) A2. \\(P(\\Omega) = 1\\) A3. \\(P(A_1 \\cup A_2 \\cup A_3 \\cup \\dots) = P(A_1) + P(A_2) + P(A_3) + \\dots\\) whenever \\(A_1, A_2, A_3, \\dots\\) are mutually exclusive34 Occasionally, we encounter the notation \\(P \\in \\Delta(\\Omega)\\) to express that \\(P\\) is a probability distribution over \\(\\Omega\\). (E.g., in physics, theoretical economics or game theory. Less so in psychology or statistics.) If \\(\\omega \\in \\Omega\\) is an elementary event, we often write \\(P(\\omega)\\) as a shorthand for \\(P(\\left \\{ \\omega \\right \\})\\). In fact, if \\(\\Omega\\) is finite, it suffices to assign probabilities to elementary outcomes. A number of rules follow immediately from the definition: C1. \\(P(\\emptyset) = 0\\) C2. \\(P(\\overline{A}) = 1 - P(A)\\) C3. \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\) for any \\(A, B \\subseteq \\Omega\\) Exercise 7.1 [optional] Prove C1, C2 and C3 using A1, A2 and A3. Solution C1: \\(P(\\Omega \\cup \\emptyset) = P(\\Omega) + P(\\emptyset) \\Leftrightarrow P(\\Omega) = P(\\Omega) + P(\\emptyset) \\Leftrightarrow 0 = P(\\emptyset)\\) following A3 since \\(\\Omega\\) and \\(\\emptyset\\) are mutually exclusive. C2: \\(P(\\Omega) = P(A \\cup \\overline{A}) = P(A) + P(\\overline{A}) = 1\\). C3: \\(P(A \\cup B) = P((A-B) \\cup (A \\cap B) \\cup (B-A)) = P(A-B) + P(A \\cap B) + P(B-A) = \\\\ (P(A \\cup B) - P(B)) + P(A \\cap B) + (P(A \\cup B) - P(A)) = 2 P(A \\cup B) - P(A) - P(B) + P(A \\cap B) \\\\ \\Leftrightarrow P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\) 7.1.3 Interpretations of probability It is reasonably safe to think of probability, as defined above, as a handy mathematical primitive which is useful for certain applications. There are at least three ways of thinking about where this primitive probability might come from: Frequentist: Probabilities are generalizations of intuitions/facts about frequencies of events in repeated executions of a random event. Subjectivist: Probabilities are subjective beliefs of a rational agent who is uncertain about the outcome of a random event. Realist: Probabilities are the property of an intrinsically random world. While trying to stay away from philosophical quibbles, we will adopt a subjectivist interpretation of probabilities, but note that frequentist considerations should affect what a rational agent should believe. 7.1.4 Distributions as samples No matter what your metaphysics of probability are, it is useful to realize that probability distributions can be approximately represented by sampling. Think of an urn as a container with balls of different colors with different proportions (see Figure 7.1). In the simplest case, there is a number of \\(N &gt; 1\\) balls of which \\(k &gt; 0\\) are black and \\(N-k &gt; 0\\) are white. (There are at least one black and one white ball.) For a single random draw from our urn we have: \\(\\Omega_{\\text{our urn}} = \\left \\{ \\text{white}, \\text{black} \\right \\}\\). We now draw from this urn with replacement. That is, we shake the urn, draw one ball, observe its color, take note of the color, and put it back into the urn. Each ball has the same chance of being sampled. If we imagine an infinite sequence of single draws from our urn with replacement, the limiting proportion with which we draw a black ball is \\(\\frac{k}{N}\\). This statement about frequency is what motivates saying that the probability of drawing a black ball on a single trial is (or should be35) \\(P(\\text{black}) = \\frac{k}{N}\\). Figure 7.1: An urn with seven black balls and three white balls. Imagine shaking this container, and then drawing blindly a single ball from it. If every ball has an equal probability of being drawn, what is the probability of drawing a black ball? That would be 0.7. The plot below shows how the proportion of black balls drawn from an urn like in Figure 7.1 with \\(k = 7\\) black balls and \\(N = 10\\) balls in total, gravitates to the probability 0.7 when we keep drawing and drawing. To sum this up concisely, we have a random process (drawing once from the urn) whose outcome is uncertain, and we convinced ourselves that the probability of an outcome corresponds to the relative frequency it occurs, in the limit of repeatedly executing the random process (i.e., sampling from the urn). From here, it requires only a small step to a crucial but ultimately very liberating realization. If the probability of an event occurring can be approximated by its frequency in a large sample, then we can approximately represent (say: internally in a computer) a probability distribution as one of two things: a large set of (what is called: representative) samples; or even better as an oracle (e.g., in the form of a clever algorithm) that quickly returns a representative sample. This means that, for approximately computing with probability, we can represent distributions through samples or a sample-generating function. We do not need to know precise probability or be able to express them in a mathematical formula. Samples or sampling is often enough to approximate probability distributions. Exercise 7.2 Explore how taking more or less samples affects the proportion of draws from an urn with the WebPPL code below. You can enter the number of black balls and the total number of balls for your urn. You can also enter the number of times you want to draw from your urn (with replacement - meaning that after every draw, the ball you just picked is placed back into the urn). You should execute the code several times in sequence with the same parameter values. This is because each time you run the code, another different random result will be shown. By inspecting what happens across several runs (each drawing nr_draws times from the urn), you can check the effect of varying the variable nr_draws. E.g., what happens with a low sample size, e.g., nr_draws = 20, as opposed to a large sample size, e.g., nr_draws = 100000? // how many balls are black? how many in total? var nr_black = 7 var nr_total = 10 // how many draws from the urn (with replacement)? var nr_draws = 20 ///fold: var model = function() { flip(nr_black/nr_total) == 1 ? \"black\" : \"white\" } display('Proportion of balls sampled') Infer({method: \"forward\", samples : nr_draws}, model) /// Solution With a small sample size, there is a lot of variation in the observed proportion. As the sample size gets larger and larger, the result converges to nr_black / nr_total. For simplicity of exposure, we gloss over subtleties arising when dealing with infinite sets \\(\\Omega\\). We make up for this when we define probability density functions for continuous random variables, which have an uncountably infinite number of elementary outcomes. We will usually be concerned with continuous random variables within applied statistics.↩ Think of \\(\\Omega\\) as a partition of the space of all possible ways in which the world could be, where we lump together into one partition cell (one elementary outcome) all ways in which the world could be that are equivalent regarding those aspects of reality that we are interested in. We do not care whether the coin lands in the mud or in the sand. It only matters whether it came up heads or tails. Each elementary event can be realized in myriad ways. \\(\\Omega\\) is our, the modelers’, first crude simplification of nature, abstracting away aspects we currently do not care about.↩ For any of you who are interested in the precise mathematical description of probability space, \\(\\mathfrak{P}(\\Omega)\\) is called Borel set. It is important since probabilities can only be defined for measurable sets.↩ A3 is the axiom of countable additivity. Finite additivity may be enough for finite or countable sets \\(\\Omega\\), but infinite additivity is necessary for full generality in the uncountable case.↩ If probabilities are subjective beliefs, a rational agent is, in a sense, normatively required to assign exactly this probability.↩ "],["Chap-03-01-probability-marginal.html", "7.2 Structured events &amp; marginal distributions", " 7.2 Structured events &amp; marginal distributions The single urn scenario of the last section is a very basic first example. To pave the way for learning about conditional probability and Bayes rule in the next sections, let us consider a slightly more complex example. We call it the flip-and-draw scenario. 7.2.1 Probability table for a flip-and-draw scenario Suppose we have two urns. Both have \\(N=10\\) balls. Urn 1 has \\(k_1=2\\) black and \\(N-k_1 = 8\\) white balls. Urn 2 has \\(k_2=4\\) black and \\(N-k_2=6\\) white balls. We sometimes draw from urn 1, sometimes from urn 2. To decide from which urn a ball should be drawn, we flip a fair coin. If it comes up heads, we draw from urn 1; if it comes up tails, we draw from urn 2. The process is visualized in Figure 7.2 below. An elementary outcome of this two-step process of flip-and-draw is a pair \\(\\langle \\text{outcome-flip}, \\text{outcome-draw} \\rangle\\). The set of all possible such outcomes is: \\[\\Omega_{\\text{flip-and-draw}} = \\left \\{ \\langle \\text{heads}, \\text{black} \\rangle, \\langle \\text{heads}, \\text{white} \\rangle, \\langle \\text{tails}, \\text{black} \\rangle, \\langle \\text{tails}, \\text{white} \\rangle \\right \\}\\,.\\] The probability of event \\(\\langle \\text{heads}, \\text{black} \\rangle\\) is given by multiplying the probability of seeing “heads” on the first flip, which happens with probability \\(0.5\\), and then drawing a black ball, which happens with probability \\(0.2\\), so that \\(P(\\langle \\text{heads}, \\text{black} \\rangle) = 0.5 \\times 0.2 = 0.1\\). The probability distribution over \\(\\Omega_{\\text{flip-draw}}\\) is consequently as in Table 7.1. (If in doubt, start flipping &amp; drawing and count your outcomes or use the WebPPL code box in the exercise below to simulate flips-and-draws.) Table 7.1: Joint probability table for the flip-and-draw scenario heads tails black \\(0.5 \\times 0.2 = 0.1\\) \\(0.5 \\times 0.4 = 0.2\\) white \\(0.5 \\times 0.8 = 0.4\\) \\(0.5 \\times 0.6 = 0.3\\) Figure 7.2: The flip-and-draw scenario, with transition and full path probabilities. 7.2.2 Structured events and joint-probability distributions Table 7.1 is an example of a joint probability distribution over a structured event space, which here has two dimensions. Since our space of outcomes is the Cartesian product of two simpler outcome spaces, namely \\(\\Omega_{flip\\text{-}\\&amp;\\text{-}draw} = \\Omega_{flip} \\times \\Omega_{draw}\\),36 we can use notation \\(P(\\text{heads}, \\text{black})\\) as shorthand for \\(P(\\langle \\text{heads}, \\text{black} \\rangle)\\). More generally, if \\(\\Omega = \\Omega_1 \\times \\dots \\Omega_n\\), we can think of \\(P \\in \\Delta(\\Omega)\\) as a joint probability distribution over \\(n\\) subspaces. 7.2.3 Marginalization If \\(P\\) is a joint probability distribution over event space \\(\\Omega = \\Omega_1 \\times \\dots \\Omega_n\\), the marginal distribution over subspace \\(\\Omega_i\\), \\(1 \\le i \\le n\\) is the probability distribution that assigns to all \\(A_i \\subseteq \\Omega_i\\) the probability (where notation \\(P(\\dots, \\omega, \\dots )\\) is shorthand for \\(P(\\dots, \\{\\omega \\}, \\dots)\\)):37 \\[ \\begin{align*} P(A_i) &amp; = \\sum_{\\omega_1 \\in \\Omega_{1}} \\sum_{\\omega_2 \\in \\Omega_{2}} \\dots \\sum_{\\omega_{i-1} \\in \\Omega_{i-1}} \\sum_{\\omega_{i+1} \\in \\Omega_{i+1}} \\dots \\sum_{\\omega_n \\in \\Omega_n} P(\\omega_1, \\dots, \\omega_{i-1}, A_{i}, \\omega_{i+1}, \\dots \\omega_n) \\end{align*} \\] For example, the marginal distribution of draws derivable from Table 7.1 has \\(P(\\text{black}) = P(\\text{heads, black}) + P(\\text{tails, black}) = 0.3\\) and \\(P(\\text{white}) = 0.7\\).38 The marginal distribution of coin flips derivable from the joint probability distribution in Table 7.1 gives \\(P(\\text{heads}) = P(\\text{tails}) = 0.5\\), since the sum of each column is exactly \\(0.5\\). Exercise 7.3 Given the following joint probability table, compute the probability that a student does not attend the lecture, i.e., \\(P(\\text{miss})\\). attend miss rainy 0.1 0.6 dry 0.2 0.1 Solution \\(P(\\text{miss}) = P(\\text{miss, rainy}) + P(\\text{miss, dry}) = 0.6 + 0.1 = 0.7\\) Play around with the following WebPPL implementation of the flip-and-draw scenario. Change the ‘input values’ of the coin’s bias and the probabilities of sampling a black ball from either urn. Inspect the resulting joint probability tables and the marginal distribution of observing “black”. Try to find at least three different parameter settings that result in the marginal probability of black being 0.7. // you can play around with the values of these variables var coin_bias = 0.5 // coin bias var prob_black_urn_1 = 0.2 // probability of drawing \"black\" from urn 1 var prob_black_urn_2 = 0.4 // probability of drawing \"black\" from urn 2 ///fold: // convenience function for showing nicer tables var condProb2Table = function(condProbFct, row_names, col_names, precision){ var matrix = map(function(row) { map(function(col) { _.round(Math.exp(condProbFct.score({\"coin\": row, \"ball\": col})),precision)}, col_names)}, row_names) var max_length_col = _.max(map(function(c) {c.length}, col_names)) var max_length_row = _.max(map(function(r) {r.length}, row_names)) var header = _.repeat(\" \", max_length_row + 2)+ col_names.join(\" \") + \"\\n\" var row = mapIndexed(function(i,r) { _.padEnd(r, max_length_row, \" \") + \" \" + mapIndexed(function(j,c) { _.padEnd(matrix[i][j], c.length+2,\" \")}, col_names).join(\"\") + \"\\n\" }, row_names).join(\"\") return header + row } // flip-and-draw scenario model var model = function() { var coin_flip = flip(coin_bias) == 1 ? \"heads\" : \"tails\" var prob_black_selected_urn = coin_flip == \"heads\" ? prob_black_urn_1 : prob_black_urn_2 var ball_color = flip(prob_black_selected_urn) == 1 ? \"black\" : \"white\" return({coin: coin_flip, ball: ball_color}) } // infer model and display as (custom-made) table var inferred_model = Infer({method: 'enumerate'}, model) display(\"Joint probability table\") display(condProb2Table(inferred_model, [\"tails\", \"heads\"], [\"white\", \"black\"], 3)) display(\"\\nMarginal probability of ball color\") viz(marginalize(inferred_model, function(x) {return x.ball})) /// Solution Three possibilities for obtaining a value of 0.7 for the marginal probability of “black”: prob_black_urn_1 = prob_black_urn_2 = 0.7 coin_bias = 1 and prob_black_urn_1 = 0.7 coin_bias = 0.5, prob_black_urn_1 = 0.8 and prob_black_urn_2 = 0.6 With \\(\\Omega_{\\text{flip}} = \\left \\{ \\text{heads}, \\text{tails} \\right \\}\\) and \\(\\Omega_{\\text{draw}} = \\left \\{ \\text{black}, \\text{white} \\right \\}\\).↩ This notation, using \\(\\sum\\), assumes that subspaces are countable. In other cases, a parallel definition with integrals can be used.↩ The term “marginal distribution” derives from such probability tables, where traditionally the sum of each row/column was written in the margins.↩ "],["Chap-03-01-probability-conditional.html", "7.3 Conditional probability", " 7.3 Conditional probability Let us assume probability distribution \\(P \\in \\Delta(\\Omega)\\) and that events \\(A,B \\subseteq \\Omega\\) are given. The conditional probability of \\(A\\) given \\(B\\), written as \\(P(A \\mid B)\\), gives the probability of \\(A\\) on the assumption that \\(B\\) is true.39 It is defined like so: \\[P(A \\mid B) = \\frac{P(A \\cap B)}{P(B)}\\] Conditional probabilities are only defined when \\(P(B) &gt; 0\\).40 Example. If a die is unbiased, each of its six faces has equal probability to come up after a toss. The probability of event \\(B = \\{\\) ⚀, ⚂, ⚄ \\(\\}\\) that the tossed number is odd has probability \\(P(B) = \\frac{1}{2}\\). The probability of event \\(A = \\{\\) ⚂, ⚃, ⚄, ⚅ \\(\\}\\) that the tossed number is bigger than two is \\(P(A) = \\frac{2}{3}\\). The probability that the tossed number is bigger than two and odd is \\(P(A \\cap B) = P(\\{\\) ⚂, ⚄ \\(\\}) = \\frac{1}{3}\\). The conditional probability of tossing a number that is bigger than two, when we know that the toss is odd, is \\(P(A \\mid B) = \\frac{1 / 3}{1 / 2} = \\frac{2}{3}\\). Algorithmically, conditional probability first rules out all events in which \\(B\\) is not true and then simply renormalizes the probabilities assigned to the remaining events in such a way that their relative probabilities remain unchanged. Given this, another way of interpreting conditional probability is that \\(P(A \\mid B)\\) is what a rational agent should believe about \\(A\\) after observing (nothing more than) that \\(B\\) is true. The agent rules out, possibly hypothetically, that \\(B\\) is false, but otherwise does not change opinion about the relative probabilities of anything that is compatible with \\(B\\). This is also explained in the video embedded below. 7.3.1 Bayes rule Looking back at the joint-probability distribution in Table 7.1, the conditional probability \\(P(\\text{black} \\mid \\text{heads})\\) of drawing a black ball, given that the initial coin flip showed heads, can be calculated as follows: \\[ P(\\text{black} \\mid \\text{heads}) = \\frac{P(\\text{black} , \\text{heads})}{P(\\text{heads})} = \\frac{0.1}{0.5} = 0.2 \\] This calculation, however, is quite excessive. We can read out the conditional probability directly already from the way the flip-and-draw scenario was set up. After flipping heads, we draw from urn 1, which has \\(k=2\\) out of \\(N=10\\) black balls, so clearly: if the initial flip comes up heads, then the probability of a black ball is \\(0.2\\). Indeed, in a step-wise random generative process like the flip-and-draw scenario, some conditional probabilities are very clear, and sometimes given by definition. These are, usually, the conditional probabilities that define how the process unfolds forward in time, so to speak. Bayes rule is a way of expressing, in a manner of speaking, conditional probabilities in terms of the “reversed” conditional probabilities: \\[P(B \\mid A) = \\frac{P(A \\mid B) \\times P(B)}{P(A)}\\] Bayes rule is a straightforward corollary of the definition of conditional probabilities, according to which \\(P(A \\cap B) = P(A \\mid B) \\times P(B)\\), so that: \\[ P(B \\mid A) = \\frac{P(A \\cap B)}{P(A)} = \\frac{P(A \\mid B) \\times P(B)}{P(A)} \\] Bayes rule allows for reasoning backward from observed causes to likely underlying effects. When we have a feed-forward model of how unobservable effects probabilistically constrain observable outcomes, Bayes rule allows us to draw inferences about latent/unobservable variables based on the observation of their downstream effects. Consider yet again the flip-and-draw scenario. But now assume that Jones flipped the coin and drew a ball. We see that it is black. What is the probability that it was drawn from urn 1, or equivalently, that the coin landed heads? It is not \\(P(\\text{heads}) = 0.5\\), the so-called prior probability of the coin landing heads. It is a conditional probability, also called the posterior probability,41 namely \\(P(\\text{heads} \\mid \\text{black})\\). But it is not as easy and straightforward to write down as the reverse probability \\(P(\\text{black} \\mid \\text{heads})\\) of which we said above that it is an almost trivial part of the set up of the flip-and-draw scenario. It is here that Bayes rule has its purpose: \\[ P(\\text{heads} \\mid \\text{black}) = \\frac{P(\\text{black} \\mid \\text{heads}) \\times P(\\text{heads})}{P(\\text{black})} = \\frac{0.2 \\times 0.5}{0.3} = \\frac{1}{3} \\] This result is quite intuitive. Drawing a black ball from urn 2 (i.e., after seeing tails) is twice as likely as drawing a black ball from urn 1 (i.e., after seeing heads). Consequently, after seeing a black ball drawn, with equal probabilities of heads and tails, the probability that the coin landed tails is also twice as large as that it landed heads. Exercise 7.4 Play around with the following WebPPL implementation of the flip-and-draw scenario, which calculates the posterior distribution over coin flip outcomes given that we observed the draw of a black ball. Change the parameters of the scenario and try to build intuitions about how your changes will affect the resulting posterior distribution. // you can play around with the values of these variables var coin_bias = 0.5 // coin bias var prob_black_urn_1 = 0.2 // probability of drawing \"black\" from urn 1 var prob_black_urn_2 = 0.4 // probability of drawing \"black\" from urn 2 ///fold: // flip-and-draw scenario model var model = function() { var coin_flip = flip(coin_bias) == 1 ? \"heads\" : \"tails\" var prob_black_selected_urn = coin_flip == \"heads\" ? prob_black_urn_1 : prob_black_urn_2 var ball_color = flip(prob_black_selected_urn) == 1 ? \"black\" : \"white\" condition(ball_color == \"black\") return({coin: coin_flip}) } // infer model and display as (custom-made) table var inferred_model = Infer({method: 'enumerate'}, model) viz(inferred_model) /// Solution Three possibilities for obtaining a value of 0.7 for the marginal probability of “black”: prob_black_urn_1 = prob_black_urn_2 = 0.7 coin_bias = 1 and prob_black_urn_1 = 0.7 coin_bias = 0.5, prob_black_urn_1 = 0.8 and prob_black_urn_2 = 0.6 Suppose that we know that around 6% of the population has statisticositis, a rare disease that makes you allergic to fallacious statistical reasoning. A new test has been developed to diagnose statisticositis but it is not infallible. The specificity of the test (the test result is negative when the subject really does not have statisticositis) is 98%. The sensitivity of the test (the test result is positive when the subject really does have statisticositis) is 95%. When you take this test and it gives a negative test result, how likely is it that you do not have statisticositis? Solution First, let’s abbreviate the test result being negative or positive as \\(\\overline{T}\\) and \\(T\\) and actual statisticositis as \\(\\overline{S}\\) and \\(S\\). We want to calculate \\(P(\\overline{S} \\mid \\overline{T})\\). According to Bayes rule, \\(P(\\overline{S} \\mid \\overline{T}) = \\frac{P(\\overline{T} \\mid \\overline{S}) P(\\overline{S})} {P(\\overline{T})}\\). We are given that \\(P(\\overline{T} \\mid \\overline{S}) = 0.98\\), \\(P(\\overline{T} \\mid S) = 1 - P(T \\mid S) = 0.05\\) and \\(P(\\overline{S}) = 1 - P(S) = 0.94\\). Furthermore, \\(P(\\overline{T}) = P(\\overline{T},S) + P(\\overline{T},\\overline{S}) = P(\\overline{T} \\mid S) P(S) + P(\\overline{T} \\mid \\overline{S}) P(\\overline{S}) = 0.9242\\). Putting this all together, we get \\(P(\\overline{S} \\mid \\overline{T}) \\approx 99.7 \\%\\). So, given a negative test result, you can be pretty certain that you do not have statisticositis. Check out this website for more details on these calculations in the context of a more serious application. Excursion: Bayes rule for data analysis In later chapters, we will use Bayes rule for data analysis. The flip-and-draw scenario structurally “reflects” what will happen later. Think of the color of the ball drawn as the data \\(D\\) which we observe. Think of the coin as a latent parameter \\(\\theta\\) of a statistical model. Bayes rule for data analysis then looks like this: \\[P(\\theta \\mid D) = \\frac{P(D \\mid \\theta) \\times P(\\theta)}{P(D)}\\] We will discuss this at length in Chapter 8 and thereafter. 7.3.2 Stochastic (in-)dependence Event \\(A\\) is stochastically independent of \\(B\\) if, intuitively speaking, learning \\(B\\) does not change one’s beliefs about \\(A\\), i.e., \\(P(A \\mid B) = P(A)\\). If \\(A\\) is stochastically independent of \\(B\\), then \\(B\\) is stochastically independent of \\(A\\) because: \\[ \\begin{aligned} P(B \\mid A) &amp; = \\frac{P(A \\mid B) \\ P(B)}{P(A)} &amp;&amp; \\text{[Bayes rule]} \\\\ &amp; = \\frac{P(A) \\ P(B)}{P(A)} &amp;&amp; \\text{[by ass. of independence]} \\\\ &amp; = P(B) &amp;&amp; \\text{[cancellation]} \\\\ \\end{aligned} \\] For example, imagine a flip-and-draw scenario where the initial coin flip has a bias of \\(0.8\\) towards heads, but each of the two urns has the same number of black balls, namely \\(3\\) black and \\(7\\) white balls. Intuitively and formally, the probability of drawing a black ball is then independent of the outcome of the coin flip; learning that the coin landed heads, does not change our beliefs about how likely the subsequent draw will result in a black ball. The probability table for this example is in Table 7.2. Table 7.2: Joint probability table for a flip-and-draw scenario where the coin has a bias of \\(0.8\\) towards heads and where each of the two urns holds \\(3\\) black and \\(7\\) white balls. heads tails \\(\\Sigma\\) rows black \\(0.8 \\times 0.3 = 0.24\\) \\(0.2 \\times 0.3 = 0.06\\) 0.3 white \\(0.8 \\times 0.7 = 0.56\\) \\(0.2 \\times 0.7 = 0.14\\) 0.7 \\(\\Sigma\\) columns 0.8 0.2 1.0 Independence shows in Table 7.2 in the fact that the probability in each cell is the product of the two marginal probabilities. This is a direct consequence of stochastic independence: Proposition 7.1 (Probability of conjunction of stochastically independent events) For any pair of events \\(A\\) and \\(B\\) with non-zero probability: \\[P(A \\cap B) = P(A) \\ P(B) \\, \\ \\ \\ \\ \\text{[if } A \\text{ and } B \\text{ are stoch. independent]} \\] Show proof. Proof. By assumption of independence, it holds that \\(P(A \\mid B) = P(A)\\). But then: \\[ \\begin{aligned} P(A \\cap B) &amp; = P(A \\mid B) \\ P(B) &amp;&amp; \\text{[def. of conditional probability]} \\\\ &amp; = P(A) \\ P(B) &amp;&amp; \\text{[by ass. of independence]} \\end{aligned} \\]   We also verbalize this as “the conditional probability of \\(A\\) conditioned on \\(B\\).”↩ Updating with events that have probability zero entails far more severe adjustments of the underlying belief system than just ruling out information hitherto considered possible. Formal systems that capture such belief revision are studied in formal epistemology. Halpern (2003) gives a good comprehensive treatment.↩ The terms prior and posterior make sense when we think about an agent’s belief state before (prior to) and after (posterior to) an observation.↩ "],["Chap-03-01-probability-random-variables.html", "7.4 Random variables", " 7.4 Random variables So far, we have defined a probability distribution as a function that assigns a probability to each subset of the space \\(\\Omega\\) of elementary outcomes. We saw that rational beliefs should conform to certain axioms, reflecting a “logic of rational beliefs”. But in data analysis, we are often interested in a space of numeric outcomes. You probably know stuff like the “normal distribution” which is a distribution that assigns a probability to each real number. In keeping with our previous definition of probability as targeting a measurable set \\(\\Omega\\), we introduce what we could sloppily call “probability distributions over numbers” using the concept of random variables. Caveat: random variables are very useful concepts and offer highly versatile notation, but both concept and notation can be elusive in the beginning. Formally, a random variable is a function \\(X \\ \\colon \\ \\Omega \\rightarrow \\mathbb{R}\\) that assigns to each elementary outcome a numerical value. It is reasonable to think of this number as a summary statistic: a number that captures one aspect of relevance of what is actually a much more complex chunk of reality. Example. For a single coin flip, we have \\(\\Omega_{\\text{coin flip}} = \\left \\{ \\text{heads}, \\text{tails} \\right \\}\\). A usual way of mapping this onto numerical outcomes is to define \\(X_{\\text{coin flip}} \\ \\colon \\ \\text{heads} \\mapsto 1; \\text{tails} \\mapsto 0\\). Less trivially, consider flipping a coin two times. Elementary outcomes should be individuated by the outcome of the first flip and the outcome of the second flip, so that we get: \\[ \\Omega_{\\text{two flips}} = \\left \\{ \\langle \\text{heads}, \\text{heads} \\rangle, \\langle \\text{heads}, \\text{tails} \\rangle, \\langle \\text{tails}, \\text{heads} \\rangle, \\langle \\text{tails}, \\text{tails} \\rangle \\right \\} \\] Consider the random variable \\(X_{\\text{two flips}}\\) that counts the total number of heads. Crucially, \\(X_{\\text{two flips}}(\\langle \\text{heads}, \\text{tails} \\rangle) = 1 = X_{\\text{two flips}}(\\langle \\text{tails}, \\text{heads} \\rangle)\\). We assign the same numerical value to different elementary outcomes since the order is not relevant if we are only interested in a count of the number of heads. 7.4.1 Notation &amp; terminology Traditionally, random variables are represented by capital letters, like \\(X\\). The numeric values they take on are written as small letters, like \\(x\\). We write \\(P(X = x)\\) as a shorthand for the probability \\(P(\\left \\{ \\omega \\in \\Omega \\mid X(\\omega) = x \\right \\})\\), that an event \\(\\omega\\) occurs which is mapped onto \\(x\\) by the random variable \\(X\\). For example, if our coin is fair, then \\(P(X_{\\text{two flips}} = x) = 0.5\\) for \\(x=1\\) and \\(0.25\\) for \\(x \\in \\{0,2\\}\\). Similarly, we can also write \\(P(X \\le x)\\) for the probability of observing any event that \\(X\\) maps to a number not bigger than \\(x\\). If the range of \\(X\\) is countable (not necessarily finite), we say that \\(X\\) is discrete. For ease of exposition, we may say that if the range of \\(X\\) is an interval of real numbers, \\(X\\) is called continuous. 7.4.2 Cumulative distribution functions, mass &amp; density For a discrete random variable \\(X\\), the cumulative distribution function \\(F_X\\) associated with \\(X\\) is defined as: \\[ F_X(x) = P(X \\le x) = \\sum_{x&#39; \\in \\left \\{ \\text{Rng}(X) \\mid x&#39; \\le x \\right \\}} P(X = x) \\] The probability mass function \\(f_x\\) associated with \\(X\\) is defined as: \\[ f_X(x) = P(X = x) \\] Example. Suppose we flip a coin with a bias of \\(\\theta\\) towards heads \\(n\\) times. What is the probability that we will see heads \\(k\\) times? If we map the outcome of heads to 1 and tails to 0, this probability is given by the Binomial distribution, as follows: \\[ \\text{Binom}(K = k ; n, \\theta) = \\binom{n}{k} \\, \\theta^{k} \\, (1-\\theta)^{n-k} \\] Here \\(\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\) is the binomial coefficient, which gives the number of possibilities of drawing an unordered subset with \\(k\\) elements from a set with a total of \\(n\\) elements. Figure 7.3 gives examples of the Binomial distribution, concretely its probability mass functions, for two values of the coin’s bias, \\(\\theta = 0.25\\) or \\(\\theta = 0.5\\), when flipping the coin \\(n=24\\) times. Figure 7.4 gives the corresponding cumulative distributions. Figure 7.3: Examples of the Binomial distribution. The \\(y\\)-axis gives the probability of seeing \\(k\\) heads when flipping a coin \\(n=24\\) times with a bias of either \\(\\theta = 0.25\\) or \\(\\theta = 0.5\\). Figure 7.4: Examples of the cumulative distribution of the Binomial distribution. The \\(y\\)-axis gives the probability of seeing \\(k\\) or fewer outcomes of heads when flipping a coin \\(n=24\\) times with a bias of either \\(\\theta = 0.25\\) or \\(\\theta = 0.5\\). For a continuous random variable \\(X\\), the probability \\(P(X = x)\\) will usually be zero: it is virtually impossible that we will see precisely the value \\(x\\) realized in a random event that can realize uncountably many numerical values of \\(X\\). However, \\(P(X \\le x)\\) does usually take non-zero values and so we define the cumulative distribution function \\(F_X\\) associated with \\(X\\) as: \\[ F_X(x) = P(X \\le x) \\] Instead of a probability mass function, we derive a probability density function from the cumulative function as: \\[ f_X(x) = F&#39;(x) \\] A probability density function can take values greater than one, unlike a probability mass function. Example. The Gaussian (Normal) distribution characterizes many natural distributions of measurements which are symmetrically spread around a central tendency. It is defined as: \\[ \\mathcal{N}(X = x ; \\mu, \\sigma) = \\frac{1}{\\sqrt{2 \\sigma^2 \\pi}} \\exp \\left ( - \\frac{(x-\\mu)^2}{2 \\sigma^2} \\right) \\] where parameter \\(\\mu\\) is the mean, the central tendency, and parameter \\(\\sigma\\) is the standard deviation. Figure 7.5 gives examples of the probability density function of two normal distributions. Figure 7.6 gives the corresponding cumulative distribution functions. Figure 7.5: Examples of the Normal distribution. In both cases \\(\\mu = 0\\), once with \\(\\sigma = 1\\) and once with \\(\\sigma = 4\\). Figure 7.6: Examples of the cumulative normal distribution corresponding to the previous probability density functions. 7.4.3 Expected value &amp; variance The expected value of a random variable \\(X\\) is a measure of central tendency. It tells us, like the name suggests, which average value of \\(X\\) we can expect when repeatedly sampling from \\(X\\). If \\(X\\) is discrete, the expected value is: \\[ \\mathbb{E}_X = \\sum_{x} x \\times f_X(x) \\] If \\(X\\) is continuous, it is: \\[ \\mathbb{E}_X = \\int x \\times f_X(x) \\ \\text{d}x \\] The expected value is also frequently called the mean. The variance of a random variable \\(X\\) is a measure of how much likely values of \\(X\\) are spread or clustered around the expected value. If \\(X\\) is discrete, the variance is: \\[ \\text{Var}(X) = \\sum_x (\\mathbb{E}_X - x)^2 \\times f_X(x) = \\mathbb{E}_{X^2} -\\mathbb{E}_X^2 \\] If \\(X\\) is continuous, it is: \\[ \\text{Var}(X) = \\int (\\mathbb{E}_X - x)^2 \\times f_X(x) \\ \\text{d}x = \\mathbb{E}_{X^2} -\\mathbb{E}_X^2 \\] Example. If we flip a coin with bias \\(\\theta = 0.25\\) a total of \\(n=24\\) times, we expect on average to see \\(n \\times\\theta = 24 \\times 0.25 = 6\\) outcomes showing heads.42 The variance of a binomially distributed variable is \\(n \\times\\theta \\times(1-\\theta) = 24 \\times 0.25 \\times 0.75 = \\frac{24 \\times 3}{16} = \\frac{18}{4} = 4.5\\). The expected value of a normal distribution is just its mean \\(\\mu\\) and its variance is \\(\\sigma^2\\). Exercise 7.5 Compute the expected value and variance of a fair die. Solution expected_value &lt;- 1*(1/6) + 2*(1/6) + 3*(1/6) + 4*(1/6) + 5*(1/6) + 6*(1/6) variance &lt;- 1^2*(1/6) + 2^2*(1/6) + 3^2*(1/6) + 4^2*(1/6) + 5^2*(1/6) + 6^2*(1/6) - expected_value^2 print(expected_value) ## [1] 3.5 variance ## [1] 2.916667 Below, you see several normal distributions with differing means \\(\\mu\\) and standard deviations \\(\\sigma\\). The red, unnumbered distribution is the so-called standard normal distribution; it has a mean of 0 and a standard deviation of 1. Compare each distribution below (1-4) to the standard normal distribution and think about how the parameters of the standard normal were changed. Also, think about which distribution (1-4) has the smallest/largest mean and the smallest/largest standard deviation. Solution Distribution 1 (\\(\\mu\\) = 5, \\(\\sigma\\) = 1): larger mean, same standard deviation Distribution 2 (\\(\\mu\\) = 0, \\(\\sigma\\) = 3): same mean, larger standard deviation Distribution 3 (\\(\\mu\\) = 6, \\(\\sigma\\) = 2): larger mean, larger standard deviation Distribution 4 (\\(\\mu\\) = -6, \\(\\sigma\\) = 0.5): smaller mean, smaller standard deviation 7.4.4 Composite random variables Composite random variables are random variables generated by mathematical operations conjoining other random variables. For example, if \\(X\\) and \\(Y\\) are random variables, then we can define a new derived random variable \\(Z\\) using notation like: \\[Z = X + Y\\] This notation looks innocuous but is conceptually tricky yet ultimately very powerful. On the face of it, we are doing as if we are using + to add two functions. But a sampling-based perspective makes this quite intuitive. We can think of \\(X\\) and \\(Y\\) as large samples, representing the probability distributions in question. Then we build a sample by just adding elements in \\(X\\) and \\(Y\\). (If samples are of different size, just add a random element of \\(Y\\) to each \\(X\\).) Consider the following concrete example. \\(X\\) is the probability distribution of rolling a fair dice with six sides. \\(Y\\) is the probability distribution of flipping a biased coin that lands heads (represented as number 1) with probability 0.75. The derived probability distribution \\(Z = X + Y\\) can be approximately represented by samples derived as follows: n_samples &lt;- 1e6 # `n_samples` rolls of a fair dice samples_x &lt;- sample( 1:6, size = n_samples, replace = T ) # `n_samples` flips of a biased coin samples_y &lt;- sample( c(0, 1), prob = c(0.25, 0.75), size = n_samples, replace = T ) samples_z &lt;- samples_x + samples_y tibble(outcome = samples_z) %&gt;% dplyr::count(outcome) %&gt;% mutate(n = n / sum(n)) %&gt;% ggplot(aes(x = outcome, y = n)) + geom_col() + labs(y = &quot;proportion&quot;) This is not immediately obvious from our definition, but it is intuitive and you can derive it.↩ "],["Chap-03-01-probability-R.html", "7.5 Probability distributions in R", " 7.5 Probability distributions in R Appendix B covers a number of common probability distributions that are relevant for the purposes of this course. Appendix C furthermore provides additional theoretical background on the exponential family, an important class of probability distributions widely used in statistics. R has built-in functions for most common probability distributions. Further distributions are covered in additional packages. If mydist is the name of a probability distribution, then R routinely offers four functions for mydist, distinguished by the first letter: dmydist(x, ...) the density function gives the probability (mass/density) \\(f(x)\\) for x pmydist(x, ...) the cumulative probability function gives the cumulative distribution function \\(F(x)\\) for x qmydist(p, ...) the quantile function gives the value x for which p = pmydist(x, ...) rmydist(n, ...) the random sample function returns n samples from the distribution For example, the family of functions for the normal distribution has the following functions: # density of standard normal at x = 1 dnorm(x = 1, mean = 0, sd = 1) ## [1] 0.2419707 # cumulative density of standard normal at q = 0 pnorm(q = 0, mean = 0, sd = 1) ## [1] 0.5 # point where the cumulative density of standard normal is p = 0.5 qnorm(p = 0.5, mean = 0, sd = 1) ## [1] 0 # n = 3 random samples from a standard normal rnorm(n = 3, mean = 0, sd = 1) ## [1] 0.06999783 2.53124310 0.50885834 Exercise 7.6 Use R to compute the median of the exponential distribution with rate \\(\\lambda = 1\\). Remember that the median is the 50% quantile. The quantile function of the exponential distribution can be accessed with qexp in R. Solution qexp(0.5, rate = 1) ## [1] 0.6931472 Use R’s function for the cumulative normal distribution (see above) to compute this integral, i.e., the area under the density function of a standard normal distribution ranging from -1 to 2: \\[ \\int_{-1}^{2} \\mathcal{N}(x, \\mu = 0, \\sigma = 1) \\text{d}x \\] Solution pnorm(2, mean = 0, sd = 1) - pnorm(-1, mean = 0, sd = 1) ## [1] 0.8185946 "],["Chap-03-03-models.html", "8 Statistical models", " 8 Statistical models Uninterpreted data is uninformative. We cannot generalize, draw inferences or attempt to make predictions unless we make (however minimal) assumptions about the data at hand: what it represents, how it came into existence, which parts relate to which other parts, etc. One way of explicitly acknowledging these assumptions is to engage in model-based data analysis. A statistical model is a conventionally condensed formal representation of the assumptions we make about what the data is and how it might have been generated. In this way, model-based data analysis is more explicit about the analyst’s assumptions than other approaches, such as test-based approaches, which we will encounter in Chapter 16. There is room for divergence in how to think about a statistical model, the assumptions it encodes and the truth. Some will want to reason with models using language like “if we assume that model \\(M\\) is true, then …” or “this shows convincingly that \\(M\\) is likely to be the true model”. Others feel very uncomfortable with such language. In times of heavy discomfort they might repeat their soothing mantra: All models are wrong, but some are useful. — Box (1979) To become familiar with model-based data analysis, Section 8.1 introduces the concept of a probabilistic statistical model. Section 8.2 expands on the notation, both formulaic and graphical, which we will use in this book to communicate about models. Finally, Section 8.3 enlarges on the crucial aspects of parameters and priors. The learning goals for this chapter are: become familiar with the notion of a (Bayesian) statistical model understand the key ingredients of a model: likelihood function, parameters, prior, prior distribution understand notation to communicate models formulas &amp; graphs References "],["Chap-03-03-models-general.html", "8.1 Statistical models", " 8.1 Statistical models In its most common natural sense, a “model” is a model of something. It intends to represent something else in a condensed, abstract, and more practical form; where what is practical is conditioned by a given purpose. For any given purpose, a good model will try to represent some aspects of reality and abstract away from irrelevant features that might otherwise blur our vision. The most common purpose of a statistical model is to either learn something about reality by drawing inferences from data - possibly with the ulterior goal of making an informed practical decision - or to make predictions about unknown events (future, present or past unknowns). A statistical model \\(M\\) is a model of a random process \\(R\\) that could have generated some kind of observable data that we are interested in.43 The model \\(M\\) is then a formally precise formulation of our assumptions about this random process \\(R\\). Often, we want to explain some part of our data observations, the dependent variable(s) \\(D_{\\text{DV}}\\), in terms of some other observations, the independent variables \\(D_{\\text{IV}}\\) (see Chapter 3.3 for more on the notion of (in-)dependent variables). But it is also possible that there are no independent variables in terms of which we would like to model the dependent variable \\(D_{\\text{DV}}\\). A model \\(M\\) for data \\(D\\) fixes a likelihood function for \\(D_\\text{DV}\\). The likelihood function determines how likely any potential data observation \\(D_\\text{DV}\\) is, given the corresponding observations in \\(D_\\text{IV}\\). Most often, the likelihood function also has free parameters, represented by a parameter vector \\(\\theta\\). The basic (and yet rather uninformative) notation for a likelihood function of model \\(M\\) for data \\(D\\) with parameter vector \\(\\theta\\) is therefore:44 \\[ P_M(D_\\text{DV} \\mid D_\\text{IV}, \\theta) \\] Bayesian models have an additional component, namely a prior distribution over parameter values, commonly written as: \\[ P_M(\\theta) \\]. The Bayesian prior over parameter values can be used to regularize inference and/or to represent any motivated and justifiable a priori assumptions about parameter values that are plausible given our knowledge so far. Section 8.3 elaborates on parameters and priors. But first, we should take a look at an example, which we will use in the remainder of this chapter for further illustration. Example: Binomial Model. The data we are interested in comes from a sequence of flips of a coin with bias \\(\\theta_c \\in [0;1]\\). We have observed that \\(k\\) of the \\(N\\) flips turned out to be heads. We know \\(N\\) and \\(k\\), but we do not know \\(\\theta_c\\). We will use the Binomial Model in later sections to infer the latent (= not directly observable) coin bias \\(\\theta_c\\). The coin’s bias \\(\\theta_c\\) is the only parameter of this model. The dependent variable is \\(k\\). \\(N\\) is another data observation (treated here as an independent variable45). The likelihood function for this model is the Binomial distribution: \\[ P_M(k \\mid \\theta_c, N) = \\text{Binomial}(k, N, \\theta_c) = \\binom{N}{k}\\theta_c^k(1-\\theta_c)^{N-k} \\] For reasons that will become clear later, we use a Beta distribution for the prior of \\(\\theta_c\\). For example, we can use parameters so that the ensuing distribution is flat (a so-called “uninformative prior”; more on this below): \\[ P_M(\\theta_c) = \\text{Beta}(\\theta_c, 1, 1) \\] There are three main uses for models in statistical data analysis: Prediction: Models can be used to make predictions about future or hypothetical data observations. We will see an example of this in Section 8.3 in this chapter. Parameter estimation: Based on model \\(M\\) and data \\(D\\), we try to infer which value of the parameter vector \\(\\theta\\) we should believe in or work with (e.g., base our decision on). Parameter estimation can also serve knowledge gain, especially if (some component of) \\(\\theta\\) is theoretically interesting. We will deal with parameter estimation in Chapter 9. Model comparison: If we formulate at least two alternative models, we can ask which model better explains or better predicts some data. In some of its guises, model comparison helps with the question of whether a given data set provides evidence in favor of one model and against another other, and if so, how much. Model comparison is the topic of Chapter 10. In most common parlance, however, we often speak of “a model of the data” or of “modeling the data”, but this is only sloppy slang for “a model of (what we assume is) a random process that could generate data of the relevant kind”.↩ Since in many contexts the meaning will be clear enough, we follow the common practice and write \\(P(D \\mid \\theta)\\) as a shortcut for the, strictly speaking, correct but cumbersome \\(P(\\mathcal{D} = D \\mid \\Theta = \\theta)\\). In this latter notation, \\(\\mathcal{D}\\) is the class of all relevant observable data and \\(\\Theta\\) is the range of a possibly high-dimensional vector of parameter values. We diverge from the common practice of using capital roman letters for random variables and small roman letters for values from these random variables because parameter vectors are traditionally written as \\(\\theta\\) and the small letter \\(\\textrm{d}\\) (albeit non-italic) is reserved for differentials.↩ It is fair to treat \\(N\\) as an independent variable if it was determined at the beginning of the experiment (= sequence of flips), so that the only dependent measure is the number \\(k\\) of head outcomes for fixed \\(N\\).↩ "],["Chap-03-03-models-representation.html", "8.2 Notation &amp; graphical representation", " 8.2 Notation &amp; graphical representation If it is important to communicate the assumptions underlying a statistical argument, and if models are means of making these assumptions formally explicit, then it follows that efficient communication of models is important too. We here follow the common practice of representing models using a special purpose formulaic notation and, where useful, a graph-based visual display in which probabilistic dependencies are lucidly represented. Recall that the Binomial Model has a binomial likelihood function: \\[ P_M(k \\mid \\theta_c, N) = \\text{Binomial}(k, N, \\theta_c) = \\binom{N}{k}\\theta_c^k(1-\\theta_c)^{N-k} \\] And a Beta distribution as a prior, e.g., with shape parameters set so that all values of \\(\\theta_c\\) are equally likely. \\[ P_M(\\theta_c) = \\text{Beta}(\\theta_c, 1, 1) \\] 8.2.1 Formula notation To concisely represent models, we use a special notation, which is very intuitive when we think about sampling. Instead of the above notation for the prior we write: \\[ \\theta_c \\sim \\text{Beta}(1,1) \\] The symbol “\\(\\sim\\)” is often read as “is distributed as”. You can also think of it as meaning that \\(\\theta_c\\) is sampled from a \\(\\text{Beta}(1,1)\\) distribution. Similarly, for the likelihood function, we just write: \\[k \\sim \\text{Binomial}(\\theta_c, N).\\] 8.2.2 Graphical notation When models get very complex and incorporate many parameters, it can be difficult to tease out the relations between all of the model’s components. In such a situation a graphical notation of a model is helpful. We here adopt the conventions described by Lee and Wagenmakers (2014). We represent every relevant variable as a node in a directed acyclic graph structure (a probabilistic network). The graph structure is used to indicate dependencies between the variables, with children depending on their parents. In visualizing this, we use the following general conventions: known or unknown (= latent) variable shaded nodes: observed variables unshaded nodes: unobserved / latent variables kind of variable: circular nodes: continuous variables square nodes: discrete variables kind of dependency: single line: stochastic dependency double line: deterministic dependency For the Binomial Model this results in the relevant variables: number of trials (\\(N\\)) number of success (\\(k\\)) probability for success (\\(\\theta_c\\)) Of these, \\(N\\) and \\(k\\) are observed and discrete variables, and \\(\\theta_c\\) is a latent continuous variable. Clearly, the number of heads \\(k\\) depends on the coin bias \\(\\theta_c\\) as well as on the number of trials \\(N\\). This yields a graphical and formulaic notation as in Figure 8.1. Figure 8.1: The Binomial Model. Notice that any specific Beta prior shape would yield what we here call a Binomial Model, which is why there are no concrete shape parameters given in this graph. References "],["Chap-03-03-models-parameters-priors.html", "8.3 Parameters, priors, and prior predictions", " 8.3 Parameters, priors, and prior predictions We defined a Bayesian model as a pair consisting of a parameterized likelihood function and a prior distribution over parameter values: \\[ \\begin{aligned} &amp; \\text{Likelihood: } &amp; P_M(D \\mid \\theta) \\\\ &amp; \\text{Prior: } &amp; P_M(\\theta) \\end{aligned} \\] In this section, we dive deeper into what a parameter is, what a prior distribution \\(P_M(\\theta)\\) is, and how we can use a model to make predictions about data. The running example for this section is the Binomial Model as introduced above. As a concrete example of data, we consider a case with \\(N=24\\) coin flips and \\(k=7\\) head outcomes. 8.3.1 What’s a model parameter? A model parameter is a value that the likelihood depends on. In the graphical notation we introduced in Section 8.2, parameters usually (but not necessarily) show up as white nodes, because they are unknowns. For example, the single parameter \\(\\theta_c\\) in the Binomial Model shapes or fine-tunes the likelihood function. Remember that the likelihood function for the Binomial Model is: \\[ P_M(k \\mid \\theta_c, N) = \\text{Binomial}(k, N, \\theta_c) = \\binom{N}{k}\\theta_c^k(1-\\theta_c)^{N-k} \\] To understand the role of the parameter \\(\\theta_c\\), we can plot the likelihood of the observed data (here: \\(k=7\\) and \\(N=24\\)) as a function of \\(\\theta_c\\). This is what is shown in Figure 8.2. For each logically possible value of \\(\\theta_c \\in [0;1]\\) on the horizontal axis, Figure 8.2 plots the resulting likelihood of the observed data on the vertical axis. What this plot shows is how the likelihood function depends on its parameter \\(\\theta_c\\). Different values of \\(\\theta_c\\) make the data we observed more or less likely. Figure 8.2: Likelihood function for the Binomial Model, for \\(k=7\\) and \\(N=24\\). Exercise 8.1 Use R to calculate how likely it is to get \\(k=22\\) heads when tossing a coin with bias \\(\\theta_c = 0.5\\) a total of \\(N=100\\) times. Solution dbinom(22, size = 100, prob = 0.5, log = FALSE) ## [1] 5.783981e-09 Which parameter value, \\(\\theta_c = 0.4\\) or \\(\\theta_c = 0.6\\), makes the data from the previous part of this exercise (\\(N=100\\) and \\(k=22\\)) more likely? - Give a reason for your intuitive guess and use R to check your intuition. Solution The number of heads \\(k=22\\) is (far) less than half of the total number of coin flips \\(N=100\\). This should be more likely for a bias towards tails than for a bias towards heads. So, we might assume that \\(\\theta_c=0.4\\) makes the data more likely than \\(\\theta_c = 0.6\\). dbinom(22, size = 100, prob = 0.4, log = FALSE) ## [1] 6.402414e-05 dbinom(22, size = 100, prob = 0.6, log = FALSE) ## [1] 8.815222e-15 8.3.2 Priors over parameters The prior distribution over parameter values \\(P_M(\\theta)\\) is an integral part of a model when we adopt a Bayesian approach to data analysis. This entails that two (Bayesian) models can share the same likelihood function, and yet ought to be considered as different models. (This also means that, when we say “Binomial Model” we really mean a whole class of models, all varying in the prior on \\(\\theta\\).) In Bayesian data analysis, priors \\(P_M(\\theta)\\) are most saliently interpreted as encoding the modeler’s prior beliefs about the parameters in question. Ideally, the beliefs that support the specification of a prior should be supported by an argument, results of previous research, or other justifiable motivations. However, informed subjective priors are just one of the ways to justify priors over parameters. There are three main types of motivations for priors \\(P_M(\\theta)\\); though the choice of a particular prior for a particular application might have mixed motives. Subjective priors capture the modeler’s genuine subjective beliefs in the sense described above. Practical priors are priors that are used pragmatically because of their specific usefulness, e.g., because they simplify a mathematical calculation or a computer simulation, or because they help in statistical reasoning, such as when skeptical priors are formulated that work against a particular conclusion. Objective priors are priors that, as some argue, should be adopted for a given likelihood function to avoid conceptually paradoxical consequences. We will not deal with objective priors in this introductory course beyond mentioning them here for completeness. Orthogonal to the kind of motivation given for a prior, we can distinguish different priors based on how strongly they commit the modeler to a particular range of parameter values. The most extreme case of ignorance are uninformative priors which assign the same level of credence to all parameter values. Uninformative priors are also called flat priors because they express themselves as flat lines for discrete probability distributions and continuous distributions defined over an interval with finite lower and upper bounds.46 Informative priors, on the other hand, can be weakly informative or strongly informative, depending on how much commitment they express. The most extreme case of commitment would be expressed in a point-valued prior, which puts all probability (mass or density) on a single value of a parameter. Since this is no longer a respectable probability distribution, although it satisfies the definition, we speak of a degenerate prior here. Figure 8.3 shows examples of uninformative, weakly or strongly informative priors, as well as point-valued priors for the Binomial Model. The priors shown here (resulting in four different Bayesian models all falling inside the family of Binomial Models) are as follows: uninformative : \\(\\theta_c \\sim \\text{Beta}(1,1)\\) weakly informative : \\(\\theta_c \\sim \\text{Beta}(5,2)\\) strongly informative : \\(\\theta_c \\sim \\text{Beta}(50,20)\\) point-valued : \\(\\theta_c \\sim \\text{Beta}(\\alpha, \\beta)\\) with \\(\\alpha, \\beta \\rightarrow \\infty\\) and \\(\\frac{\\alpha}{\\beta} = \\frac{5}{2}\\) Figure 8.3: Examples of different kinds of Bayesian priors for coin bias \\(\\theta_c\\) in the Binomial Model. 8.3.3 Prior predictions How should priors be specified for a Bayesian model? Several aspects might inform this decision. Practical considerations may matter (maybe the model can only be implemented and run with common software for certain priors). If subjective beliefs play a role, it may be hard to specify an exact shape of the prior distribution over some or all parameters, especially when these parameters are not easily interpretable in an intuitive way. Therefore, two principles for the specification of priors are important: Sensitivity analysis: Researchers should always check diligently whether or how much their results depend on the specific choices of priors, e.g., by running the same analysis with a wide range of different priors. Inspecting the prior predictive distribution: It is one thing to ask whether a particular value for some parameter makes intuitive or conceptual sense. It is another at least as important question whether the predictions that the model makes about the data are intuitively or conceptually reasonable from an a priori perspective.47 Indeed, by specifying priors over parameter values, Bayesian models make predictions about how likely a particular data outcome is, even before having seen any data at all. The (Bayesian) prior predictive distribution of model \\(M\\) is a probability distribution over future or hypothetical data observations, written here as \\(D_{\\text{pred}}\\) for “predicted data”: \\[ \\begin{aligned} P_M(D_{\\text{pred}}) &amp; = \\sum_{\\theta} P_M(D_{\\text{pred}} \\mid \\theta) \\ P_M(\\theta) &amp;&amp; \\text{[discrete parameter space]} \\\\ P_M(D_{\\text{pred}}) &amp; = \\int P_M(D_{\\text{pred}} \\mid \\theta) \\ P_M(\\theta) \\ \\text{d}\\theta &amp;&amp; \\text{[continuous parameter space]} \\end{aligned} \\] The formula above is obtained by marginalization over parameter values (represented here as an integral for the continuous case). We can think of the prior predictive distribution also in terms of samples. We want to know how likely a given logically possible data observation \\(D_{\\text{pred}}\\) is, according to the model with its a priori distribution over parameters. So we sample, repeatedly, parameter vectors \\(\\theta\\) from the prior distribution. For each sampled \\(\\theta\\), we then sample a potential data observation \\(D_{\\text{pred}}\\). The prior predictive distribution captures how likely it is under this sampling process to see each logically possible data observation \\(D_{\\text{pred}}\\). Notice that this sampling process corresponds exactly to the way in which we write down models using the conventions laid out in Section 8.2, underlining once more how a model is really a representation of a random process that could have generated the data. In the case of the Binomial Model when we use a Beta prior over \\(\\theta\\), the prior predictive distribution is so prominent that it has its own name and fame. It’s called the Beta-binomial distribution. Figure 8.4 shows the prior predictions for the four kinds of priors from Figure 8.3 when \\(N = 24\\). Figure 8.4: Prior predictive distributions for Binomial Models with the Beta-priors from the previous figure. It is possible to use uninformative priors also for continuous distributions defined over an unbounded interval, in which case we speak of improper priors (to remind ourselves that, mathematically, we are doing something tricky).↩ Obviously, priors should not be chosen after having seen the data in such a way that they engineer in the conclusions that a researcher wants to reach because of prior conviction, pride or ambition.↩ "],["ch-03-04-parameter-estimation.html", "9 Bayesian parameter estimation", " 9 Bayesian parameter estimation Based on a model \\(M\\) with parameters \\(\\theta\\), parameter estimation addresses the question of which values of \\(\\theta\\) are good estimates, given some data \\(D\\). This chapter deals specifically with Bayesian parameter estimation. Given a Bayesian model \\(M\\), we can use Bayes rule to update prior beliefs about \\(\\theta\\) to obtain so-called posterior beliefs \\(P_M(\\theta \\mid D)\\), which represent the new beliefs after observing \\(D\\) and updating in a conservative, rational manner based on the assumptions spelled out in \\(M\\). We will see two different methods of computing posterior distributions \\(P_M(\\theta \\mid D)\\), a precise mathematical derivation with limited applicability in terms of so-called conjugate priors, and an efficient but approximate sampling method based on so-called Markov Chain Monte Carlo algorithms. The chapter also introduces common point-valued and interval-ranged estimates for parameters, in particular the Bayesian measures of posterior mean and credible intervals. We will also learn about the posterior predictive distribution and how to draw inferences about hypotheses about specific parameter values. The learning goals for this chapter are: understand how Bayes rule applies to parameter estimation role of prior and likelihood understand the notion of conjugate prior understand and compute point-valued and interval-range estimators MLE, MAP, posterior mean (Bayesian) credible intervals understand the basic ideas behind MCMC sampling algorithms understand the notion of a posterior predictive distribution learn how to use Bayesian parameter inference to test hypotheses about parameter values "],["ch-03-03-estimation-bayes.html", "9.1 Bayes rule for parameter estimation", " 9.1 Bayes rule for parameter estimation 9.1.1 Definitions and terminology Fix a Bayesian model \\(M\\) with likelihood \\(P(D \\mid \\theta)\\) for observed data \\(D\\) and prior over parameters \\(P(\\theta)\\). We then update our prior beliefs \\(P(\\theta)\\) to obtain posterior beliefs by Bayes rule:48 \\[P(\\theta \\mid D) = \\frac{P(D \\mid \\theta) \\ P(\\theta)}{P(D)}\\] The ingredients of this equation are: the posterior distribution \\(P(\\theta \\mid D)\\) - our posterior beliefs about how likely each value of \\(\\theta\\) is given \\(D\\); the likelihood function \\(P(D \\mid \\theta)\\) - how likely each observation of \\(D\\) is for a fixed \\(\\theta\\); the prior distribution \\(P(\\theta)\\) - our initial (prior) beliefs about how likely each value of \\(\\theta\\) might be; the marginal likelihood \\(P(D) = \\int P(D \\mid \\theta) \\ P(\\theta) \\ \\text{d}\\theta\\) - how likely an observation of \\(D\\) is under our prior beliefs about \\(\\theta\\) (a.k.a., the prior predictive probability of \\(D\\) according to \\(M\\)) A frequently used shorthand notation for probabilities is this: \\[\\underbrace{P(\\theta \\, | \\, D)}_{posterior} \\propto \\underbrace{P(\\theta)}_{prior} \\ \\underbrace{P(D \\, | \\, \\theta)}_{likelihood}\\] where the “proportional to” sign \\(\\propto\\) indicates that the probabilities on the LHS are defined in terms of the quantity on the RHS after normalization. So, if \\(F \\colon X \\rightarrow \\mathbb{R}^+\\) is a positive function of non-normalized probabilities (assuming, for simplicity, finite \\(X\\)), \\(P(x) \\propto F(x)\\) is equivalent to \\(P(x) = \\frac{F(x)}{\\sum_{x&#39; \\in X} F(x&#39;)}\\). 9.1.2 The effects of prior and likelihood on the posterior The shorthand notation for the posterior \\(P(\\theta \\, | \\, D) \\propto P(\\theta) \\ P(D \\, | \\, \\theta)\\) makes it particularly clear that the posterior distribution is a “mix” of prior and likelihood. Let’s first explore this “mixing property” of the posterior before worrying about how to compute posteriors concretely. We consider the case of flipping a coin with unknown bias \\(\\theta\\) a total of \\(N\\) times and observing \\(k\\) heads (= successes). This is modeled with the Binomial Model (see Section 8.1), using priors expressed with a Beta distribution, giving us a model specification as: \\[ \\begin{aligned} k &amp; \\sim \\text{Binomial}(N, \\theta) \\\\ \\theta &amp; \\sim \\text{Beta}(a, b) \\end{aligned} \\] To study the impact of the likelihood function, we compare two data sets. The first one is the contrived “24/7” example where \\(N = 24\\) and \\(k = 7\\). The second example uses a much larger naturalistic data set stemming from the King of France example, namely \\(k = 109\\) for \\(N = 311\\). These numbers are the number of “true” responses and the total number of responses for all conditions except Condition 1, which did not involve a presupposition. data_KoF_cleaned &lt;- aida::data_KoF_cleaned data_KoF_cleaned %&gt;% filter(condition != &quot;Condition 1&quot;) %&gt;% group_by(response) %&gt;% dplyr::count() ## # A tibble: 2 x 2 ## # Groups: response [2] ## response n ## &lt;lgl&gt; &lt;int&gt; ## 1 FALSE 202 ## 2 TRUE 109 The likelihood function for both data sets is plotted in Figure 9.1. The most important thing to notice is that the more data we have (as in the KoF example), the narrower the range of parameter values that make the data likely. Intuitively, this means that the more data we have, the more severely constrained the range of a posteriori plausible parameter values will be, all else equal. Figure 9.1: Likelihood for two examples of binomial data. The first example has \\(k = 7\\) and \\(N = 24\\). The second has \\(k = 109\\) and \\(N = 311\\). Picking up the example from Section 8.3.2, we will consider the four types of priors show below in Figure 9.2. Figure 9.2: Examples of different kinds of Bayesian priors for the Binomial Model. Combining the four different priors and the two different data sets, we see that the posterior is indeed a mix of prior and likelihood. In particular, we see that the weakly informative prior has only little effect if there are many data points (the KoF data), but does affect the posterior of the 24/7 case (compared against the uninformative prior). Figure 9.3: Posterior beliefs over bias parameter \\(\\theta\\) under different priors and different data sets. We see that strongly informative priors have more influence on the posterior than weakly informative priors, and that the influence of the prior is stronger for less data than for more. Exercise 9.1 Use the WebPPL code below to explore the effects of priors and different observations in the Binomial Model in order to be able to answer the questions in the second part below. Ask yourself how you need to change parameters in such a way as to: make the contribution of the likelihood function stronger make the prior more informative // select your parameters here var k = 7 // observed successes (heads) var N = 24 // total flips of a coin var a = 1 // first shape parameter of beta prior var b = 1 // second shape parameter of beta prior var n_samples = 50000 // number of samples for approximation ///fold: display(\"Prior distribution\") var prior = function() { beta(a, b) } viz(Infer({method: \"rejection\", samples: n_samples}, prior)) display(\"\\nPosterior distribution\") var posterior = function() { beta(k + a, N - k + b) } viz(Infer({method: \"rejection\", samples: n_samples}, posterior)) /// Solution To make the influence of the likelihood function stronger, we need more data. Try increasing variables N and k without changing their ratio. To make the prior more strongly informative, you should increase the shape parameters a and b. Based on your explorations of the WebPPL code, which of the following statements do you think is true? The prior always influences the posterior more than the likelihood. The less informative the prior, the more the posterior is influenced by it. The posterior is more influenced by the likelihood the less informative the prior is. The likelihood always influences the posterior more than the prior. The likelihood has no influence on the posterior in case of a point-valued prior (assuming a single-parameter model). Solution False False True False True 9.1.3 Computing Bayesian posteriors with conjugate priors Bayesian posterior distributions can be hard to compute. Almost always, the prior \\(P(\\theta)\\) is easy to compute (otherwise, we might choose a different one for practicality). Usually, the likelihood function \\(P(D \\mid \\theta)\\) is also fast to compute. Everything seems innocuous when we just write: \\[\\underbrace{P(\\theta \\, | \\, D)}_{posterior} \\propto \\underbrace{P(\\theta)}_{prior} \\ \\underbrace{P(D \\, | \\, \\theta)}_{likelihood}\\] But the real pain is the normalizing constant, i.e., the marginalized likelihood a.k.a. the “integral of doom”, which to compute can be intractable, especially if the parameter space is large and not well-behaved: \\[P(D) = \\int P(D \\mid \\theta) \\ P(\\theta) \\ \\text{d}\\theta\\] Section 9.3 will, therefore, enlarge on methods to compute or approximate the posterior distribution efficiently. Fortunately, the computation of Bayesian posterior distributions can be quite simple in special cases. If the prior and the likelihood function cooperate, so to speak, the computation of the posterior can be as simple as sleep. The nature of the data often prescribes which likelihood function is plausible. But we have more wiggle room in the choice of the priors. If prior \\(P(\\theta)\\) and posterior \\(P(\\theta \\, | \\, D)\\) are of the same family, i.e., if they are the same kind of distribution albeit possibly with different parameterizations, we say that they conjugate. In that case, the prior \\(P(\\theta)\\) is called conjugate prior for the likelihood function \\(P(D \\, | \\, \\theta)\\) from which the posterior \\(P(\\theta \\, | \\, D)\\) is derived. Theorem 9.1 The Beta distribution is the conjugate prior of binomial likelihood. For \\(\\theta \\sim \\text{Beta}(a,b)\\) as prior and data \\(k\\) and \\(N\\), the posterior is \\(\\theta \\sim \\text{Beta}(a+k, b+ N-k)\\). Show proof. Proof. By construction, the posterior is: \\[P(\\theta \\mid \\langle{k, N \\rangle}) \\propto \\text{Binomial}(k ; N, \\theta) \\ \\text{Beta}(\\theta \\, | \\, a, b) \\] We extend the RHS by definitions, while omitting the normalizing constants: \\[ \\begin{aligned} \\text{Binomial}(k ; N, \\theta) \\ \\text{Beta}(\\theta \\, | \\, a, b) &amp; \\propto \\theta^{k} \\, (1-\\theta)^{N-k} \\, \\theta^{a-1} \\, (1-\\theta)^{b-1} \\\\ &amp; = \\theta^{k + a - 1} \\, (1-\\theta)^{N-k +b -1} \\end{aligned} \\] This latter expression is the non-normalized Beta-distribution for parameters \\(a + k\\) and \\(b + N - k\\), so that we conclude with what was to be shown: \\[ \\begin{aligned} P(\\theta \\mid \\langle k, N \\rangle) &amp; = \\text{Beta}(\\theta \\, | \\, a + k, b+ N-k) \\end{aligned} \\]   Exercise 9.2 Fill in the blanks in the code below to get a plot of the posterior distribution for the coin flip scenario with \\(k=20\\), \\(N=24\\), making use of conjugacy and starting with a uniform Beta prior. theta = seq(0, 1, length.out = 401) as_tibble(theta) %&gt;% mutate(posterior = ____ ) %&gt;% ggplot(aes(___, posterior)) + geom_line() Solution theta &lt;- seq(0, 1, length.out = 401) as_tibble(theta) %&gt;% mutate(posterior = dbeta(theta, 21, 5)) %&gt;% ggplot(aes(theta, posterior)) + geom_line() Suppose that Jones flipped a coin with unknown bias 30 times. She observed 20 heads. She updates her beliefs rationally with Bayes rule. Her posterior beliefs have the form of a beta distribution with parameters \\(\\alpha = 25\\), \\(\\beta = 15\\). What distribution and what parameter values of that distribution capture Jones’ prior beliefs before updating her beliefs with this data? Solution \\(\\text{Beta}(5,5)\\) 9.1.4 Excursion: Sequential updating Ancient wisdom has coined the widely popular proverb: “Today’s posterior is tomorrow’s prior.” Suppose we collected data from an experiment, like \\(k = 7\\) in \\(N = 24\\). Using uninformative priors at the outset, our posterior belief after the experiment is \\(\\theta \\sim \\text{Beta}(8,18)\\). But now consider what happened at half-time. After half the experiment, we had \\(k = 2\\) and \\(N = 12\\), so our beliefs followed \\(\\theta \\sim \\text{Beta}(3, 11)\\) at this moment in time. But using these beliefs as priors, and observing the rest of the data would consequently result in updating the prior \\(\\theta \\sim \\text{Beta}(3, 11)\\) with another set of observations \\(k = 5\\) and \\(N = 12\\), giving us the same posterior belief as what we would have gotten if we updated in one swoop. Figure 9.4 shows the steps through the belief space, starting uninformed and observing one piece of data at a time (going right for each outcome of heads, down for each outcome of tails). Figure 9.4: Beta distributions for different parameters. Starting from an uninformative prior (top left), we arrive at the posterior distribution in the bottom left, in any sequence of sequentially updating with the data. This sequential updating is not a peculiarity of the Beta-Binomial case or of conjugacy. It holds in general for Bayesian inference. Sequential updating is a very intuitive property, but it is not shared by all other forms of inference from data. That Bayesian inference is sequential and commutative follows from the commutativity of multiplication of likelihoods (and the definition of Bayes rule). Theorem 9.2 Bayesian posterior inference is sequential and commutative in the sense that for a data set \\(D\\) which is comprised of two mutually exclusive subsets \\(D_1\\) and \\(D_2\\) such that \\(D_1 \\cup D_2 = D\\), we have: \\[ P(\\theta \\mid D ) \\propto P(\\theta \\mid D_1) \\ P(D_2 \\mid \\theta) \\] Show proof. Proof. \\[ \\begin{aligned} P(\\theta \\mid D) &amp; = \\frac{P(\\theta) \\ P(D \\mid \\theta)}{ \\int P(\\theta&#39;) \\ P(D \\mid \\theta&#39;) \\text{d}\\theta&#39;} \\\\ &amp; = \\frac{P(\\theta) \\ P(D_1 \\mid \\theta) \\ P(D_2 \\mid \\theta)}{ \\int P(\\theta&#39;) \\ P(D_1 \\mid \\theta&#39;) \\ P(D_2 \\mid \\theta&#39;) \\text{d}\\theta&#39;} &amp; \\text{[from multiplicativity of likelihood]} \\\\ &amp; = \\frac{P(\\theta) \\ P(D_1 \\mid \\theta) \\ P(D_2 \\mid \\theta)}{ \\frac{k}{k} \\int P(\\theta&#39;) \\ P(D_1 \\mid \\theta&#39;) \\ P(D_2 \\mid \\theta&#39;) \\text{d}\\theta&#39;} &amp; \\text{[for random positive k]} \\\\ &amp; = \\frac{\\frac{P(\\theta) \\ P(D_1 \\mid \\theta)}{k} \\ P(D_2 \\mid \\theta)}{\\int \\frac{P(\\theta&#39;) \\ P(D_1 \\mid \\theta&#39;)}{k} \\ P(D_2 \\mid \\theta&#39;) \\text{d}\\theta&#39;} &amp; \\text{[rules of integration; basic calculus]} \\\\ &amp; = \\frac{P(\\theta \\mid D_1) \\ P(D_2 \\mid \\theta)}{\\int P(\\theta&#39; \\mid D_1) \\ P(D_2 \\mid \\theta&#39;) \\text{d}\\theta&#39;} &amp; \\text{[Bayes rule with } k = \\int P(\\theta) P(D_1 \\mid \\theta) \\text{d}\\theta ]\\\\ \\end{aligned} \\]   9.1.5 Posterior predictive distribution We already learned about the prior predictive distribution of a model in Chapter 8.3.3. Remember that the prior predictive distribution of a model \\(M\\) captures how likely hypothetical data observations are from an a priori point of view. It was defined like this: \\[ \\begin{aligned} P_M(D_{\\text{pred}}) &amp; = \\sum_{\\theta} P_M(D_{\\text{pred}} \\mid \\theta) \\ P_M(\\theta) &amp;&amp; \\text{[discrete parameter space]} \\\\ P_M(D_{\\text{pred}}) &amp; = \\int P_M(D_{\\text{pred}} \\mid \\theta) \\ P_M(\\theta) \\ \\text{d}\\theta &amp;&amp; \\text{[continuous parameter space]} \\end{aligned} \\] After updating beliefs about parameter values in the light of observed data \\(D_{\\text{obs}}\\), we can similarly define the posterior predictive distribution, which is analogous to the prior predictive distribution, except that it relies on the posterior over parameter values \\(P_{M(\\theta \\mid D_{\\text{obs}})}\\) instead of the prior \\(P_M(\\theta)\\): \\[ \\begin{aligned} P_M(D_{\\text{pred}} \\mid D_{\\text{obs}}) &amp; = \\sum_{\\theta} P_M(D_{\\text{pred}} \\mid \\theta) \\ P_M(\\theta \\mid D_{\\text{obs}}) &amp;&amp; \\text{[discrete parameter space]} \\\\ P_M(D_{\\text{pred}} \\mid D_{\\text{obs}}) &amp; = \\int P_M(D_{\\text{pred}} \\mid \\theta) \\ P_M(\\theta \\mid D_{\\text{obs}}) \\ \\text{d}\\theta &amp;&amp; \\text{[continuous parameter space]} \\end{aligned} \\] Since parameter estimation is only about one model, it is harmless to omit the index \\(M\\) in the probability notation.↩ "],["ch-03-04-parameter-estimation-points-intervals.html", "9.2 Point-valued and interval-ranged estimates", " 9.2 Point-valued and interval-ranged estimates Let’s consider the “24/7” example with a flat prior again, concisely repeated in Figure 9.5. Figure 9.5: Prior (uninformative), likelihood and posterior for the 24/7 example. The posterior probability distribution in Figure 9.5 contains rich information. It specifies how likely each value of \\(\\theta\\) is, obtained by updating the original prior beliefs with the observed data. Such rich information is difficult to process and communicate in natural language. It is therefore convenient to have conventional means of summarizing the rich information carried in a probability distribution like in Figure 9.5. Customarily, we summarize in terms of a point-estimate and/or an interval estimate. The point estimate gives information about a “best value”, i.e., a salient point, and the interval estimate gives, usually, an indication of how closely other “good values” are scattered around the “best value”. The most frequently used Bayesian point estimate is the mean of the posterior distribution, and the most frequently used Bayesian interval estimate is the credible interval. We will introduce both below, alongside some alternatives (namely the maximum a posteriori, the maximum likelihood estimate and the inner-quantile range). 9.2.1 Point-valued estimates A common Bayesian point estimate of parameter vector \\(\\theta\\) is the mean of the posterior distribution over \\(\\theta\\). It gives the value of \\(\\theta\\) which we would expect to see when basing out expectations on the posterior distribution: \\[ \\begin{aligned} \\mathbb{E}_{P(\\theta \\mid D)} = \\int \\theta \\ P(\\theta \\mid D) \\ \\text{d}\\theta \\end{aligned} \\] Taking the Binomial Model as example, if we start with flat beliefs, the expected value of \\(\\theta\\) after \\(k\\) successes in \\(N\\) flips can be calculated rather easily as \\(\\frac{k+1}{n+2}\\).49 For our example case, we calculate the expected value of \\(\\theta\\) as \\(\\frac{8}{26} \\approx 0.308\\) (see also Figure 9.5). Another salient point-estimate to summarize a Bayesian posterior distribution is the maximum a posteriori, or MAP, for short. The MAP is the parameter value (tuple) that maximizes the posterior distribution: \\[ \\text{MAP}(P(\\theta \\mid D)) = \\arg \\max_\\theta P(\\theta \\mid D) \\] While the mean of the posterior is “holistic” in the sense that it depends on the whole distribution, the MAP does not. The mean is therefore more faithful to the Bayesian ideal of taking the full posterior distribution into account. Moreover, depending on how Bayesian posteriors are computed/approximated, the estimation of a mean can be more reliable than that of a MAP. The maximum likelihood estimate (MLE) is a point estimate based on the likelihood function alone. It specifies the value of \\(\\theta\\) for which the observed data is most likely. We often use the notation \\(\\hat{\\theta}\\) to denote the MLE of \\(\\theta\\): \\[ \\begin{aligned} \\hat{\\theta} = \\arg \\max_{\\theta} P(D \\mid \\theta) \\end{aligned} \\] By ignoring the prior information entirely, the MLE is not a Bayesian notion, but a frequentist one (more on this in later chapters). For the binomial likelihood function, the maximum likelihood estimate is easy to calculate as \\(\\frac{k}{N}\\), yielding \\(\\frac{7}{24} \\approx 0.292\\) for the running example. Figure 9.6 shows a graph of the non-normalized likelihood function and indicates the maximum likelihood estimate (the value that maximizes the curve). Figure 9.6: Non-normalized likelihood function for the observation of \\(k=7\\) successes in \\(N=24\\) flips, including maximum likelihood estimate. Exercise 9.3 Can you think of a situation where MLE and MAP are the same? HINT: Think which prior eliminates the difference between them! Solution MLE is a special case of MAP with a uniform prior. 9.2.2 Interval-ranged estimates A common Bayesian interval estimate of the coin bias parameter \\(\\theta\\) is a credible interval.50 An interval \\([l;u]\\) is a \\(\\gamma\\%\\) credible interval for a random variable \\(X\\) if two conditions hold, namely \\[ \\begin{aligned} P(l \\le X \\le u) = \\frac{\\gamma}{100} \\end{aligned} \\] and, secondly, for every \\(x \\in[l;u]\\) and \\(x&#39; \\not \\in[l;u]\\) we have \\(P(X=x) &gt; P(X = x&#39;)\\). Intuitively, a \\(95\\%\\) credible interval gives the range of values in which we believe with relatively high certainty that the true value resides. Figure 9.5 indicates the \\(95\\%\\) credible interval, based on the posterior distribution \\(P(\\theta \\mid D)\\) of \\(\\theta\\), for the 24/7 example.51 Instead of credible intervals, sometimes posteriors are also summarized in terms of the \\(\\gamma\\%\\) inner-quantile region. This is the interval \\([l;u]\\) such that \\[P(l \\le X) = P(X \\le u) = 0.5 \\cdot (1 - \\frac{\\gamma}{100})\\] For example, a 95% inner-quantile region contains all values except the smallest and largest values what each comprise 2.5% of the probability mass/density. The inner-quantile range is easier to compute and does not have trouble with multi-modality. This is why it is frequently used to approximate Bayesian credible intervals. However, care must be taken because the inner-quantile range is not as intuitive a measure of the “best values” as credible intervals. While credible intervals and inner quantile regions coincide for distributions with a symmetric distribution around a single maximum, and so tend to coincide for large sample size when posteriors tend to converge to normal distributions, there are cases of clear divergence. Figure 9.7 shows such a case. While the inner-quantile region does not include the most likely values, the credible interval does. Figure 9.7: Difference between a 95% credible interval and a 95% inner-quantile region. 9.2.3 Computing Bayesian estimates As mentioned, the most common (and arguably best) summaries to report for a Bayesian posterior are the posterior mean and a credible interval. The aida package which accompanies this book has a convenience function called aida::summarize_sample_vector() that gives the mean and 95% credible interval for a vector of samples. You can use it like so: # take samples from a posterior (24/7 example with flat priors) posterior_samples &lt;- rbeta(100000, 8, 18) # get summaries aida::summarize_sample_vector( # vector of samples samples = posterior_samples, # name of output column name = &quot;theta&quot; ) ## # A tibble: 1 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 theta 0.142 0.308 0.485 9.2.4 Excursion: Computing MLEs and MAPs in R Computing the maximum or minimum of a function, such as an MLE or MAP estimate, is a common problem. R has a built-in function optim that is useful for finding the minimum of a function. (If a maximum is needed, just multiply by \\(-1\\) and search the minimum with optim.) We can use the optim function to retrieve an MLE for 24/7 data and the Binomial Model (with flat priors) using conjugacy like so: # perform optimization MLE &lt;- optim( # starting value for optimization par = 0.2, # funtion to minimize (= optimize) fn = function(par){ -dbeta(par, 8, 18) }, # method of optimization (for 1-d cases) method = &quot;Brent&quot;, # lower and upper bound of possible parameter values lower = 0, upper = 1 ) # retrieve MLE MLE$par ## [1] 0.2916667 Indeed, the value obtained by computationally approximating the maximum likelihood estimate for this likelihood function coincides with the true value of \\(\\frac{7}{24}\\). This is also known as Laplace’s rule or the rule of succession.↩ Also frequently called “highest-density intervals”, even when we are dealing not with density but probability mass.↩ Not all random variables have a credible interval for a given \\(\\gamma\\), according to this definition. A bimodal distribution might not, for example. A bi-modal distribution has two regions of high probability. We can, therefore, generalize the concept to a finite set of disjoint convex credible regions, all of which have the second property of the definition above and all of which conjointly are realized with \\(\\gamma\\%\\) probability. Unfortunately, common parlor uses the term “credible interval” to refer to credible regions as well. The same disaster occurs with alternative terms, such as “\\(\\gamma\\%\\) highest-density intervals”, which also often refers to what should better be called “highest-density regions”.↩ "],["Ch-03-03-estimation-algorithms.html", "9.3 Approximating the posterior", " 9.3 Approximating the posterior There are several methods of computing approximations of Bayesian posteriors. Variational inference, for example, hinges on the fact that under very general conditions, Bayesian posterior distributions are well approximated by (multi-variate) normal distributions. The more data, the better the approximation. We can then reduce the approximation of a Bayesian posterior to a problem of optimizing parameter values: we simply look for the parameter values that yield the “best” parametric approximation to the Bayesian posterior. (Here, “best” is usually expressed in terms of minimizing a measure of divergence between probability distributions, such as Kullback-Leibler divergence.) Another prominent method of approximating Bayesian posteriors is rejection sampling. The most prominent class of methods to approximate Bayesian posteriors are Markov Chain Monte Carlo methods. We will describe the most basic version of such MCMC algorithms below. For most applications in the context of this introductory book, it suffices to accept that there are black boxes (with some knobs for fine-tuning) that, if you supply a model description, priors and data, will return samples from the posterior distribution. 9.3.1 Of apples and trees: Markov Chain Monte Carlo sampling Beginning of each summer, Nature sends out the Children to distribute the apples among the trees. It is custom that bigger trees ought to receive more apples. Indeed, every tree is supposed to receive apples in proportion to how many leaves it has. If Giant George (an apple tree!) has twice as many leaves as Thin Finn (another apple tree!), Giant George is to receive twice as many apples as Thin Finn. This means that if there are \\(n_a\\) apples to distribute in total, and \\(L(t)\\) is the number of leaves of tree \\(t\\), every tree should receive \\(A(t)\\) apples, where: \\[ A(t) = \\frac{L(t)}{\\sum_{t&#39;} L(t&#39;)} \\ n_a \\] The trouble is that Nature does not know the number of leaves of all the trees: Nature does not care about numbers. The Children, however, can count. But they cannot keep in mind the number of leaves for many trees for a long time. And no single Child could ever visit all the trees before the winter. This is why the Children distribute apples in a way that approximates Nature’s will. The more apples to distribute, the better the approximation. Nature is generally fine with approximate but practical solutions. When a Child visits a tree, it affectionately hangs an apple into its branches. It also writes down the name of the tree in a list next to the number of the apple it has just delivered. It then looks around and selects a random tree in the neighborhood. If the current tree \\(t_c\\), where the Child is at present, has fewer leaves than this other tree \\(t_o\\), i.e., if \\(L(t_c) &lt; L(t_o)\\), the Child visits \\(t_o\\). If instead \\(L(t_c) \\ge L(t_o)\\), the Child flips a coin and visits \\(t_o\\) with a probability proportional to \\(\\frac{L(t_o)}{L(t_c)}\\). In other words, the Child will always visit a tree with more leaves, and it will visit a tree with fewer leaves depending on the proportion of leaves. When a large number of apples are distributed, and Nature looks at the list of trees each Child has visited. This list of tree names is a set of representative samples from the probability distribution: \\[P(t) \\propto L(t)\\] These samples were obtained without the knowledge of the normalizing constant. The Children only had \\(L(t)\\) at their disposal. When trees are parameter tuples \\(\\theta\\) and the number of leaves is the product \\(P(D \\mid \\theta) \\ P(\\theta)\\), the Children would deliver samples from the posterior distribution without knowledge of the normalizing constant (a.k.a. the integral of doom). The sequence of trees visited by a single Child is a sample chain. Usually, Nature sends out at least 2-4 Children. The first tree a Child visits is the initialization of the chain. Sometimes Nature selects initial trees strategically for each Child. Sometimes Nature lets randomness rule. In any case, a Child might be quite far away from the meadow with lush apple trees, the so-called critical region (where to dwell makes the most sense). It might take many tree hops before a Child reaches this meadow. Nature, therefore, allows each Child to hop from tree to tree for a certain time, the warm-up period, before the Children start distributing apples and taking notes. If each Child only records every \\(k\\)-th tree it visits, Nature calls \\(k\\) a thinning factor. Thinning generally reduces autocorrelation (think: the amount to which subsequent samples do not carry independent information about the distribution). Since every next hop depends on the current tree (and only on the current tree), the whole process is a Markov process. It is light on memory and parallelizable but also affected by autocorrelation. Since we are using samples, a so-called Monte Carlo method, the whole affair is a Markov Chain Monte Carlo algorithm. It is one of many. It’s called Metropolis-Hastings. More complex MCMC algorithms exist. One class of such MCMC algorithms is called Hamiltonian Monte Carlo, and these approaches use gradients to optimize the proposal function, i.e., the choice of the next tree to consider going to. They use the warm-up period to initialize certain tuning parameters, making them much faster and more reliable (at least if the distribution of leaves among neighboring trees is well-behaved). How could Nature be sure that the plan succeeded? If not even Nature knows the distribution \\(P(t)\\), how can we be sure that the Children’s list gives representative samples to work with? Certainty is petty. The reduction of uncertainty is key! Since we send out several Children in parallel, and since each Child distributed many apples, we can compare the list of trees delivered by each Child (= the set of samples in each chain). For that purpose, we can use statistics and ask: is it plausible that the set of samples in each chain has been generated from the same probability distribution? - The answer to this question can help reduce uncertainty about the quality of the sampling process. #target_box { width: 250px; height: 80px; border: 1px solid #aaaaaa; overflow: auto; } #start_box { width: 300px; height: auto; padding: 10px; margin: 2em 5em 0 0; float: right; } .drag { height: auto; padding: 10px; margin: 0 0 0 0; } Exercise 9.6 On the right, there is a shuffled list of the steps that occur in the MH algorithm. Bring the list in the right order by dragging each step to the corresponding box on the left. If the new proposal has a higher posterior value than the most recent sample, then accept the new proposal. Generate a new value (proposal). Set an initial value. Compare the posterior value of the new proposal and the height of the posterior at the previous step. Choose to accept or reject the new proposal concerning the computed proportion. If the new proposal has a lower posterior value than the most recent sample, compute the proportion of the posterior value of the new proposal and the height of the posterior at the previous step. Step 1: Step 2: Step 3: Step 4: Step 5: Step 6: Solution Step 1: Set an initial value. Step 2: Generate a new value (proposal). Step 3: Compare the posterior value of the new proposal and the height of the posterior at the previous step. Step 4: If the new proposal has a higher posterior value than the most recent sample, then accept the new proposal. Step 5: If the new proposal has a lower posterior value than the most recent sample, compute the proportion of the posterior value of the new proposal and the height of the posterior at the previous step. Step 6: Choose to accept or reject the new proposal concerning the computed proportion. 9.3.2 Excursion: Probabilistic modeling with Stan There are a number of software solutions for Bayesian posterior approximation, all of which implement a form of MCMC sampling, and most of which also realize at least one other form of parameter estimation. Many of these use a special language to define the model and rely on a different programming language (like R, Python, Julia, etc.) to communicate with the program that does the sampling. Some options are: WinBUGS: a classic which has grown out of use a bit JAGS: another classic Stan: strongly developed current workhorse WebPPL: light-weight, browser-based full probabilistic programming language pyro: for probabilistic (deep) machine learning, based on PyTorch greta: R-only probabilistic modeling package, based on Python and TensorFlow This section will showcase an example using Stan. Later parts of this book will focus on regression models, for which we will use an R package called brms. This package uses Stan in the background. We do not have to write or read Stan code to work with brms. Still, a short peek at how Stan works is interesting if only to get a rough feeling for what is happening under the hood. 9.3.2.1 Basics of Stan In order to approximate a posterior distribution over parameters for a model, given some data, using an MCMC algorithm, we need to specify the model for the sampler. In particular, we must tell it about (i) the parameters, (ii) their priors, and (iii) the likelihood function. The latter requires that the sampler knows about the data. To communicate with Stan we will use the R package rstan (there are similar packages also for Python, Julia and other languages). More information about Stan can be found in the documentation section of the Stan homepage. The usual workflow with Stan and rstan consists of the following steps. First, we use R to massage the data into the right format for passing to Stan (a named list, see below). Second, we write the model in the Stan programming language. We do this in a stand-alone file.52 Then, we run the Stan code with the R command rstan::stan supplied by the package rstan. Finally, we collect the output of this operation (basically: a set of samples from the posterior distribution) and do with it as we please (plotting, further analysis, diagnosing the quality of the samples, …). This is best conveyed by a simple example. 9.3.2.2 Binomial Model Figure 9.8 shows the Binomial model for coin flips, as discussed before. We are going to implement it in Stan. Figure 9.8: The Binomial Model (repeated from before). We use the data from the King of France example, where we are interested in the number \\(k = 109\\) of “true” responses to sentences with a false presupposition over all \\(N = 311\\) relevant observations. We collect this information in a named list, which we will pass to Stan. KoF_data_4_Stan &lt;- list( k = 109, N = 311 ) Next, we need to write the actual model. Notice that Stan code is strictly regimented to be divided into different blocks, so that Stan knows what is data, what are parameters and what constitutes the actual model (prior and likelihood). Stan also wants to know the type of its variables (and the ranges of values these can take on). data { int&lt;lower=0&gt; N ; int&lt;lower=0,upper=N&gt; k ; } parameters { real&lt;lower=0,upper=1&gt; theta ; } model { # prior theta ~ beta(1,1) ; # likelihood k ~ binomial(N, theta) ; } We save this Stan code in a file binomial_model.stan (which you can download here) in a folder models_stan and then use the function rstan::stan to run the Stan code from within R. stan_fit_binomial &lt;- rstan::stan( # where is the Stan code file = &#39;models_stan/binomial_model.stan&#39;, # data to supply to the Stan program data = KoF_data_4_Stan, # how many iterations of MCMC iter = 3000, # how many warmup steps warmup = 500 ) The object returned from this call to Stan is a special model fit object. If we just print it, we get interesting information about the estimated parameters: print(stan_fit_binomial) ## Inference for Stan model: binomial_model. ## 4 chains, each with iter=3000; warmup=500; thin=1; ## post-warmup draws per chain=2500, total post-warmup draws=10000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## theta 0.35 0.00 0.03 0.30 0.33 0.35 0.37 0.40 3501 1 ## lp__ -203.42 0.01 0.69 -205.36 -203.58 -203.16 -202.98 -202.93 5157 1 ## ## Samples were drawn using NUTS(diag_e) at Tue Jan 5 06:21:26 2021. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). To get the posterior samples in a tidy format we use a function from the tidybayes package: tidy_samples &lt;- tidybayes::tidy_draws(stan_fit_binomial) %&gt;% select(theta) tidy_samples ## # A tibble: 10,000 x 1 ## theta ## &lt;dbl&gt; ## 1 0.317 ## 2 0.371 ## 3 0.356 ## 4 0.361 ## 5 0.374 ## 6 0.381 ## 7 0.374 ## 8 0.355 ## 9 0.340 ## 10 0.341 ## # … with 9,990 more rows We can then pull out the column theta as a vector and feed it into the summary function from the aida package to get our key Bayesian estimates: Bayes_estimates &lt;- tidy_samples %&gt;% pull(theta) %&gt;% aida::summarize_sample_vector(&quot;theta&quot;) Bayes_estimates ## # A tibble: 1 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 theta 0.299 0.351 0.403 Figure 9.9 moreover shows a density plot derived from the MCMC samples, together with the estimated 95% HDI and the true posterior distribution (in back), as derived by conjugacy. Figure 9.9: Posterior over bias \\(\\theta\\) given \\(k=109\\) and \\(N=311\\) approximated by samples from Stan, with estimated 95% credible interval (red area). The black curve shows the true posterior, derived through conjugacy. RStudio provides syntax highlighting for Stan code. Use the file ending *.stan.↩ "],["ch-03-04-parameter-estimation-normal.html", "9.4 Estimating the parameters of a Normal distribution", " 9.4 Estimating the parameters of a Normal distribution To keep matters simple and the sample size low (so as to better see effects of different priors; more on this below), we look at a (boring) fictitious data set, which we imagine being measurements of height of two species of flowers, unflowerly named species ‘A’ and ‘B’. # fictitious data from height measurements (25 flowers of two species each in cm) heights_A &lt;- c(6.94, 11.77, 8.97, 12.2, 8.48, 9.29, 13.03, 13.58, 7.63, 11.47, 10.24, 8.99, 8.29, 10.01, 9.47, 9.92, 6.83, 11.6, 10.29, 10.7, 11, 8.68, 11.71, 10.09, 9.7) heights_B &lt;- c(11.45, 11.89, 13.35, 11.56, 13.78, 12.12, 10.41, 11.99, 12.27, 13.43, 10.91, 9.13, 9.25, 9.94, 13.5, 11.26, 10.38, 13.78, 9.35, 11.67, 11.32, 11.98, 12.92, 12.03, 12.02) On the assumption that the metric measurements for flower ‘A’ come from a normal distribution, the goal is to estimate credible values for that normal distribution’s parameters \\(\\mu_{A}\\) and \\(\\sigma_{A}\\); and similarly for flower ‘B’. The “research question” of interest is whether it is credible that the mean of heights for flower ‘A’ is smaller than that of ‘B’ - or, in other words, whether the difference in means \\(\\delta = \\mu_{B} - \\mu_{A}\\) is credibly positive. Here are relevant summary statistics for this case, and a plot, both of which seem to support the conjecture that flower ‘A’ is smaller, on average, than flower ‘B’. # bring data into a more practical format ffm_data &lt;- tibble( A = heights_A, B = heights_B ) %&gt;% pivot_longer( cols = everything(), names_to = &#39;species&#39;, values_to = &#39;height&#39; ) # some summary statistics ffm_data %&gt;% group_by(species) %&gt;% summarise( mean = mean(height), std_dev = sd(height) ) ## # A tibble: 2 x 3 ## species mean std_dev ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 10.0 1.76 ## 2 B 11.7 1.38 ffm_data %&gt;% ggplot(aes(x = height)) + geom_density(aes(color = species), size = 2) + geom_rug() + facet_grid(~species, scales = &quot;free&quot;) + theme(legend.position = &#39;none&#39;) The remainder of this chapter will introduce two models for inferring the parameters of a (single) normal distribution, both of which are set-up in such a way that it is possible to compute a closed-form solution for the posterior distributions over \\(\\mu\\) and \\(\\sigma\\): (i) a model with uninformative priors, and (ii) a model with conjugate priors. These two models are also explained in the video below. 9.4.1 Uninformative priors The model with uninformative priors is shown in Figure 9.10. Figure 9.10: A model to infer the parameter of a normal distribution with non-informative priors. The posterior for variance \\(\\sigma^{2}\\) and mean \\(\\mu\\) for this model with uninformative priors is as follows: \\[ \\begin{align*} P(\\mu, \\sigma^2 \\mid \\mathbf{y}) &amp; = {\\color{7F2615}{P(\\sigma^2 | \\mathbf{y})}} \\ \\ \\ {\\color{353585}{P(\\mu \\mid \\sigma^2, \\mathbf{y})}} &amp; \\text{with:} \\\\ \\sigma^2 \\mid \\mathbf{y} &amp; \\sim \\mathrm{Inv}\\text{-}\\chi^2 \\left(n-1,\\ s^2 \\right) \\\\ \\mu \\mid \\sigma^2, \\mathbf{y} &amp; \\sim \\mathrm{Normal} \\left (\\bar{y} \\mid \\frac{\\sigma}{\\sqrt{n}} \\right) \\end{align*} \\] The aida package provides the convenience function aida::get_samples_single_noninformative, which we use below but also show explicitly first. It takes a vector data_vector (like height_A) of metric observations as input and returns n_samples samples from the posterior. get_samples_single_noninformative &lt;- function(data_vector, n_samples = 1000) { # determine sample variance s_squared &lt;- var(data_vector) # posterior samples of the variance var_samples &lt;- extraDistr::rinvchisq( n = n_samples, nu = length(data_vector) - 1, tau = s_squared ) # posterior samples of the mean given the sampled variance mu_samples &lt;- map_dbl( var_samples, function(var) rnorm( n = 1, mean = mean(data_vector), sd = sqrt(var / length(data_vector)) ) ) # return pairs of values tibble( mu = mu_samples, sigma = sqrt(var_samples) ) } If we apply this function for the data of flower ‘A’, we get samples of likely pairs consisting of means and standard deviations (each row is one pair of associated samples): aida::get_samples_single_noninformative(heights_A, n_samples = 5) ## # A tibble: 5 x 2 ## mu sigma ## &lt;dbl&gt; &lt;dbl&gt; ## 1 9.92 1.82 ## 2 9.83 1.89 ## 3 9.85 1.76 ## 4 9.87 2.62 ## 5 9.33 1.56 By taking more samples from this 2-dimensional (joint) posterior distribution a scatter point reveals its approximate shape. # take 10,000 samples from the posterior post_samples_A_noninfo &lt;- aida::get_samples_single_noninformative(data_vector = heights_A, n_samples = 10000) # look at a scatter plot post_samples_A_noninfo %&gt;% ggplot(aes(x = sigma, y = mu)) + geom_point(alpha = 0.4, color = &quot;lightblue&quot;) The plot below shows the marginal distributions of each variable, \\(\\mu\\) and \\(\\sigma\\), separately: post_samples_A_noninfo %&gt;% pivot_longer(cols = everything(), names_to = &quot;parameter&quot;, values_to = &quot;value&quot;) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_grid(~ parameter, scales = &quot;free&quot;) As usual, we can also produce the relevant Bayesian summary statistics for our samples, like so: rbind( aida::summarize_sample_vector(post_samples_A_noninfo$mu, &quot;mu&quot;), aida::summarize_sample_vector(post_samples_A_noninfo$sigma, &quot;sigma&quot;) ) ## # A tibble: 2 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mu 9.29 10.0 10.7 ## 2 sigma 1.32 1.81 2.36 9.4.2 Conjugate priors The model with uninformative priors is useful when modelers have no or wish to not include any a priori assumptions about \\(\\mu\\) and \\(\\sigma\\). When prior assumptions are relevant, we can use a slightly more complex model with conjugate priors. The model is shown in Figure 9.11. Figure 9.11: Model with conjugate priors. With this prior structure, the posterior is of the form: \\[ \\begin{align*} P(\\mu, \\sigma^2 \\mid \\mathbf{y}) &amp; = {\\color{7F2615}{P(\\sigma^2 | \\mathbf{y})}} \\ \\ \\ {\\color{353585}{P(\\mu \\mid \\sigma^2, \\mathbf{y})}} &amp; \\text{with:} \\\\ \\sigma^2 \\mid \\mathbf{y} &amp; \\sim {\\color{7F2615}{\\mathrm{Inv}\\text{-}\\chi^2 \\left({\\color{3F9786}{\\nu_1}},\\ {\\color{3F9786}{\\sigma^2_1}} \\right)}} \\\\ \\mu \\mid \\sigma^2, \\mathbf{y} &amp; \\sim {\\color{353585}{\\mathrm{Normal} \\left ({\\color{3F9786}{\\mu_1}}, \\frac{\\sigma}{\\sqrt{{\\color{3F9786}{\\kappa_1}}}} \\right)}} &amp; \\text{where:} \\\\ {\\color{3F9786}{\\nu_1}} &amp; = \\nu_0 + n \\\\ \\nu_n{\\color{3F9786}{\\sigma_1^2}} &amp; = \\nu_0 \\sigma_0^2 + (n-1) s^2 + \\frac{\\kappa_0 \\ n}{\\kappa_0 + n} (\\bar{y} - \\mu_0)^2 \\\\ {\\color{3F9786}{\\mu_1}} &amp; = \\frac{\\kappa_0}{\\kappa_0 + n} \\mu_0 + \\frac{n}{\\kappa_0 + n} \\bar{y} \\\\ {\\color{3F9786}{\\kappa_1}} &amp; = \\kappa_0 + n \\end{align*} \\] Exercise 9.7 The aida package provides the convenience function aida::sample_Norm_inv_chisq for sampling from the ‘normal inverse-\\(\\chi^2\\)’ prior. Here is the source code of this function: sample_Norm_inv_chisq &lt;- function( n_samples = 10000, nu = 1, var = 1, mu = 0, kappa = 1 ) { var_samples &lt;- extraDistr::rinvchisq( n = n_samples, nu = nu, tau = var ) mu_samples &lt;- map_dbl( var_samples, function(s) rnorm( n = 1, mean = mu, sd = sqrt(s / kappa) ) ) tibble( sigma = sqrt(var_samples), mu = mu_samples ) } In the code below, we use this function to plot 10,000 samples from the prior with a particular set of parameter values. Notice the line filter(abs(value) &lt;= 10) which is useful for an informative plot (try commenting it out: what does that tell you about the range of values reasonably likely to get sampled?). # samples from the prior samples_prior_1 &lt;- aida::sample_Norm_inv_chisq( nu = 1, var = 1, # a priori &quot;variance of the variance&quot; mu = 0, kappa = 1 ) samples_prior_1 %&gt;% pivot_longer(cols = everything(), names_to = &quot;parameter&quot;, values_to = &quot;value&quot;) %&gt;% filter(abs(value) &lt;= 10) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_grid(~parameter, scales = &quot;free&quot;) To get comfortable with this ‘normal inverse-\\(\\chi^2\\)’ distribution, fill in the XXX in the following code box (possibly removing or altering parts of the plotting code if you need to) to find parameter values that encode a prior belief according to which credible values of \\(\\sigma\\) are not much bigger than (very roughly) 7.5, and credible values of \\(\\mu\\) lie (very roughly) in the range of 15 to 25. (Hint: intuit what the meaning of each parameter value is by a trial-error-think method.) The plot you generate could look roughly like the one below. (Motivation for the exercise: you should get familiar with this distribution, and also realize that it is clunky and that you might want to use a different prior structure in order to encode specific beliefs … which is exactly why we might want to be more flexible and go beyond conjugate priors in some cases.) # samples from the prior samples_prior_2 &lt;- aida::sample_Norm_inv_chisq( nu = XXX, var = XXX, mu = XXX, kappa = XXX ) samples_prior_2 %&gt;% pivot_longer(cols = everything(), names_to = &quot;parameter&quot;, values_to = &quot;value&quot;) %&gt;% filter(!(parameter == &quot;mu&quot; &amp; (value &gt;= 40 | value &lt;= 0))) %&gt;% filter(!(parameter == &quot;sigma&quot; &amp; value &gt;= 10)) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_grid(~parameter, scales = &quot;free&quot;) Solution # samples from the prior samples_prior_2 &lt;- aida::sample_Norm_inv_chisq( nu = 1, var = 1, # a priori &quot;variance of the variance&quot; mu = 20, kappa = 1 ) samples_prior_2 %&gt;% pivot_longer(cols = everything(), names_to = &quot;parameter&quot;, values_to = &quot;value&quot;) %&gt;% filter(!(parameter == &quot;mu&quot; &amp; (value &gt;= 40 | value &lt;= 0))) %&gt;% filter(!(parameter == &quot;sigma&quot; &amp; value &gt;= 10)) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_grid(~parameter, scales = &quot;free&quot;) Here is another convenience function from the aida package for obtaining posterior samples for the conjugate prior model, taking as input a specification of the prior beliefs. Again, we first show the function explicitly before applying it to the flower data set. get_samples_single_normal_conjugate &lt;- function( data_vector, nu = 1, var = 1, mu = 0, kappa = 1, n_samples = 1000 ) { n &lt;- length(data_vector) aida::sample_Norm_inv_chisq( n_samples = n_samples, nu = nu + n, var = (nu * var + (n - 1) * var(data_vector) + (kappa * n) / (kappa + n)) / (nu + n), mu = kappa / (kappa + n) * mu + n / (kappa + n) * mean(data_vector), kappa = kappa + n ) } The code below calls this function to obtain samples from the posterior for two different models. This will help illustrate the effect of priors on the posterior once more, especially for a case like the one at hand where we have only rather few data observations. # posterior samples for prior 1 post_samples_A_conjugate_1 &lt;- aida::get_samples_single_normal_conjugate( heights_A, nu = 1, var = 1, mu = 0, kappa = 1, n_samples = 10000 ) # posterior samples for prior 2 post_samples_A_conjugate_2 &lt;- aida::get_samples_single_normal_conjugate( heights_A, nu = 1, var = 1/1000, mu = 40, kappa = 10, n_samples = 10000 ) rbind( aida::summarize_sample_vector(post_samples_A_conjugate_1$mu, &quot;mu&quot;) %&gt;% mutate(model = 1), aida::summarize_sample_vector(post_samples_A_conjugate_1$sigma, &quot;sigma&quot;) %&gt;% mutate(model = 1), aida::summarize_sample_vector(post_samples_A_conjugate_2$mu, &quot;mu&quot;) %&gt;% mutate(model = 2), aida::summarize_sample_vector(post_samples_A_conjugate_2$sigma, &quot;sigma&quot;) %&gt;% mutate(model = 2) ) ## # A tibble: 4 x 5 ## Parameter `|95%` mean `95%|` model ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mu 8.95 9.65 10.3 1 ## 2 sigma 1.31 1.76 2.27 1 ## 3 mu 18.0 18.6 19.2 2 ## 4 sigma 1.35 1.82 2.34 2 The posterior is a mixture of prior and likelihood. The prior for model 1 is rather weak (high variance, low \\(\\kappa\\) leading to a large range of plausible values for \\(\\mu\\)). The prior for model 2 is rather biased. The credible values of \\(\\mu\\) are rather high. 9.4.3 Estimating the difference between group means The ulterior “research question” to address is: should we believe that flowers of type B are higher, on average, than flowers of type A? To address this question, it suffices to take samples for \\(\\mu_{A}\\) and \\(\\mu_{B}\\), obtained by one of the methods introduced in the previous sections (using the same model for both flower types, unless we have a good reason not to), and then to inspect the vector of differences between samples \\(\\delta = \\mu_{B} - \\mu_{A}\\). If the derived samples of \\(\\delta\\) are credibly bigger than zero, there is reason to believe that there is a difference between flower types such that ‘B’ is bigger than ‘A’. So, let’s use the (conjugate) prior of model 1 from above to also take 10,000 samples from the posterior when conditioning with the data in heights_B. Store the results in a vector called post_samples_B_conjugate_1. post_samples_B_conjugate_1 &lt;- aida::get_samples_single_normal_conjugate( heights_B, nu = 1, var = 1, mu = 0, kappa = 1, n_samples = 10000 ) The summary of the difference vector gives us information about credible values of \\(\\delta = \\mu_{B} - \\mu_{A}\\). delta_flower_heights &lt;- post_samples_B_conjugate_1$mu - post_samples_A_conjugate_1$mu aida::summarize_sample_vector(delta_flower_heights, name = &#39;delta&#39;) ## # A tibble: 1 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 delta 0.703 1.56 2.46 We might conclude from this that a positive difference in height is credible. More on Bayesian testing of such hypotheses about parameter values in Chapter 11. "],["Chap-03-06-model-comparison.html", "10 Model Comparison", " 10 Model Comparison Parameter estimation (the topic of the last chapter) asks: given a single model and the data, what are good (e.g., credible) values of the model’s parameters? Model comparison (the topic of this chapter) asks: based on the data at hand, which of several models is better? Or even: how much better is this model compared to another, given the data? The pivotal criterion by which to compare models is how well a model explains the observed data. A good explanation of observed data \\(D\\) is one that makes \\(D\\) unsurprising. Intuitively, we long for an explanation for things that puzzle us. A good explanation is a way of looking at the world in which puzzles disappear, in which all observations make sense, in which what we have seen would have been quite expectable after all. Consequently, the pivotal quantity for comparing models is how likely \\(D\\) is given a model \\(M_i\\): \\(P(D \\mid M_i)\\). But there is more to a good explanation, also intuitively. All else equal, a good explanation is simple. If theories \\(A\\) and \\(B\\) both explain the facts equally well, but \\(A\\) does so with less “mental machinery”, most people would choose the more economical explanation \\(A\\). In this chapter, we will look at two common methods of comparing models: the Akaike information criterion (AIC) and Bayes factors. AICs are a non-Bayesian method in the sense that it does not require (or ignores) a model’s priors over parameter values. Bayes factors are the flagship Bayesian method for model comparison. There are many other approaches to model comparison (e.g., other kinds of information criteria, or methods based on cross-validation). Our goal is not to be exhaustive, but to introduce the main ideas of model comparison and showcase a reasonable selection of representative approaches. The learning goals for this chapter are: understand the differences between estimation and model comparison understand and apply the two covered methods: Akaike information criterion Bayes factor become familiar with the pros and cons of each of these methods [optional] get acquainted with some methods for computing Bayes factors "],["Chap-03-06-model-comparison-case-study.html", "10.1 Case study: recall models", " 10.1 Case study: recall models As a running example for this chapter, we borrow from Myung (2003) and consider a fictitious data set of recall rates and two models to explain this data. As for the data, for each time point (in seconds) \\(t \\in \\{1, 3, 6, 9, 12, 18\\}\\), we have 100 (binary) observations of whether a previously memorized item was recalled correctly. # time after memorization (in seconds) t &lt;- c(1, 3, 6, 9, 12, 18) # proportion (out of 100) of correct recall y &lt;- c(.94, .77, .40, .26, .24, .16) # number of observed correct recalls (out of 100) obs &lt;- y * 100 A visual representation of this data set is here: We are interested in comparing two theoretically different models for this data. Models differ in their assumption about the functional relationship between recall probability and time. The exponential model assumes that the recall probability \\(\\theta_t\\) at time \\(t\\) is an exponential decay function with parameters \\(a\\) and \\(b\\): \\[\\theta_t(a, b) = a \\exp (-bt), \\ \\ \\ \\ \\text{where } a,b&gt;0 \\] Taking the binary nature of the data (recalled / not recalled) into account, this results in the following likelihood function for the exponential model: \\[ \\begin{aligned} P(k \\mid a, b, N , M_{\\text{exp}}) &amp; = \\text{Binom}(k,N, a \\exp (-bt)), \\ \\ \\ \\ \\text{where } a,b&gt;0 \\end{aligned} \\] In contrast, the power model assumes that the relationship is that of a power function: \\[\\theta_t(c, d) = ct^{-d}, \\ \\ \\ \\ \\text{where } c,d&gt;0 \\] The resulting likelihood function for the power model is: \\[ \\begin{aligned} P(k \\mid c, d, N , M_{\\text{pow}}) &amp; = \\text{Binom}(k,N, c\\ t^{-d}), \\ \\ \\ \\ \\text{where } c,d&gt;0 \\end{aligned} \\] These models therefore make different (parameterized) predictions about the time course of forgetting/recall. Figure 10.1 shows the predictions of each model for \\(\\theta_t\\) for different parameter values: Figure 10.1: Examples of predictions of the exponential and the power model of forgetting for different values of each model’s parameters. The research question of relevance is: which of these two models is a better model for the observed data? We are going to look at the Akaike information criterion (AIC) first, which only considers the models’ likelihood functions and is therefore a non-Bayesian method. We will see that AIC scores are easy to compute, but give numbers that are hard to interpret or only approximation of quantities that have a clear interpretation. Then we look at a Bayesian method, using Bayes factors, which does take priors over model parameters into account. We will see that Bayes factors are much harder to compute, but do directly calculate quantities that are intuitively interpretable. We will also see that AIC scores only very indirectly take a model’s complexity into account. References "],["Chap-03-06-model-comparison-AIC.html", "10.2 Akaike Information Criterion", " 10.2 Akaike Information Criterion A wide-spread non-Bayesian approach to model comparison is to use the Akaike information criterion (AIC). The AIC is the most common instance of a class of measures for model comparison known as information criteria, which all draw on information-theoretic notions to compare how good each model is. If \\(M_i\\) is a model, specified here only by its likelihood function \\(P(D \\mid \\theta_i, M_i)\\), with \\(k_i\\) model parameters in parameter vector \\(\\theta_i\\), and if \\(D_\\text{obs}\\) is the observed data, then the AIC score of model \\(M_i\\) given \\(D_\\text{obs}\\) is defined as: \\[ \\begin{aligned} \\text{AIC}(M_i, D_\\text{obs}) &amp; = 2k_i - 2\\log P(D_\\text{obs} \\mid \\hat{\\theta_i}, M_i) \\end{aligned} \\] Here, \\(\\hat{\\theta}_i = \\arg \\max_{\\theta_i} P(D_\\text{obs} \\mid \\theta_i, M_i)\\) is the best-fitting parameter vector, i.e., the maximum likelihood estimate (MLE), and \\(k\\) is the number of free parameters in model \\(M_i\\). The lower an AIC score, the better the model (in comparison to other models for the same data \\(D_\\text{obs}\\)). All else equal, the higher the number of free parameters \\(k_i\\), the worse the model’s AIC score. The first summand in the definition above can, therefore, be conceived of as a measure of model complexity. As for the second summand, think of \\(- \\log P(D_\\text{obs} \\mid \\hat{\\theta}_i, M_i)\\) as a measure of (information-theoretic) surprisal: how surprising is the observed data \\(D_\\text{obs}\\) from the point of view of model \\(M\\) under the most favorable circumstances (that is, the MLE of \\(\\theta_i\\)). The higher the probability \\(P(D_\\text{obs} \\mid \\hat{\\theta}_i, M_i)\\), the better the model \\(M_i\\)’s AIC score, all else equal. To apply AIC-based model comparison to the recall models, we first need to compute the MLE of each model (see Chapter 9.1.3). Here are functions that return the negative log-likelihood of each model, for any (suitable) pair of parameter values: # generic neg-log-LH function (covers both models) nLL_generic &lt;- function(par, model_name) { w1 &lt;- par[1] w2 &lt;- par[2] # make sure paramters are in acceptable range if (w1 &lt; 0 | w2 &lt; 0 | w1 &gt; 20 | w2 &gt; 20) { return(NA) } # calculate predicted recall rates for given parameters if (model_name == &quot;exponential&quot;) { theta &lt;- w1 * exp(-w2 * t) # exponential model } else { theta &lt;- w1 * t^(-w2) # power model } # avoid edge cases of infinite log-likelihood theta[theta &lt;= 0.0] &lt;- 1.0e-4 theta[theta &gt;= 1.0] &lt;- 1 - 1.0e-4 # return negative log-likelihood of data - sum(dbinom(x = obs, prob = theta, size = 100, log = T)) } # negative log likelihood of exponential model nLL_exp &lt;- function(par) {nLL_generic(par, &quot;exponential&quot;)} # negative log likelihood of power model nLL_pow &lt;- function(par) {nLL_generic(par, &quot;power&quot;)} These functions are then optimized with R’s built-in function optim. The results are shown in the table below. # getting the best fitting values bestExpo &lt;- optim(nLL_exp, par = c(1, 0.5)) bestPow &lt;- optim(nLL_pow, par = c(0.5, 0.2)) MLEstimates &lt;- data.frame(model = rep(c(&quot;exponential&quot;, &quot;power&quot;), each = 2), parameter = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), value = c(bestExpo$par, bestPow$par)) MLEstimates ## model parameter value ## 1 exponential a 1.0701722 ## 2 exponential b 0.1308151 ## 3 power c 0.9531330 ## 4 power d 0.4979154 The MLE-predictions of each model are shown in Figure 10.2 below, alongside the observed data. Figure 10.2: Predictions of the exponential and the power model under best-fitting parameter values. By visual inspection of Figure 10.2 alone, it is impossible to say with confidence which model is better. Numbers might help see more fine-grained differences. So, let’s look at the log-likelihood and the corresponding probability of the data for each model under each model’s best fitting parameter values. predExp &lt;- expo(t, a, b) predPow &lt;- power(t, c, d) modelStats &lt;- tibble( model = c(&quot;expo&quot;, &quot;power&quot;), `log likelihood` = round(c(-bestExpo$value, -bestPow$value), 3), probability = signif(exp(c(-bestExpo$value, -bestPow$value)), 3), # sum of squared errors SS = round(c(sum((predExp - y)^2), sum((predPow - y)^2)), 3) ) modelStats ## # A tibble: 2 x 4 ## model `log likelihood` probability SS ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 expo -18.7 7.82e- 9 0.019 ## 2 power -26.7 2.47e-12 0.057 The exponential model has a higher log-likelihood, a higher probability, and a lower sum of squares. This suggests that the exponential model is better. The AIC-score of these models is a direct function of the negative log-likelihood. Since both models have the same number of parameters, we arrive at the same verdict as before: based on a comparison of AIC-scores, the exponential model is the better model. get_AIC &lt;- function(optim_fit) { 2 * length(optim_fit$par) + 2 * optim_fit$value } AIC_scores &lt;- tibble( AIC_exponential = get_AIC(bestExpo), AIC_power = get_AIC(bestPow) ) AIC_scores ## # A tibble: 1 x 2 ## AIC_exponential AIC_power ## &lt;dbl&gt; &lt;dbl&gt; ## 1 41.3 57.5 How should we interpret the difference in AIC-scores? Some suggest that differences in AIC-scores larger than 10 should be treated as implying that the weaker model has practically no empirical support (Burnham and Anderson 2002). Adopting such a criterion, we would therefore favor the exponential model based on the data observed. But we could also try to walk a more nuanced, more quantitative road. We would ideally want to know the absolute probability of \\(M_i\\) given the data: \\(P(M_i \\mid D)\\). Unfortunately, to calculate this (by Bayes rule), we would need to normalize by quantifying over all models. Alternatively, we look at the relative probability of a small selection of models. Indeed, we can look at relative AIC-scores in terms of so-called Akaike weights (Wagenmakers and Farrell 2004; Burnham and Anderson 2002) to derive an approximation of \\(P(M_i \\mid D)\\), at least for the case where we only consider a small set of candidate models. So, if we want to compare models \\(M_1, \\dots, M_n\\) and \\(\\text{AIC}(M_i, D)\\) is the AIC-score of model \\(M_i\\) for observed data \\(D\\), then the Akaike weight of model \\(M_i\\) is defined as: \\[ \\begin{aligned} w_{\\text{AIC}}(M_i, D) &amp; = \\frac{\\exp (- 0.5 * \\Delta_{\\text{AIC}}(M_i,D) )} {\\sum_{j=1}^k\\exp (- 0.5 * \\Delta_{\\text{AIC}}(M_j,D) )}\\, \\ \\ \\ \\ \\text{where} \\\\ \\Delta_{\\text{AIC}}(M_i,D) &amp; = \\text{AIC}(M_i, D) - \\min_j \\text{AIC}(M_j, D) \\end{aligned} \\] Akaike weights are relative and normalized measures, and may serve as an approximate measure of a model’s posterior probability given the data: \\[ P(M_i \\mid D) \\approx w_{\\text{AIC}}(M_i, D) \\] For the running example at hand, this would mean that we could conclude that the posterior probability of the exponential model is approximately: delta_AIC_power &lt;- AIC_scores$AIC_power - AIC_scores$AIC_exponential delta_AIC_exponential &lt;- 0 Akaike_weight_exponential &lt;- exp(-0.5 * delta_AIC_exponential) / (exp(-0.5 * delta_AIC_exponential) + exp(-0.5 * delta_AIC_power)) Akaike_weight_exponential ## [1] 0.9996841 We can interpret this numerical result as indicating that, given a universe in which only the exponential and the power model exist, the posterior probability of the exponential model is almost 1 (assuming, implicitly, that both models are equally likely a priori). We would conclude from this approximate quantitative assessment that the empirical evidence supplied by the given data in favor of the exponential model is very strong. Our approximation is better the more data we have. We will see a method below, the Bayesian method using Bayes factors, which computes \\(P(M_i \\mid D)\\) in a non-approximate way. Exercise 11.1 Describe what the following variables represent in the AIC formula: \\[ \\begin{aligned} \\text{AIC}(M_i, D_\\text{obs}) &amp; = 2k_i - 2\\log P(D_\\text{obs} \\mid \\hat{\\theta_i}, M_i) \\end{aligned} \\] \\(k_i\\) stands for: \\(\\hat{\\theta_i}\\) stands for: \\(P(D_\\text{obs} \\mid \\hat{\\theta_i}, M_i)\\) stands for: Solution the number of free parameters in model \\(M_{i}\\); the parameter vector obtained by maximum likelihood estimation for model \\(M_{i}\\) and data \\(D_{\\text{obs}}\\); the likelihood of the data \\(D_{\\text{obs}}\\) under the best fitting parameters of a model \\(M_{i}\\). Do you see that there is something “circular” in the definition of AICs? (Hint: What do we use the data \\(D_{\\text{obs}}\\) for?) Solution We use the same data twice! We use \\(D_{\\text{obs}}\\) to find the best fitting parameter values, and then we ask how likely \\(D_{\\text{obs}}\\) is given the best fitting parameter values. If model comparison is about how well a model explains the data, then this is a rather circular measure: we quantify how well a model explains or predicts a data set after having “trained / optimized” the model for exactly this data set. References "],["Chap-03-06-model-comparison-BF.html", "10.3 Bayes factors", " 10.3 Bayes factors At the end of the previous section, we saw that we can use the AIC-approach to calculate an approximate value of the posterior probability \\(P(M_{i} \\mid D)\\) for model \\(M_{i}\\) given data \\(D\\). The Bayes factor approach is similar to this, but avoids taking priors over models into the equation by focusing on the extent to which data \\(D\\) changes our beliefs about which model is more likely. Take two Bayesian models: \\(M_1\\) has prior \\(P(\\theta_1 \\mid M_1)\\) and likelihood \\(P(D \\mid \\theta_1, M_1)\\) \\(M_2\\) has prior \\(P(\\theta_2 \\mid M_2)\\) and likelihood \\(P(D \\mid \\theta_2, M_2)\\) Using Bayes rule, we compute the posterior odds of models (given the data) as the product of the likelihood ratio and the prior odds. \\[\\underbrace{\\frac{P(M_1 \\mid D)}{P(M_2 \\mid D)}}_{\\text{posterior odds}} = \\underbrace{\\frac{P(D \\mid M_1)}{P(D \\mid M_2)}}_{\\text{Bayes factor}} \\ \\underbrace{\\frac{P(M_1)}{P(M_2)}}_{\\text{prior odds}}\\] The likelihood ratio is also called the Bayes factor. Formally, the Bayes factor is the factor by which a rational agent changes her prior odds in the light of observed data to arrive at the posterior odds. More intuitively, the Bayes factor quantifies the strength of evidence given by the data about the models of interest. It expresses this evidence in terms of the models’ relative prior predictive accuracy. To see the latter, let’s expand the Bayes factor as what it actually is: the ratio of marginal likelihoods. \\[ \\frac{P(D \\mid M_1)}{P(D \\mid M_2)} = \\frac{\\int P(\\theta_1 \\mid M_1) \\ P(D \\mid \\theta_1, M_1) \\text{ d}\\theta_1}{\\int P(\\theta_2 \\mid M_2) \\ P(D \\mid \\theta_2, M_2) \\text{ d}\\theta_2} \\] Three insights are to be gained from this expansion. Firstly, the Bayes factor is a measure of how well each model would have predicted the data ex ante, i.e., before having seen any data. In this way, it is diametrically opposed to a concept like AIC, which relies on models’ maximum likelihood fits (therefore using the data, so being ex post). Secondly, the marginal likelihood of a model is exactly the quantity that we identified (in the context of parameter estimation) as being very hard to compute, especially for complex models. The fact that marginal likelihoods are hard to compute was the reason that methods like MCMC sampling are useful, since they give posterior samples without requiring the calculation of marginal likelihoods. It follows that Bayes factors can be very difficult to compute in general. However, for many prominent models, it is possible to calculate Bayes factors analytically if the right kinds of priors are specified (Rouder et al. 2009; Rouder and Morey 2012; Gronau, Ly, and Wagenmakers 2019). We will see an example of this in Chapter 11. Also, as we will see in the following there are very clever approaches to computing Bayes factors in special cases and good algorithms for approximating marginal likelihoods also for complex models. Thirdly, Bayes factor model comparison implicitly (and quite vigorously) punishes model complexity, but in a more sophisticated manner than just counting free parameters. To appreciate this intuitively, imagine a model with a large parameter set and a very diffuse, uninformative prior that spreads its probability over a wide range of parameter values. Since Bayes factors are computed based on ex ante predictions, a diffuse model is punished for its imprecision of prior predictions because we integrate over all parameters (weighted by priors) and their associated likelihood. As for notation, we write: \\[\\text{BF}_{12} = \\frac{P(D \\mid M_1)}{P(D \\mid M_2)}\\] for the Bayes factor in favor of model \\(M_1\\) over model \\(M_2\\). This quantity can take on positive values, which are often translated into natural language as follows: \\(BF_{12}\\) interpretation 1 irrelevant data 1 - 3 hardly worth ink or breath 3 - 6 anecdotal 6 - 10 now we’re talking: substantial 10 - 30 strong 30 - 100 very strong 100 + decisive (bye, bye \\(M_2\\)!) As \\(\\text{BF}_{12} = \\text{BF}_{21}^{-1}\\), it suffices to give this translation into natural language only for values \\(\\ge 1\\). There are at least two general approaches to calculating or approximating Bayes factors, paired here with a (non-exhaustive) list of example methods: get each model’s marginal likelihood grid approximation (see Section 10.3.1) by Monte Carlo sampling (see Section 10.3.2) bridge sampling (see Section 10.3.3) get Bayes factor directly Savage-Dickey method (see Section 11.4.1) using encompassing models (see Section 11.4.2) 10.3.1 Grid approximation We can use grid approximation to approximate a model’s marginal likelihood if the model is small enough, say, no more than 4-5 free parameters. Grid approximation considers discrete values for each parameter evenly spaced over the whole range of plausible parameter values, thereby approximating the integral in the definition of marginal likelihoods. Let’s calculate an example for the comparison of the exponential and the power model of forgetting. To begin with, we need to define a prior over parameters to obtain Bayesian versions of the exponential and power model. Here, we assume flat priors over a reasonable range of parameter values for simplicity. For the exponential model, we choose: \\[ \\begin{aligned} P(k \\mid a, b, N, M_{\\text{exp}}) &amp; = \\text{Binom}(k,N, a \\exp (-bt_i)) \\\\ P(a \\mid M_{\\text{exp}}) &amp; = \\text{Uniform}(a, 0, 1.5) \\\\ P(b \\mid M_{\\text{exp}}) &amp; = \\text{Uniform}(b, 0, 1.5) \\end{aligned} \\] The (Bayesian) power model is given by: \\[ \\begin{aligned} P(k \\mid c, d, N, M_{\\text{pow}}) &amp; = \\text{Binom}(k,N, c\\ t_i^{-d}) \\\\ P(c \\mid M_{\\text{pow}}) &amp; = \\text{Uniform}(c, 0, 1.5) \\\\ P(d \\mid M_{\\text{pow}}) &amp; = \\text{Uniform}(d, 0, 1.5) \\end{aligned} \\] We can also express these models in code, like so: # prior exponential model priorExp &lt;- function(a, b){ dunif(a, 0, 1.5) * dunif(b, 0, 1.5) } # likelihood function exponential model lhExp &lt;- function(a, b){ theta &lt;- a * exp(-b * t) theta[theta &lt;= 0.0] &lt;- 1.0e-5 theta[theta &gt;= 1.0] &lt;- 1 - 1.0e-5 prod(dbinom(x = obs, prob = theta, size = 100)) } # prior power model priorPow &lt;- function(c, d){ dunif(c, 0, 1.5) * dunif(d, 0, 1.5) } # likelihood function power model lhPow &lt;- function(c, d){ theta &lt;- c * t^(-d) theta[theta &lt;= 0.0] &lt;- 1.0e-5 theta[theta &gt;= 1.0] &lt;- 1 - 1.0e-5 prod(dbinom(x = obs, prob = theta, size = 100)) } To approximate each model’s marginal likelihood via grid approximation, we consider equally spaced values for both parameters (a tighly knit grid), assess the prior and likelihood for each parameter pair and finally take the sum over all of the visited values: # make sure the functions accept vector input lhExp &lt;- Vectorize(lhExp) lhPow &lt;- Vectorize(lhPow) # define the step size of the grid stepsize &lt;- 0.01 # calculate the marginal likelihood marg_lh &lt;- expand.grid( x = seq(0.005, 1.495, by = stepsize), y = seq(0.005, 1.495, by = stepsize) ) %&gt;% mutate( lhExp = lhExp(x, y), priExp = 1 / length(x), # uniform priors! lhPow = lhPow(x, y), priPow = 1 / length(x) ) # output result str_c( &quot;BF in favor of exponential model: &quot;, with(marg_lh, sum(priExp * lhExp) / sum(priPow * lhPow)) %&gt;% round(2) ) ## [1] &quot;BF in favor of exponential model: 1221.39&quot; Based on this computation, we would be entitled to conclude that the data provide overwhelming evidence in favor of the exponential model. The result tells us that a rational agent should adjust her prior odds by a factor of more than 1000 in favor of the exponential model when updating her beliefs with the data. In other words, the data tilt our beliefs very strongly towards the exponential model, no matter what we believed initially. In this sense, the data provide strong evidence for the exponential model. 10.3.2 Naive Monte Carlo For simple models (with maybe 4-5 free parameters), we can also use naive Monte Carlo sampling to approximate Bayes factors. In particular, we can approximate the marginal likelihood by taking samples from the prior, calculating the likelihood of the data for each sampled parameter tuple, and then averaging over all calculated likelihoods: \\[P(D, M_i) = \\int P(D \\mid \\theta, M_i) \\ P(\\theta \\mid M_i) \\ \\text{d}\\theta \\approx \\frac{1}{n} \\sum^{n}_{\\theta_j \\sim P(\\theta \\mid M_i)} P(D \\mid \\theta_j, M_i)\\] Here is a calculation using one million samples from the prior of each model: nSamples &lt;- 1000000 # sample from the prior a &lt;- runif(nSamples, 0, 1.5) b &lt;- runif(nSamples, 0, 1.5) # calculate likelihood of data for each sample lhExpVec &lt;- lhExp(a, b) lhPowVec &lt;- lhPow(a, b) # compute marginal likelihoods str_c( &quot;BF in favor of exponential model: &quot;, round(mean(lhExpVec) / mean(lhPowVec), 2) ) ## [1] &quot;BF in favor of exponential model: 1190.76&quot; We can also check the time course of our MC-estimate by a plot like that in Figure 10.3. The plot shows the current estimate of the Bayes factor on the \\(y\\)-axis after having taken the number of samples given on the \\(x\\)-axis. We see that the initial calculations (after only 10,000 samples) are far off, but that the approximation finally gets reasonably close to the value calculated by grid approximation, which is shown as the red line. Figure 10.3: Temporal development (as more samples come in) of the Monte Carlo estimate of the Bayes factor in favor of the exponential model over the power model of forgetting. The red horizontal line indicates the Bayes factor estimate obtained previously via grid approximation. Exercise 11.3 Which statements concerning Bayes Factors (BF) are correct? The Bayes Factor shows the absolute probability of a particular model to be a good explanation of the observed data. If \\(BF_{12} = 11\\), one should conclude that there is strong evidence in favor of \\(M_1\\). Grid approximation allows us to compare no more than five models simultaneously. With the Naive Monte Carlo method, we can only approximate the BF for models with continuous parameters. BF computation penalizes more complex models. Solution Statements b. and e. are correct. 10.3.3 Excursion: Bridge sampling For more complex models (e.g., high-dimensional/hierarchical parameter spaces), naive Monte Carlo methods can be highly inefficient. If random sampling of parameter values from the priors is unlikely to deliver values for which the likelihood of the data is reasonably high, most naive MC samples will contribute very little information to the overall estimate of the marginal likelihood. For this reason, there are better sampling-based procedures which preferentially sample a posteriori credible parameter values (given the data) and use clever math to compensate for using the wrong distribution to sample from. This is the main idea behind approaches like importance sampling. A very promising approach is in particular bridge sampling, which also has its own R package (Gronau et al. 2017). We will not go into the formal details of this method, but just showcase here an application of the bridgesampling package. This approach requires samples from the posterior, which we can obtain using Stan (see Section 9.3.2). Towards this end, we first assemble the data for input to the Stan program in a list: forgetting_data &lt;- list( N = 100, k = obs, t = t ) The models are implemented in Stan. We here only show the exponential model. data { int&lt;lower=1&gt; N ; int&lt;lower=0,upper=N&gt; k[6] ; int&lt;lower=0&gt; t[6]; } parameters { real&lt;lower=0,upper=1.5&gt; a ; real&lt;lower=0,upper=1.5&gt; b ; } model { // likelihood for (i in 1:6) { target += binomial_lpmf(k[i] | N, a * exp(-b * t[i])) ; } } We then use Stan to obtain samples from the posterior in the usual way. To get reliable estimates of Bayes factors via bridge sampling, we should take a much larger number of samples than we usually would for a reliable estimation of, say, the posterior means and credible intervals. stan_fit_expon &lt;- rstan::stan( # where is the Stan code file = &#39;models_stan/model_comp_exponential_forgetting.stan&#39;, # data to supply to the Stan program data = forgetting_data, # how many iterations of MCMC iter = 20000, # how many warmup steps warmup = 2000 ) stan_fit_power &lt;- rstan::stan( # where is the Stan code file = &#39;models_stan/model_comp_power_forgetting.stan&#39;, # data to supply to the Stan program data = forgetting_data, # how many iterations of MCMC iter = 20000, # how many warmup steps warmup = 2000 ) The bridgesampling package can then be used to calculate each model’s marginal likelihood. expon_bridge &lt;- bridgesampling::bridge_sampler(stan_fit_expon, silent = T) power_bridge &lt;- bridgesampling::bridge_sampler(stan_fit_power, silent = T) We then obtain an estimate of the Bayes factor in favor of the exponential model with this function: bridgesampling::bf(expon_bridge, power_bridge) ## Estimated Bayes factor in favor of expon_bridge over power_bridge: 1225.87337 References "],["ch-03-07-hypothesis-testing-Bayes.html", "11 Bayesian hypothesis testing", " 11 Bayesian hypothesis testing This chapter introduces common Bayesian methods of testing what we could call statistical hypotheses. A statistical hypothesis is a hypothesis about a particular model parameter or a set of model parameters. Most often, such a hypothesis concerns one parameter, and the assumption in question is that this parameter takes on a specific value, or some value from a specific interval. Henceforth, we speak just of a “hypothesis” even though we mean a specific hypothesis about particular model parameters. For example, we might be interested in what we will call a point-valued hypothesis, stating that the value of parameter \\(\\theta\\) is fixed to a specific value \\(\\theta = \\theta^*\\). Section 11.1 introduces different kinds of statistical hypotheses in more detail. Given a statistical hypothesis about parameter values, we are interested in “testing” it. Strictly speaking, the term “testing” should probably be reserved for statistical decision procedures which give clear categorical judgements, such as whether to reject a hypothesis, accept it as true or to withhold judgement because no decision can be made (yet/currently). While we will encounter such categorical decision routines in this chapter, Bayesian approaches to hypotheses “testing” are first and foremost concerned, not with categorical decisions, but with quantifying evidence in favor or against the hypothesis in question. (In a second step, using Bayesian decision theory which also weighs in the utility of different policy choices, we can use Bayesian inference also for informed decision making, of course.) But instead of speaking of “Bayesian inference to weigh evidence for/against a hypothesis” we will just speak of “Bayesian hypothesis testing” for ease of parlor. We consider two conceptually distinct approaches within Bayesian hypothesis testing. Estimation-based testing considers just one model. It uses the observed data \\(D_\\text{obs}\\) to retrieve posterior beliefs \\(P(\\theta \\mid D_{\\text{obs}})\\) and checks whether, a posteriori, our hypothesis is credible. Comparison-based testing uses Bayesian model comparison, in the form of Bayes factors, to compare two models, namely one model that assumes that the hypothesis in question is true, and one model that assumes that the complement of the hypothesis is true. The main difference between these two approaches is that estimation-based hypothesis testing is simpler (conceptually and computationally), but less informative than comparison-based hypothesis testing. In fact, comparison-based methods give a clearer picture of the quantitative evidence for/against a hypothesis because they explicitly take into account a second alternative to the hypothesis which is to be tested. As we will see in this chapter, the technical obstacles for comparison-based approaches can be overcome. For special but common use cases, like testing directional hypotheses, there are efficient methods of performing comparison-based hypothesis testing. The learning goals for this chapter are: understand the notion of a statistical hypothesis point-valued, ROPE-d and directional hypotheses complement / alternative hypothesis be able to apply Bayesian hypothesis testing to (simple) case studies understand and be able to apply the Savage-Dickey method (and its extension to interval-based hypotheses in terms of encompassing models) become familiar with a Bayesian \\(t\\)-test model for comparing the means of two groups of metric measurements "],["ch-03-07-hypothesis-testing-Bayes-hypotheses.html", "11.1 Statistical hypotheses", " 11.1 Statistical hypotheses Given a model \\(M\\) with parameter space \\(\\Theta\\), a statistical hypothesis, in the sense entertained here, is an assumption (made for purposes of investigation) that certain parameters \\(\\Theta_i\\) take on only a restricted range of values. For example, we might be interested in the question of whether a particular coin is fair. We consider the Binomial model, which contains the coin bias parameter \\(\\theta_c\\). Informal assumptions about the coin’s bias can then be translated into a concrete question about values of \\(\\theta_{c}\\). This chapter considers three types of statistical hypotheses, which are also represented schematically in Figure 11.1. While all of the below also applies to discrete parameters and vectors of parameters, the implicit assumption in what follows is that we are dealing with a single continuous parameter. Point-valued hypotheses ask whether it is plausible that the parameter of relevance is identical to exactly one specific value. For example, in a Binomial model with the coin’s bias parameter \\(\\theta_{c}\\), a point-valued hypothesis could be that \\(\\theta_c = 0.5\\). More generally, we write \\(\\theta = \\theta^*\\) for a point-valued hypothesis about some (singular) parameter \\(\\theta\\). ROPE-d hypotheses, where “ROPE” is short for region of practical equivalence, define a small \\(\\epsilon\\)-region around a point-value of interest, and address the question of whether it is plausible that the parameter value lies inside this interval. For example, suppose that instead of addressing the point-valued hypothesis \\(\\theta_{c} = 0.5\\) about a coin’s latent bias, we are able (e.g., through prior research or a priori conceptual considerations) to specify a reasonable region of practical equivalence (= ROPE) around the parameter value of interest. For instance, we might know that a difference of 0.1 in a coin’s bias really counts as normal slack and negligible for practical purposes. We then address the ROPE-d hypothesis that \\(\\theta_{c} \\in [0.49, 0.51]\\). More generally, we write \\(\\theta \\in [\\theta^* - \\epsilon\\ ;\\ \\theta^* + \\epsilon]\\), or \\(\\theta = \\theta^* \\pm \\epsilon\\) for ROPE-d hypothesis around the pivotal values \\(\\theta^*\\). Directional hypotheses fix a specific parameter value, as a lower or upper bound and ask whether it is plausible that the parameter’s value is bigger or smaller than that fixed value. For example, \\(\\theta_{c} &gt; 0.5\\) could be the directional hypothesis that a coin is biased towards heads. Figure 11.1: Three common types of hypotheses anchored to a point-value of interest of a parameter. Ignoring trivial edge cases, both ROPE-d and directional hypotheses are instances of interval-based hypotheses in the sense that they assume that the true value lies in an interval. The complement of a point-valued hypothesis \\(\\theta = \\theta^*\\) is the hypothesis that the true value is not equal to the critical value: \\(\\theta \\neq \\theta^*\\). The complement of an interval-based hypothesis is the hypothesis that the true parameter value does not lie in the relevant interval. For example, the complement of the ROPE-d hypothesis \\(\\theta \\in [\\theta^* - \\epsilon\\ ;\\ \\theta^* + \\epsilon]\\) is that \\(\\theta \\not \\in [\\theta^* - \\epsilon\\ ;\\ \\theta^* + \\epsilon]\\). In the context of hypothesis testing, in particular frequentist testing (see Chapter 16), we often address the hypothesis to be tested as the null hypothesis. The complement of the null hypothesis is called alternative hypothesis. "],["data-and-models-for-this-chapter.html", "11.2 Data and models for this chapter", " 11.2 Data and models for this chapter This chapter uses two case studies as running examples: the (fictitious) 24/7 coin-flip example analyzed with the Binomial model, and data from the Simon task analyzed with a so-called Bayesian \\(t\\)-test model. 11.2.1 24/7 We will use the same (old) example of binomial data: \\(k = 7\\) heads out of \\(N = 24\\) coin flips. Just as before, we will use the standard binomial model with a flat Beta prior, shown below in graphical notation: Figure 11.2: The Binomial Model (repeated from before). We are interested in the following hypotheses: Point-valued: \\(\\theta_c = 0.5\\) ROPE-d \\(\\theta_c = \\in [0.5 - \\epsilon; 0.5 + \\epsilon]\\) with \\(\\epsilon = 0.01\\) Directional \\(\\theta_c &lt; 0.5\\) 11.2.2 Simon task The Simon task is a classic experimental design to investigate interference of, intuitively put, task-relevant properties and task-irrelevant properties. Chapter D.2 introduces the experiment and the (cleaned) data we analyze here. data_simon_cleaned &lt;- aida::data_ST The most important columns in this data set for our current purposes are: RT: The reaction time for each trial. condition: Whether the trial was a congruent or an incongruent trial. Concretely, we are interested in comparing the mean reaction times across conditions: Figure 11.3: Distribution of reaction times of correct answers in the congruent and incongruent condition of the Simon task. Vertical lines indicate the mean of each condition. In order to compare the means of continuous measurements between two groups we will use a so-called \\(t\\)-test model. (The reason why this is called a “\\(t\\)-test model” is historical and will become clear in Chapter 16.) There are different variations of Bayesian \\(t\\)-test models. Here, we use the one proposed by Gönen et al. (2005), which enables us to compute Bayes factor model comparison for point-valued hypotheses analytically. The model is shown in Figure 11.4. Figure 11.4: Bayesian \\(t\\)-test model following Gönen et al. (2005) for inferences about the difference in means in the Simon task data. The model in Figure 11.4 assumes that there are two vectors \\(y_1\\) and \\(y_2\\) of continuous measurements. In our case, these are the continuous measurements of reaction times in the incongruent (\\(y_1\\)) and congruent (\\(y_2\\)) group. The model further assumes that all measurements in \\(y_1\\) and \\(y_2\\) are samples from two normal distributions, one for each group, with shared variance but possibly different means. The means of the two normal distributions are represented in terms of the midpoint \\(\\mu\\) between the means of either group. The model is set-up in such a way that there is a difference parameter \\(\\delta\\) which specifies the standardized difference between group means. Standardization here means that the difference between the means is represented in relation to the variance of the measurements in each group (which is assumed to be the same in both groups). The free variables in this model are therefore: the average of the group means \\(\\mu\\), the standardized difference \\(\\delta\\) of the group means from each other, and the common variance \\(\\sigma\\) of measurements in each group. The priors for these parameters are chosen in such a way as to enable direct calculation of Bayes factors for point-valued hypotheses. Notice that, by explicitly representing the difference parameter \\(\\delta\\) in the model, it is possible to put different kinds of a priori assumptions about the likely differences between groups directly into the model, namely in the form of \\(\\mu_g\\) and \\(g\\), which are not free model parameters, but will be set by us modelers, here as \\(\\mu_g = 0\\) and \\(g = 1\\). We focus on the first hypothesis spelled out in Chapter D.2, namely that the correct choices are faster in the congruent condition than in the incongruent condition. So, based on this data and model, we are interested in the following statistical hypotheses: Point-valued: \\(\\delta = 0\\) ROPE-d \\(\\delta = \\in [0 - \\epsilon; 0 + \\epsilon]\\) with \\(\\epsilon = 0.1\\) Directional \\(\\delta &gt; 0\\) Exercise 11.1 Paraphrase the three hypotheses given for the 24/7 data and the three hypotheses given for the Simon task in your own words. Solution 24/7: Point-valued: \\(\\theta_c = 0.5\\) - the coin is fair, with a bias of exactly 0.5 ROPE-d \\(\\theta_c = \\in [0.5 - \\epsilon; 0.5 + \\epsilon]\\) with \\(\\epsilon = 0.01\\) - the coins bias lies between 0.49 and 0.51 Directional \\(\\theta_c &lt; 0.5\\) - the coin is biased towards tails Simon task: Point-valued: \\(\\delta = 0\\) - the difference between the means of reaction times in both groups is 0 ROPE-d \\(\\delta = \\in [0 - \\epsilon; 0 + \\epsilon]\\) with \\(\\epsilon = 0.1\\) - the absolute difference between the means of reaction times in both groups is no bigger than 10% of the variance in both groups Directional \\(\\delta &gt; 0\\) - the mean reaction time in group 1 is bigger than the mean reaction time in group 2 References "],["ch-03-05-Bayes-testing-estimation.html", "11.3 Testing via posterior estimation", " 11.3 Testing via posterior estimation The general logic of Bayesian hypothesis testing via parameter estimation is this. Let \\(M\\) be the assumed model for observed data \\(D_{\\text{obs}}\\). We use Bayesian posterior inference to calculate or approximate the posterior \\(P_M(\\theta \\mid M)\\). We then look at an interval-based estimate, most usually a Bayesian credible interval, and compare the hypothesis in question to the region of a posteriori most probable values for the parameter(s) targeted by the hypothesis. Concretely, for point-valued hypotheses we can use the following approach. Let \\(\\Theta\\) be the parameter space of a model \\(M\\). We are interested in some component \\(\\Theta_i\\) and our hypothesis is \\(\\Theta_i = \\theta^*_i\\) for some specific value \\(\\theta^*_i\\). A simple (but crude and controversial) way of addressing this point-valued hypothesis based on observed data \\(D\\) is to look at whether \\(\\theta^*_i\\) lies inside some credible interval for parameter \\(\\Theta_i\\) in the posterior derived by updating with data \\(D\\). A customary choice here are 95% credible intervals, but also other choices, e.g., 80% credible intervals, are used. If a categorical decision rule is needed, we can: accept the point-valued hypothesis if \\(\\theta^*\\) is inside of the credible interval; and reject the point-valued hypothesis if \\(\\theta^*\\) is outside of the credible interval. Kruschke (2015) extends this approach to also address ROPE-d hypotheses. He argues that we should not be concerned with point-valued hypotheses, but rather with intervals constructed around the point-value of interest. Kruschke, therefore, suggests looking at a region of practical equivalence (ROPE), usually defined by some \\(\\epsilon\\)-region around \\(\\theta^*_i\\): \\[\\text{ROPE}(\\theta^*_i) = [\\theta^*_i- \\epsilon, \\theta^*_i+ \\epsilon]\\] The choice of \\(\\epsilon\\) is context-dependent and requires an understanding of the scale at which parameter values \\(\\Theta_i\\) differ. If the parameter of interest is, for example, a difference \\(\\delta\\) in the means of reaction times, like in the Simon task, this parameter is intuitively interpretable. We can say, for instance, that an \\(\\epsilon\\)-region of \\(\\pm 15\\text{ms}\\) is really so short that any value in \\([-15\\text{ms}; 15\\text{ms}]\\) would be regarded as identical to \\(0\\) for all practical purposes because of what we know about reaction times and their potential differences. However, with parameters that are less clearly anchored to a concrete physical measurement about which we have solid distributional knowledge and/or reliable intuitions, fixing the size of the ROPE can be more difficult. For the bias of a coin flip, for instance, which we want to test at the point value \\(\\theta^* = 0.5\\) (testing the coin for fairness), we might want to consider a ROPE like \\([0.49; 0.51]\\), although this choice may be less objectively defensible without previous experimental evidence from similar situations. In Kruschke’s ROPE-based approach where \\(\\epsilon &gt; 0\\), the decision about a point-valued hypothesis becomes ternary. If \\([l;u]\\) is an interval-based estimate of parameter \\(\\Theta_i\\) and \\([\\theta^*_i - \\epsilon; \\theta^*_i + \\epsilon]\\) is the ROPE around the point-value of interest, we would: accept the point-valued hypothesis iff \\([l;u]\\) is contained entirely in \\([\\theta^*_i - \\epsilon; \\theta^*_i + \\epsilon]\\); reject the point-valued hypothesis iff \\([l;u]\\) and \\([\\theta^*_i - \\epsilon; \\theta^*_i + \\epsilon]\\) have no overlap; and withhold judgement otherwise. Going beyond Kruschke’s approach to ROPE-d hypotheses, it is possible to extend this ternary decision logic also to cover directional hypotheses. 11.3.1 Example: 24/7 For the Binomial model and the 24/7 data, we know that the posterior is of the form \\(\\text{Beta}(8,18)\\). Here is a plot of the posterior (repeated from before) which also includes the 95% credible interval for the coin bias \\(\\theta_c\\). To address our point-valued hypothesis of \\(\\theta_{c} = 0.5\\) that the coin is fair, we just have to check if the critical value of 0.5 is inside or outside the 95% credible interval. In the case at hand, it is not. We would therefore, by the binary decision logic of this approach, reject the hypothesis \\(\\theta_{c} = 0.5\\) that the coin is fair. (Notice that while, strictly speaking, this approach does not pay attention to how closely the credible interval includes or excludes the critical value, we should normally take into account that the boundaries of the credible intervals are uncertain estimates based on posterior samples.) Using the ROPE-approach of Kruschke, we notice that our ROPE of \\(\\theta = 0.5 \\pm 0.01\\) is also fully outside of the 95% HDI. Here too, we conclude that the idea of an “approximately fair coin” is sufficiently unlikely to act as if it was false. In other words, by the ternary decision logic of this approach, we would reject the ROPE-d hypothesis \\(\\theta = 0.5 \\pm 0.01\\). (In practice, especially when we are uncertain about how exactly to pin down \\(\\epsilon\\), we might also sometimes want to give the range of \\(\\epsilon\\) values for which the ROPE-d hypothesis would be accepted or rejected. So, here we could also say that for any \\(\\epsilon &lt; 0.016\\) we would reject the ROPE-d hypothesis.) The directional hypothesis that the coin is biased towards tails \\(\\theta_c &lt; 0.5\\) contains the 95% credible interval in its entirety. We would therefore, following the ternary decision logic, accept this hypothesis based on the model and data. 11.3.2 Example: Simon Task We use Stan to draw samples from the posterior distribution. We start with assembling the data: simon_data_4_Stan &lt;- list( y1 = data_simon_cleaned %&gt;% filter(condition == &quot;incongruent&quot;) %&gt;% pull(RT), N1 = nrow(data_simon_cleaned %&gt;% filter(condition == &quot;incongruent&quot;)), y2 = data_simon_cleaned %&gt;% filter(condition == &quot;congruent&quot;) %&gt;% pull(RT), N2 = nrow(data_simon_cleaned %&gt;% filter(condition == &quot;congruent&quot;)) ) Here is the model from Figure 11.4 implemented in Stan. data { int&lt;lower=1&gt; N1 ; int&lt;lower=1&gt; N2 ; vector[N1] y1 ; vector[N2] y2 ; } parameters { real mu ; real&lt;lower=0&gt; sigma ; real delta ; } model { # priors target += log(1/sigma) ; delta ~ normal(0, 1) ; # likelihood y1 ~ normal(mu + sigma*delta/2, sigma^2) ; y2 ~ normal(mu - sigma*delta/2, sigma^2) ; } # sampling stan_fit_ttest &lt;- rstan::stan( # where is the Stan code file = &#39;models_stan/ttest_model.stan&#39;, # data to supply to the Stan program data = simon_data_4_Stan, # how many iterations of MCMC # more samples b/c of following approximations iter = 20000, # how many warmup steps warmup = 1000 ) Here is a concise summary of the relevant parameters: Bayes_estimates_ST &lt;- rstan::As.mcmc.list( stan_fit_ttest, pars = c(&#39;delta&#39;, &#39;mu&#39;, &#39;sigma&#39;) ) %&gt;% aida::summarize_mcmc_list() Bayes_estimates_ST ## # A tibble: 3 x 4 ## Parameter `|95%` mean `95|%` ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 delta 1.45 1.71 1.97 ## 2 mu 460. 462. 463. ## 3 sigma 9.63 9.68 9.72 Figure 11.5 shows the posterior distribution over \\(\\delta\\) and the 95% HDI (in red). Figure 11.5: Posterior density of the \\(\\delta\\) parameter in the Bayesian \\(t\\)-test model for Simon task data with the 95% HDI (in red). For the point-valued estimate of \\(\\delta = 0\\), which is clearly outside of the 95% credible interval, the binary decision criterion would have us reject the hypothesis that the difference between group means is precisely zero. For a ROPE-d hypothesis \\(\\delta = 0 \\pm 0.1\\), we reach the same conclusion by the ternary decision rule of Kruschke, since the entire ROPE is outside of the credible interval. The directional hypothesis that \\(\\delta &gt; 0\\) is accepted by the ternary decision approach. Exercise 11.2 In this exercise, we will recap the decision rules of the two approaches introduced in this chapter. Using the binary approach for point-valued hypotheses, there are two possible outcomes, namely rejecting \\(H_0\\) and failing to reject \\(H_0\\). Following Kruschke’s ROPE approach, we can also withhold judgment. Use pen and paper to draw examples of the situations a-e given below. For each case, draw any distribution representing the posterior (e.g., a bell-shaped curve), the approximate 95% HDI and an arbitrary point value of interest \\(\\theta^*\\). For tasks c-e, also draw an arbitrary ROPE around the point value. Concretely, we’d like you to sketch… …one instance where we would not reject a point-valued hypothesis \\(H_0: \\theta = \\theta^*\\). …one instance where we would reject a point-valued hypothesis \\(H_0: \\theta = \\theta^*\\). …two instances where we would not reject a ROPE-d hypothesis \\(H_0: \\theta = \\theta^* \\pm \\epsilon\\). …two instances where we would reject a ROPE-d hypothesis \\(H_0: \\theta = \\theta^* \\pm \\epsilon\\). …two instances where we would withhold judgement regarding a ROPE-d hypothesis \\(H_0: \\theta = \\theta^* \\pm \\epsilon\\). Solution One solution to this exercise might look as follows. The red shaded area under the curves shows the 95% credible interval. The black dots represent (arbitrary) point values of interest, and the horizontal bars in panels (c)-(e) depict the ROPE around a given point value. References "],["ch-03-05-Bayesian-testing-comparison.html", "11.4 Testing via model comparison", " 11.4 Testing via model comparison Testing hypotheses based on parameter estimation, and in particular the categorical decision rules for accepting or rejecting hypotheses outlined in the previous section, only give a very coarse-grained picture. Bayesian analysis is about providing quantitative information about uncertainty and evidence, which are intuitive and easily interpretable. So, we would also like to have a quantitative assessment of the evidence for or against a hypothesis provided by some data against the background of a given model. This is what the comparison-based approaches to Bayesian hypothesis testing give us. Here is some further motivation why model comparison might be a good replacement for “testing via estimation”. A statistical hypothesis \\(H\\) is basically an event: a subset of parameter values are picked out of the whole parameter space. After observing data \\(D_\\text{obs}\\) and based on model \\(M\\), the ideal measure to have is \\(P_M(H \\mid D_\\text{obs})\\): given data and model, how likely is the hypothesis in question? The problem with this posterior formulation \\(P_M(H \\mid D_\\text{obs})\\) is that, for it to be meaningful, it must quantify over the set of all alternative hypotheses. If \\(H\\) is a point-valued hypothesis over a single parameter, the set of all alternative hypotheses could comprise all other logically possible point-valued hypotheses for the same parameter. But then, if that parameter is a continuous parameter, the posterior density at \\(P_M(H \\mid D_\\text{obs})\\) is not meaningfully interpretable as a probability (mass). If \\(H\\) is an interval-based hypothesis, the posterior \\(P_M(H \\mid D_\\text{obs})\\) would be meaningfully interpretable as a probability (mass), but still the question of what exactly the space of alternatives is is left implicit. Moreover, the posterior \\(P_M(H \\mid D_\\text{obs})\\) is influenced by the model’s prior over \\(H\\). So, a nominally high value of \\(P_M(H \\mid D_\\text{obs})\\) is as such uninteresting because we would need to take the prior \\(P_M(H)\\) into account as well. This is why a comparison-based approach to Bayesian hypothesis testing explicitly compares two models: The null model \\(M_0\\) is the model that incorporates the assumption of the hypothesis \\(H\\) to be tested. For example, the null model would put prior probability zero on those parameter values which are ruled out by \\(H\\). The alternative model \\(M_1\\) is an explicitly formulated model which incorporates some contextually or technically useful alternative to \\(M_0\\). The comparison-based approach to hypothesis testing then quantifies, using Bayes factors, the evidence that \\(D_\\text{obs}\\) provides for or against \\(M_0\\) (the model representing the “null hypothesis”) over the alternative model \\(M_1\\) (the model representing the alternative hypothesis). In this way, by looking at the ratio: \\[ BF_{01} = \\frac{P(D_\\text{obs} \\mid M_0)}{P(D_\\text{obs} \\mid M_1)} \\] this approach is independent of the prior probability assigned to models \\(P(M_0)\\) and \\(P(M_1)\\). Notice, however, that it is not independent of the priors over \\(\\theta\\) used in \\(M_1\\)! When the null hypothesis is point-valued, the alternative model is not based on the complement \\(\\theta \\neq \\theta^*\\), but on the technically much more practical and also conceptually more plausible alternative model that assumes that \\(\\theta\\) is free to range over a larger interval including, but not limited to \\(\\theta^*\\). We can then use the so-called Savage-Dickey method, described in Section 11.4.1, to compare the null and the alternative models as so-called nested models. When the null hypothesis is interval-valued, the alternative model can be conceived as based on the complement of the null hypothesis. We can then use an extension of the Savage-Dickey method based on a so-called encompassing model, described in Section 11.4.2, where we construe both the null model and the alternative model as nested under a third, well, encompassing model. This chapter shows how Bayes factors can be approximated based on samples from the posterior following both of these approaches. 11.4.1 The Savage-Dickey method The Savage-Dickey method is a very convenient way of computing Bayes factors for nested models, especially when models only differ with respect to one parameter. Suppose that there are \\(n\\) continuous parameters of interest \\(\\theta = \\langle \\theta_1, \\dots, \\theta_n \\rangle\\). \\(M_1\\) is a (Bayesian) model defined by \\(P(\\theta \\mid M_1)\\) and \\(P(D \\mid \\theta, M_1)\\). \\(M_0\\) is properly nested under \\(M_1\\) if: \\(M_0\\) assigns fixed values to parameters \\(\\theta_i = x_i, \\dots, \\theta_n = x_n\\) \\(P(D \\mid \\theta_1, \\dots, \\theta_{i-1}, M_0) = P(D \\mid \\theta_1, \\dots, \\theta_{i-1}, \\theta_i = x_i, \\dots, \\theta_n = x_n, M_1)\\) \\(\\lim_{\\theta_i \\rightarrow x_i, \\dots, \\theta_n \\rightarrow x_n} P(\\theta_1, \\dots, \\theta_{i-1} \\mid \\theta_i, \\dots, \\theta_n, M_1) = P(\\theta_1, \\dots, \\theta_{i-1} \\mid M_0)\\) Intuitively put, \\(M_0\\) is properly nested under \\(M_1\\), if \\(M_0\\) is a special case of \\(M_1\\) which fixes certain parameters to specific point-values. Notice that the last condition is satisfied in particular when \\(M_1\\)’s prior over \\(\\theta_1, \\dots, \\theta_{i-1}\\) is independent of the values for the remaining parameters. We can express a point-valued hypothesis in terms of a model \\(M_0\\) which is nested under the alternative model \\(M_1\\), the latter of which assumes that the parameters in question can take more than one value. For such properly nested models, we can compute a Bayes factor efficiently using the following result. Theorem 11.1 (Savage-Dickey Bayes factors for nested models) Let \\(M_0\\) be properly nested under \\(M_1\\) s.t. \\(M_0\\) fixes \\(\\theta_i = x_i, \\dots, \\theta_n = x_n\\). The Bayes factor \\(\\text{BF}_{01}\\) in favor of \\(M_0\\) over \\(M_1\\) is then given by the ratio of posterior probability to prior probability of the parameters \\(\\theta_i = x_i, \\dots, \\theta_n = x_n\\) from the point of view of the nesting model \\(M_1\\): \\[ \\begin{aligned} \\text{BF}_{01} &amp; = \\frac{P(\\theta_i = x_i, \\dots, \\theta_n = x_n \\mid D, M_1)}{P(\\theta_i = x_i, \\dots, \\theta_n = x_n \\mid M_1)} \\end{aligned} \\] Show proof. Proof. Let’s assume that \\(M_0\\) has parameters \\(\\theta = \\langle\\phi, \\psi\\rangle\\) with \\(\\phi = \\phi_0\\), and that \\(M_1\\) has parameters \\(\\theta = \\langle\\phi, \\psi \\rangle\\) with \\(\\phi\\) free to vary. If \\(M_0\\) is properly nested under \\(M_1\\), we know that \\(\\lim_{\\phi \\rightarrow \\phi_0} P(\\psi \\mid \\phi, M_1) = P(\\psi \\mid M_0)\\). We can then rewrite the marginal likelihood under \\(M_0\\) as follows: \\[ \\begin{aligned} P(D \\mid M_0) &amp; = \\int P(D \\mid \\psi, M_0) P(\\psi \\mid M_0) \\ \\text{d}\\psi &amp; \\text{[marginalization]} \\\\ &amp; = \\int P(D \\mid \\psi, \\phi = \\phi_0, M_1) P(\\psi \\mid \\phi = \\phi_0, M_1) \\ \\text{d}\\psi &amp; \\text{[assumption of nesting]} \\\\ &amp; = P(D \\mid \\phi = \\phi_0, M_1) &amp; \\text{[marginalization]} \\\\ &amp; = \\frac{P(\\phi = \\phi_0 \\mid D, M_1) P(D \\mid M_1)}{P(\\phi = \\phi_0 \\mid M_1)} &amp; \\text{[Bayes rule]} \\end{aligned} \\] The result follows if we divide by \\(P(D \\mid M_1)\\) on both sides of the equation.   11.4.1.1 Example: 24/7 Here is an example based on the 24/7 data. For a nesting model with a flat prior (\\(\\theta \\sim^{M_1} \\text{Beta}(1,1)\\)), and a point hypothesis \\(\\theta_c = 0.5\\), we just have to calculate the prior and posterior probability of the critical value \\(\\theta_c = 0.5\\): # point-value of interest theta_star &lt;- 0.5 # posterior probability in nesting model posterior_theta_star &lt;- dbeta(theta_star, 8, 18) # prior probability in nesting model prior_theta_star &lt;- dbeta(theta_star, 1, 1) # Bayes factor (using Savage-Dickey) BF_01 &lt;- posterior_theta_star / prior_theta_star BF_01 ## [1] 0.5157351 This is very minor evidence in favor of the alternative model (Bayes factor \\(\\text{BF}_{10} \\approx 1.94\\)). We would not like to draw any (strong) categorical conclusions from this result regarding the question of whether the coin might be fair. Figure 11.6 also shows the relation between prior and posterior at the point-value of interest. Figure 11.6: Illustration of the Savage-Dickey method of Bayes factor computation for the 24/7 case. 11.4.1.2 Example: Simon task In the previous 24/7 example, using the Savage-Dickey method was particularly easy because we know a closed-form solution of the precise posterior, so that we could easily calculate the posterior for the critical value without further ado. When this is not the case, like in the application to the Simon task data, we have to obtain an estimate for the posterior density at the critical value, here: \\(\\delta = 0\\), from the posterior samples which we obtain from sampling, as we did earlier in this chapter (using Stan). An approximate method for obtaining this value is implemented in the polspline package (using polynomial splines to approximate the posterior curve). # extract the samples for the delta parameter # from the earlier Stan fit delta_samples &lt;- tidy_draws_tt2 %&gt;% filter(Parameter == &quot;delta&quot;) %&gt;% pull(value) # estimating the posterior density at delta = 0 with polynomial splines fit.posterior &lt;- polspline::logspline(delta_samples) posterior_delta_null &lt;- polspline::dlogspline(0, fit.posterior) # computing the prior density of the point-value of interest # [NB: the prior on delta was a standard normal] prior_delta_null &lt;- dnorm(0, 0, 1) # compute BF via Savage-Dickey BF_delta_null = posterior_delta_null / prior_delta_null BF_delta_null ## [1] 5.778056e-15 We conclude from this result that the data provide extremely strong evidence against the null model, which assumes that \\(\\delta = 0\\), when compared to an alternative model \\(M_1\\), which assumes that \\(\\delta \\sim \\mathcal{N}(0,1)\\) in the prior. Exercise 11.3: Bayes factors with the Savage-Dickey method Look at the plot below. You see the prior distribution and the posterior distribution over the \\(\\delta\\) parameter in a Bayesian \\(t\\)-test model. We are going to use this plot to determine (roughly) the Bayes factor of two models: the full Bayesian \\(t\\)-test model, and a model nested under this full model which assumes that \\(\\delta = 0\\). Describe in intuitive terms what it means for a Bayesian model to be nested under another model. It is sufficient to neglect the conditions on the priors. Solution A model nested under another model fixes certain parameters to specific values which may take on more than one value in the nesting model. Write down the formula for the Bayes factor in favor of the null model (where \\(\\delta = 0\\)) over the full model using the Savage-Dickey theorem. Solution \\(BF_{01}=\\frac{P(\\delta = 0 \\mid D, M_1)}{P(\\delta = 0 \\mid M_1)}\\). Give a natural language paraphrase of the formula you wrote down above. Solution The Bayes factor in favor of the embedded null model over the embedding model is given by the posterior density at \\(\\delta = 0\\) under the nesting model divided by the prior in the nesting model at \\(\\delta = 0\\). Now look at the plot above. Give your approximate guess of the Bayes factor in favor of the null model in terms of a fraction of whole integers (something like: \\(\\frac{4}{3}\\) or \\(\\frac{27}{120}\\), …). Solution \\(BF_{01} \\approx \\frac{5}{2}\\) (see plot above). Formulate a conclusion to be drawn from this numerical result about the research hypothesis that the mean of the two groups compared here is identical. Write one concise sentence like you would in a research paper. Solution A BF of \\(\\frac{5}{2}\\) is mild evidence in favor of the null model, but conventionally not considered strong enough to be particularly noteworthy. 11.4.1.3 [Excursion:] Calculating the Bayes factor precisely under construction 11.4.2 Encompassing models The Savage-Dickey method can be generalized to also cover interval-valued hypotheses. The previous literature has focused on inequality-based intervals/hypotheses (like \\(\\theta \\ge 0.5\\)) (Klugkist, Kato, and Hoijtink 2005; Wetzels, Grasman, and Wagenmakers 2010; Oh 2014), but the method also applies to ROPE-d hypotheses. The advantage of this method is that we can use samples from the posterior distribution to approximate integrals, which is more robust than having to estimate point-values of posterior density. Following previous work (Klugkist, Kato, and Hoijtink 2005; Wetzels, Grasman, and Wagenmakers 2010; Oh 2014), the main idea is to use so-called encompassing priors. Let \\(\\theta\\) be a single parameter of interest (for simplicity), which can in principle take on any real value. We are interested in the interval-based hypotheses: \\(H_0 \\colon \\theta \\in I_0\\), and \\(H_a \\colon \\theta \\not \\in I_{0}\\) where \\(I_{0}\\) is some possibly half-open interval. An encompassing model \\(M_e\\) has a suitable likelihood function \\(P_{M_e}(D \\mid \\theta, \\omega)\\) (where \\(\\omega\\) is a vector of other parameters besides the parameter \\(\\theta\\) of interest). It also defines a prior \\(P_{M_e}(\\theta, \\omega)\\), which does not already rule out \\(H_{0}\\) or \\(H_{a}\\). Generalizing over the Savage-Dickey approach, we construct two models, one for each hypothesis, both of which are nested under the encompassing model: \\(M_0\\) has prior \\(P_{M_0}(\\theta, \\omega) = P_{M_e}(\\theta, \\omega \\mid \\theta \\in [a;b])\\) \\(M_a\\) has prior \\(P_{M_a}(\\theta, \\omega) = P_{M_e}(\\theta, \\omega \\mid \\theta \\not \\in [a;b])\\) Both \\(M_0\\) and \\(M_a\\) have the same likelihood function as \\(M_e\\), which is why we drop the model index for better readability in the following. Figure 11.7 shows an example of the priors of an encompassing model for two nested models based on a ROPE-d hypothesis testing approach. Figure 11.7: Example of the prior of an encompassing model and the priors of two models nested under it. Theorem 11.2 Fix a Bayesian model \\(M\\) (the encompassing model) with prior \\(P_M(\\theta, \\omega)\\) and likelihood function \\(P_M(D \\mid \\theta, \\omega)\\), where \\(\\theta\\) is the parameter of interest and \\(\\omega\\) is a vector of other (nuisance) parameters. Assume that the priors over \\(\\theta\\) are independent of the nuisance parameters \\(\\omega\\). For an interval-valued hypothesis \\(H_0 \\colon \\theta \\in I_0\\), the Bayes factor in favor of this hypothesis over its negation \\(H_a \\colon \\theta \\not \\in I_0\\) can be expressed as: \\[ \\begin{aligned} \\text {BF}_{01} &amp; = \\frac{\\text{posterior-odds of } H_0}{\\text{prior-odds of } H_0} \\\\ &amp; = \\frac{P_M(\\theta \\in I_0 \\mid D)}{P_M(\\theta \\not \\in I_0 \\mid D)} \\frac{P_M(\\theta \\not \\in I_0)}{P_M(\\theta \\in I_0)} \\end{aligned} \\] Show proof. Proof. TBD   11.4.2.1 Example: 24/7 The Bayes factor using the ROPE-d method to compute the interval-valued hypothesis \\(\\theta = 0.5 \\pm \\epsilon\\) is: # set the scene theta_null &lt;- 0.5 epsilon &lt;- 0.01 # epsilon margin for ROPE upper &lt;- theta_null + epsilon # upper bound of ROPE lower &lt;- theta_null - epsilon # lower bound of ROPE # calculate prior odds of the ROPE-d hypothesis prior_of_hypothesis &lt;- pbeta(upper, 1, 1) - pbeta(lower, 1, 1) prior_odds &lt;- prior_of_hypothesis / (1 - prior_of_hypothesis) # calculate posterior odds of the ROPE-d hypothesis posterior_of_hypothesis &lt;- pbeta(upper, 8, 18) - pbeta(lower, 8, 18) posterior_odds &lt;- posterior_of_hypothesis / (1 - posterior_of_hypothesis) # calculate Bayes factor bf_ROPEd_hypothesis &lt;- posterior_odds / prior_odds bf_ROPEd_hypothesis ## [1] 0.5133012 This is unnoteworthy evidence in favor of the alternative hypothesis (Bayes factor \\(\\text{BF}_{10} \\approx 1.95\\)). Notice that the reason why the alternative hypothesis does not fare better in this analysis is because it also includes a lot of parameter values (\\(\\theta &gt; 0.5\\)) which explain the observed data even more poorly than the values included in the null hypothesis. We can also use this approach to test the directional hypothesis that \\(\\theta &lt; 0.5\\). # calculate prior odds of the ROPE-d hypothesis # [trivial in the case at hand, but just to be explicit] prior_of_hypothesis &lt;- pbeta(0.5, 1, 1) prior_odds &lt;- prior_of_hypothesis / (1 - prior_of_hypothesis) # calculate posterior odds of the ROPE-d hypothesis posterior_of_hypothesis &lt;- pbeta(0.5, 8, 18) posterior_odds &lt;- posterior_of_hypothesis / (1 - posterior_of_hypothesis) # calculate Bayes factor bf_directional_hypothesis &lt;- posterior_odds / prior_odds bf_directional_hypothesis ## [1] 45.20512 Here we should conclude that the data provide substantial evidence in favor of the assumption that the coin is biased towards tails, when compared against the alternative assumption that it is biased towards heads. If the dichotomy is “heads bias vs tails bias” the data clearly tilts our beliefs towards the “tails bias” possibility. 11.4.2.2 Example: Simon task Using posterior samples, we can also do similar calculations for the Simon task. Let’s first approximate the Bayes factor in favor of the ROPE-d hypothesis \\(\\delta = 0 \\pm 0.1\\) when compared against the alternative hypothesis \\(\\delta \\not \\in 0 \\pm 0.1\\). # estimating the BF for ROPE-d hypothesis with encompassing priors delta_null &lt;- 0 epsilon &lt;- 0.1 # epsilon margin for ROPE upper &lt;- delta_null + epsilon # upper bound of ROPE lower &lt;- delta_null - epsilon # lower bound of ROPE # calculate prior odds of the ROPE-d hypothesis prior_of_hypothesis &lt;- pnorm(upper, 0, 1) - pnorm(lower, 0, 1) prior_odds &lt;- prior_of_hypothesis / (1 - prior_of_hypothesis) # calculate posterior odds of the ROPE-d hypothesis posterior_of_hypothesis &lt;- mean( lower &lt;= delta_samples &amp; delta_samples &lt;= upper ) posterior_odds &lt;- posterior_of_hypothesis / (1 - posterior_of_hypothesis) # calculate Bayes factor bf_ROPEd_hypothesis &lt;- posterior_odds / prior_odds bf_ROPEd_hypothesis ## [1] 0 This is overwhelming evidence against the ROPE-d hypothesis that \\(\\delta = 0 \\pm 0.1\\). We can also use this approach to test the directional hypothesis that \\(\\delta &gt; 0.5\\). # calculate prior odds of the ROPE-d hypothesis # [trivial in the case at hand, but just to be explicit] prior_of_hypothesis &lt;- 1 - pnorm(0, 0, 1) prior_odds &lt;- prior_of_hypothesis / (1 - prior_of_hypothesis) # calculate posterior odds of the ROPE-d hypothesis posterior_of_hypothesis &lt;- mean( delta_samples &gt;= 0.5 ) posterior_odds &lt;- posterior_of_hypothesis / (1 - posterior_of_hypothesis) # calculate Bayes factor bf_directional_hypothesis &lt;- posterior_odds / prior_odds bf_directional_hypothesis ## [1] Inf Modulo imprecision induced by sampling, we see that the evidence in favor of the directional hypothesis \\(\\delta &gt; 0.5\\) is immense. Exercise 11.4: True or False? Decide for the following statements whether they are true or false. An encompassing model for addressing ROPE-d hypotheses needs two competing models nested under it. A Bayes factor of \\(BF_{01} = 20\\) constitutes strong evidence in favor of the alternative hypothesis. A Bayes factor of \\(BF_{10} = 20\\) constitutes minor evidence in favor of the alternative hypothesis. We can compute the BF in favor of the alternative hypothesis with \\(BF_{10} = \\frac{1}{BF_{01}}\\). Solution Statements a. and d. are correct. References "],["Chap-04-01-simple-linear-regression.html", "12 Linear regression", " 12 Linear regression This chapter introduces the basics of linear regression modeling. It covers ordinary least-squares (OLS) regression, a maximum-likelihood approach, and finally a Bayesian approach. Impatient readers may wish to skip to the Bayesian analyses directly, but understanding the OLS and MLE approaches helps to see the bigger (historical) picture and also helps appreciating some of the formal results pertaining to the Bayesian analysis. All concrete calculations in this chapter are based on the same running example using the murder data set. Based on a different example, the following video gives an overview of the main ideas behind a Bayesian approach to simple linear regression. The learning goals for this chapter are: understand what a linear regression model is see the conceptual differences between OLS, MLE and Bayesian approaches to linear regression be able to find best fitting values for OLS and MLE regression using R’s built-in functions be able to sample a posteriori credible values for a regression model using the non-informative standard model "],["ordinary-least-squares-regression.html", "12.1 Ordinary least squares regression", " 12.1 Ordinary least squares regression This section introduces ordinary least squares (OLS) linear regression. The main idea is that we look for the best-fitting line in a (multi-dimensional) cloud of points, where “best-fitting” is defined in terms of a geometrical measure of distance (squared prediction error). 12.1.1 Prediction without any further information We are interested in explaining or predicting the murder rates in a city using the murder data set. Concretely, we are interested in whether knowing a city’s unemployment rate (stored in variable unemployment) helps make better predictions for that city’s murder rate (stored in variable murder_rate). Let’s first plot the murder rate for every city (just numbered consecutively in the order of their appearance in the data set): Suppose we know the vector \\(y\\) of all observed murder rates but we don’t know which murder rate belongs to which city. We are given a city to guess its murder rate. But we cannot tell cities apart. So we must guess one number as a prediction for any of the cities. What’s a good guess? Actually, how good a guess is depends on what we want to do with this guess (the utility function of a decision problem). For now, let’s just assume that we have a measure of prediction error which we would like to minimize with our guesses. A common measure of prediction error uses intuitions about geometric distance and is defined in terms of the total sum of squares, where \\(y\\) is the \\(n\\)-dimensional vector of observed murder rates and \\(\\xi \\in \\mathbb{R}\\) is a single numeric prediction: \\[ \\text{TSS}(\\xi) = \\sum_{i=1}^n (y_i - \\xi)^2 \\] This measure of prediction error is what underlies the ordinary least squares approach to regression. It turns out that the best prediction we can make, i.e., the number \\(\\hat{\\xi} = \\arg \\min_{\\xi} \\text{TSS}(\\xi)\\) for which TSS is minimized, is the mean \\(\\bar{y}\\) of the original predictions. So, given the goal of minimizing TSS, our best guess is the mean of the observed murder rates. Proposition 12.1 (Mean minimizes total sum of squares.) \\[ \\arg \\min_{\\xi} \\sum_{i=1}^n (y_i - \\xi)^2 = \\frac{1}{n} \\sum_{i=1}^n y_i = \\bar{y} \\] Show proof. Proof. To find a minimum, consider the first derivative of \\(\\text{TSS}(\\xi)\\) and find its zero points: \\[ \\begin{align*} &amp; f(\\xi) = \\sum_{i=1}^n (y_i - \\xi)^2 = \\sum_{i=1}^n (y_i^2 - 2 y_i \\xi + \\xi^2) \\\\ &amp; f&#39;(\\xi) = \\sum_{i=1}^n (-2y_i + 2\\xi) = 0 \\\\ \\Leftrightarrow &amp; \\sum_{i=1}^n -2y_i = -2 n \\xi \\\\ \\Leftrightarrow &amp; \\xi = \\frac{1}{n} \\sum_{i=1}^n y_i = \\bar{y} \\\\ \\end{align*} \\] Indeed, the zero point \\(\\xi = \\bar{y}\\) is a minimum because its second derivative is positive: \\[ f&#39;&#39;(\\bar{y}) = 2 \\]   The plot below visualizes the prediction we make based on the naive predictor \\(\\hat{y}\\). The black dots show the data points, the red line shows the prediction we make (the mean murder rate), the small hollow dots show the specific predictions for each observed value and the gray lines show the distance between our prediction and the actual data observation. To obtain the TSS for the prediction shown in the plot above, we would need to take each gray line, measure its distance, square this number and sum over all lines (cities). In the case at hand, the prediction error we make by assuming just the mean as predictor is: y &lt;- murder_data %&gt;% pull(murder_rate) n &lt;- length(y) tss_simple &lt;- sum((y - mean(y))^2) tss_simple ## [1] 1855.202 At this stage, a question might arise: Why square the distances to obtain the total sum of, well, squares? One intuitive motivation is that we want small deviations from our prediction to have less overall impact than huge deviations. A technical motivation is that the best solution to OLS estimation corresponds to the best solution under a maximum likelihood approach, if we use a normal distribution as likelihood function. This is what we will cover in Section 12.2 after having introduced the regression model in full. 12.1.2 Prediction with knowledge of unemployment rate We might not be very content with this prediction error. Suppose we could use some piece of information about the random city whose murder rate we are trying to predict. For instance, we might happen to know the value of the variable unemployment. How could that help us make a better prediction? There does seem to be some useful information in the unemployment rate, which may lead to better predictions of the murder rate. We see this in a scatter plot: Let us assume, for the sake of current illustration, that we expect a very particular functional relationship between the variables murder_rate and unemployment. For some reason or other, we hypothesize that even with 0% unemployment, the murder rate would be positive, namely at 4 murders per million inhabitants. We further hypothesize that with each increase of 1% in the unemployment percentage, the murder rate per million increases by 2. The functional relationship between dependent variable \\(y\\) (= murder rate) and predictor variable \\(x\\) (= unemployment) can then be expressed as a linear function of the following form, where \\(\\xi \\in \\mathbb{R}^n\\) is now a vector of \\(n\\) predictions (one prediction \\(\\xi_i\\) for each data observation \\(y_i\\)):53 \\[ \\xi_i = 2x_i + 4 \\] Here is a graphical representation of this particular functional relationship assumed in the equation above. Again, the black dots show the data points, the red line the linear function \\(f(x) = 2x +4\\), the small hollow dots show the specific predictions for each observed value \\(x_i\\) and the gray lines show the distance between our prediction \\(\\xi_i\\) and the actual data observation \\(y_i\\). (Notice that there are data points for which the unemployment rate is the same, but we observed different murder rates.) We can again quantify our prediction error in terms of a sum of squares like we did before. For the case of a prediction vector \\(\\xi\\), the quantity in question is called the residual sum of squares. \\[ \\text{RSS} = \\sum_{i=1}^n (y_i - \\xi_i)^2 \\] Here is how we can calculate RSS in R for the particular vector \\(\\xi \\in \\mathbb{R}^n\\) for which \\(\\xi_{i} = 2x_i + 4\\): y &lt;- murder_data %&gt;% pull(murder_rate) x &lt;- murder_data %&gt;% pull(unemployment) predicted_y &lt;- 2 * x + 4 n &lt;- length(y) rss_guesswork &lt;- sum((y - predicted_y)^2) rss_guesswork ## [1] 1327.74 Compared to the previous prediction, which was based on the mean \\(\\bar{y}\\) only, this linear function reduces the prediction error (measured here geometrically in terms of a sum of squares). This alone could be taken as prima facie evidence that knowledge of unemployment helps make better predictions about murder_rate. Exercise 13.1 [optional] Compare RSS and TSS. How / where exactly do these notions differ from each other? Think about which information the difference between the two measures conveys. Solution TSS computes the distance between a data point and the overall mean of all data points, whereas RSS computes the distance between a data point and a predictor value specific to this data point. The difference between RSS and TSS tells us how good our prediction is in comparison to a naive prediction (using just the mean). Is it possible for TSS to be smaller than RSS? That is, could the error based on a single numeric prediction for all data points be smaller than an error obtained for a linear predictor that has a single prediction for each data point? Solution Yes, that’s possible. The definition of RSS and TSS does not imply that we look at the optimal point-valued or linear predictor. It is conceivable to choose a good single number and a very bad linear predictor, so that RSS is smaller than TSS. 12.1.3 Linear regression: general problem formulation Suppose we have \\(k\\) predictor variables \\(x_1, \\dots , x_k\\) and a dependent variable \\(y\\). We consider the linear relation: \\[ \\xi_i({\\beta}_0, {\\beta}_1, \\dots, {\\beta}_k) = \\beta_0 + \\beta_1 x_{1i} + \\dots + \\beta_k x_{ki} \\] Often we do not explicitly write \\(\\xi\\) as a function of the parameters \\(\\beta_0, \\dots \\beta_k\\), and write instead: \\[ \\xi_i = \\beta_0 + \\beta_1 x_{1i} + \\dots + \\beta_k x_{ki} \\] The parameters \\(\\beta_0, \\beta_1, \\dots, \\beta_k\\) are called (regression) coefficients. In particular, \\(\\beta_0\\) is called the (regression) intercept and \\(\\beta_1, \\dots, \\beta_k\\) are (regression) slope coefficients. The term simple linear regression is often used to cover the special case of \\(k=1\\). If there is more than one predictor, i.e., \\(k &gt; 1\\), the term multiple linear regression is common. Based on the predictions of a parameter vector \\(\\langle {\\beta}_0, {\\beta}_1, \\dots, {\\beta}_k\\rangle\\), we consider the residual sum of squares as a measure of prediction error: \\[\\text{RSS}_{\\langle {\\beta}_0, {\\beta}_1, \\dots, {\\beta}_k\\rangle} = \\sum_{i = 1}^k [y_i - \\xi_i ({\\beta}_0, {\\beta}_1, \\dots, {\\beta}_k) ]^2 \\] We would like to find the best parameter values (denoted traditionally by a hat on the parameter’s variable: \\(\\hat{\\beta}_i\\)) in the sense of minimizing the residual sum of squares: \\[ \\langle \\hat{\\beta}_0, \\hat{\\beta}_1, \\dots , \\hat{\\beta}_k\\rangle = \\arg \\min_{\\langle \\beta_0, \\beta_1, \\dots, \\beta_k\\rangle} \\text{RSS}_{\\langle {\\beta}_0, {\\beta}_1, \\dots, {\\beta}_k\\rangle} \\] The prediction corresponding to the best parameter values is denoted by \\(\\hat{\\xi} \\in \\mathbb{R}^n\\) and called the best linear predictor: \\[ \\hat{\\xi}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_{1i} + \\dots + \\hat{\\beta}_k x_{ki}\\] It is also possible, and often convenient, to state the linear regression model in terms of matrix operations. Traditionally, we consider a so-called predictor matrix \\(X\\) of size \\(n \\times (k+1)\\), where \\(n\\) is the number of observations in the data set and \\(k\\) is the number of predictor variables. The predictor matrix includes the values for all predictor variables and it also includes an “intercept column” \\((X^{T})_0\\) for which \\(X_{i0}=1\\) for all \\(1 \\le i \\le n\\) so that the intercept \\(\\beta_0\\) can be treated on a par with the other regression coefficients.54 Using the predictor matrix \\(X\\), the linear predictor vector \\(\\xi\\) is: \\[\\xi = X \\beta\\] Exercise 13.2 How can we interpret the parameters \\(a\\) and \\(b\\) of the linear model \\(\\xi_i = a x_i + b\\)? How are these parameters usually called in regression jargon? Solution Parameter \\(a\\) is the slope, \\(b\\) the intercept of a simple linear regression. Parameter \\(a\\) gives the amount of change of \\(y\\) for each unit change in \\(x\\). Parameter \\(b\\) gives the prediction \\(\\xi\\) for \\(x=0\\). 12.1.4 Finding the OLS-solution In the above example, where we regressed murder_rate against unemployment, the model has two regression coefficients: an intercept term and a slope for unemployment. The optimal solution for these delivers the regression line in the graph below. The total sum of squares for the best fitting parameters is: ## [1] 467.6023 This is the best prediction we can make based on a linear predictor. In the following, we discuss several methods of finding the best-fitting values for regression coefficients that minimize the residual sum of squares. 12.1.4.1 Finding optimal parameters with optim We can use the optim function to find the best-fitting parameter values for our simple linear regression example. # data to be explained / predicted y &lt;- murder_data %&gt;% pull(murder_rate) # data to use for prediction / explanation x &lt;- murder_data %&gt;% pull(unemployment) # function to calculate residual sum of squares get_rss = function(y, x, beta_0, beta_1) { yPred = beta_0 + x * beta_1 sum((y - yPred)^2) } # finding best-fitting values for RSS fit_rss = optim(par = c(0, 1), # initial parameter values fn = function(par) { # function to minimize get_rss(y, x, par[1], par[2]) } ) # output the results message( &quot;Best fitting parameter values:&quot;, &quot;\\n\\tIntercept: &quot;, fit_rss$par[1] %&gt;% round(2), &quot;\\n\\tSlope: &quot;, fit_rss$par[2] %&gt;% round(2), &quot;\\nRSS for best fit: &quot;, fit_rss$value %&gt;% round(2) ) ## Best fitting parameter values: ## Intercept: -28.53 ## Slope: 7.08 ## RSS for best fit: 467.6 12.1.4.2 Fitting OLS regression lines with lm R also has a built-in function lm which fits linear regression models via RSS minimization. Here is how you call this function for the running example: # fit an OLS regression fit_lm &lt;- lm( # the formula argument specifies dependent and independent variables formula = murder_rate ~ unemployment, # we also need to say where the data (columns) should come from data = murder_data ) # output the fitted object fit_lm ## ## Call: ## lm(formula = murder_rate ~ unemployment, data = murder_data) ## ## Coefficients: ## (Intercept) unemployment ## -28.53 7.08 The output of the fitted object shows the best-fitting values (compare them to what we obtained before).55 12.1.4.3 Finding optimal parameter values with math It is also possible to determine the OLS-fits by a mathematical derivation. We start with the case of a simple linear regression with just one predictor variable. Theorem 12.1 (OLS solution for simple linear regression) For a simple linear regression model with just one predictor for a data set with \\(n\\) observations, the solution for: \\[\\arg \\min_{\\langle \\beta_0, \\beta_1\\rangle} \\sum_{i = 1}^n (y_i - (\\beta_0 + \\beta_1 x_{i}))^2\\] is given by: \\[ \\begin{aligned} \\hat{\\beta_1} &amp;= \\frac{Cov(x,y)}{Var(x)} &amp; \\hat{\\beta_0} &amp;= \\bar{y} - \\hat{\\beta}_1 \\bar{x} \\end{aligned} \\] Show proof. Proof. (See e.g., Olive 2017, 57–59) Given a set of \\(n\\) observations \\((x_i, y_i)\\), we want to find: \\[\\langle \\hat{\\beta}_0, \\hat{\\beta}_1 \\rangle = \\arg \\min_{\\langle \\beta_0, \\beta_1 \\rangle} \\sum_{i = 1}^n (y_i - (\\beta_0 + \\beta_1 x_{i}))^2\\] Let \\(Q\\) denote the RSS function. We want to find the minima of \\(Q\\). So, we want to find the values \\(\\hat\\beta_0\\) and \\(\\hat\\beta_1\\) for which \\(\\frac{\\partial Q}{\\partial \\hat\\beta_0}=0\\) and \\(\\frac{\\partial Q}{\\partial \\hat\\beta_1}=0\\), since all partial derivatives equal to 0 at the global minimum. The first condition is: \\[ \\begin{align} \\frac{\\partial Q}{\\partial \\hat\\beta_0}=\\sum_{i=1}^{n}-2(y_i-\\hat\\beta_0-\\hat\\beta_1x_i)&amp;= 0\\\\ &amp;=-\\sum_{i=1}^ny_i+\\sum_{i=1}^n\\hat \\beta_0+\\sum_{i=1}^n\\hat\\beta_1x_i\\\\ &amp;=-\\sum_{i=1}^ny_i+n\\hat\\beta_0+\\sum_{i=1}^n\\hat\\beta_1x_i \\end{align}\\] If we solve for \\(\\hat\\beta_0\\), this becomes: \\[\\begin{align} \\hat\\beta_0&amp;=\\frac{1}{n}\\sum_{i=1}^{n}y_i-\\frac{1}{n}\\hat\\beta_1\\sum_{i=1}^{n}x_i\\\\ &amp;=\\bar y - \\hat\\beta_1\\bar x \\end{align}\\] This solution is indeed a minimum as the second partial derivative is positive: \\(\\frac{\\partial^2 Q}{\\partial\\hat\\beta_0^2}=n&gt;0\\) The second condition is: \\[ \\begin{align} \\frac{\\partial Q}{\\partial \\hat\\beta_1}&amp; =\\sum_{i=1}^{n}-2x_i(y_i-\\hat\\beta_0-\\hat\\beta_1x_i)=0\\\\ &amp;=\\sum_{i=1}^{n}(-x_iy_i+\\hat\\beta_0x_i+\\hat\\beta_1x_i^2)\\\\ &amp;=-\\sum_{i=1}^{n}x_iy_i+\\hat\\beta_0\\sum_{i=1}^{n}x_i+\\hat\\beta_1\\sum_{i=1}^{n}x_i^2 \\end{align}\\] Substitution of \\(\\hat\\beta_0\\) by (1.1.5) yields: \\[ \\begin{align} 0&amp;=-\\sum_{i=1}^{n}x_iy_i+(\\bar y - \\hat\\beta_1\\bar x)\\sum_{i=1}^{n}x_i+\\hat\\beta_1\\sum_{i=1}^{n}x_i^2\\\\ &amp;=-\\sum_{i=1}^{n}x_iy_i+\\bar y\\sum_{i=1}^{n}x_i-\\hat\\beta_1\\bar x\\sum_{i=1}^{n}x_i+\\hat\\beta_1\\sum_{i=1}^{n}x_i^2 \\end{align}\\] Separating into two sums: \\[ \\sum_{i=1}^{n}\\left( x_iy_i-x_i\\bar y\\right)-\\hat\\beta_1\\sum_{i=1}^{n}\\left(x_i^2-x_i\\bar x\\right)=0 \\tag{1.1.9}\\] So that: \\[ \\hat\\beta_1 = \\frac{\\sum_{i=1}^{n}\\left( x_iy_i-x_i\\bar y\\right)}{\\sum_{i=1}^{n}\\left( x_i^2-x_i\\bar x\\right)} = \\frac{\\sum_{i=1}^{n}\\left( x_iy_i\\right)-n\\bar x\\bar y}{\\sum_{i=1}^{n}\\left( x_i^2\\right)-n \\bar x^2} \\tag{1.1.10}\\] Thus: \\[ \\sum_{i=1}^{n}\\left( \\bar x^2-x_i\\bar x\\right)=0\\] And: \\[ \\sum_{i=1}^{n}\\left(\\bar x \\bar y - y_i \\bar x\\right)=0\\] This can be used in order to expand the previous term and finally to rewrite \\(\\hat\\beta_1\\) as the ratio of \\(Cov(x,y)\\) to \\(Var(x)\\): \\[ \\begin{align} \\hat\\beta_1&amp;=\\frac{\\sum_{i=1}^{n}\\left( x_iy_i-x_i\\bar y\\right)+\\sum_{i=1}^{n}\\left(\\bar x\\bar y - y_i \\bar x\\right)}{\\sum_{i=1}^{n}\\left( x_i^2-x_i\\bar x\\right)+\\sum_{i=1}^{n}\\left( \\bar x^2-x_i\\bar x\\right)}=\\frac{\\sum_{i=1}^{n}\\left( x_iy_i-x_i\\bar y\\right)+0}{\\sum_{i=1}^{n}\\left( x_i^2-x_i\\bar x\\right)+0}\\\\ \\\\ &amp;=\\frac{\\frac{1}{n}\\sum_{i=1}^{n}\\left( x_i-\\bar x\\right) \\left(y_i- \\bar y \\right)}{\\frac{1}{n}\\sum_{i=1}^{n}\\left( x_i-\\bar x\\right)^2}\\\\ \\\\ &amp;=\\frac{Cov(x,y)}{Var(x)} \\end{align}\\] The solution is indeed a minimum as the second partial derivative is positive: \\[\\frac{\\partial^2Q}{\\partial \\hat\\beta_1^2}= 2 \\sum_{i=1}^{n}x_i^2 &gt;0\\]   Let’s use these formulas to calculate regression coefficients for the running example as well: tibble( beta_1 = cov(x, y) / var(x), beta_0 = mean(y) - beta_1 * mean(x) ) ## # A tibble: 1 x 2 ## beta_1 beta_0 ## &lt;dbl&gt; &lt;dbl&gt; ## 1 7.08 -28.5 A similar result also exists for regression with more than one predictor variable, so-called multiple linear regression. Theorem 12.2 (OLS general) Let \\(X\\) be the \\(n \\times (k+1)\\) regression matrix for a linear regression model with \\(k\\) predictor variables for a data set \\(y\\) with \\(n\\) observations. The solution for OLS regression \\[ \\hat{\\beta} = \\langle \\hat{\\beta}_0, \\hat{\\beta}_1, \\dots , \\hat{\\beta}_k\\rangle = \\arg \\min_{\\beta} \\sum_{i = 1}^k (y_i - (X \\beta)_i)^2 \\] is given by: \\[ \\hat{\\beta} = (X^T \\ X)^{-1}\\ X^Ty \\] Show proof. Proof. With \\(n\\) observations, the vector \\(\\xi\\) of predicted values for given coefficient vector \\(\\beta\\) is: \\[ \\xi=X \\beta \\] More explicitly, this means that: \\[ \\begin{align*} \\xi_1&amp;=\\beta_0 + \\beta_{1} X_{11}+\\beta_2 X_{12} + \\ldots + \\beta_k X_{1k}\\\\ \\xi_2&amp;=\\beta_0 + \\beta_{1} X_{21}+\\beta_2 X_{22} + \\ldots + \\beta_k X_{2k}\\\\ \\ldots\\\\ \\xi_n&amp;=\\beta_0 + \\beta_{1} X_{n1}+\\beta_2 X_{n2}+ \\ldots + \\beta_k X_{nk} \\end{align*} \\] The OLS estimator is obtained (like in the special case of simple linear regression) by minimizing the residual sum of squares (RSS). The RSS for the multiple linear regression model is \\[ Q=\\sum_{i=1}^n \\left(y_i-\\beta_0 - \\beta_1 X_{i1}- \\beta_2 X_{i2}-...-\\beta_k X_{ik}\\right)^2 \\] To find the minimum of \\(Q\\) we calculate the first partial derivative of \\(Q\\) for each \\(\\beta_j\\): \\[\\begin{align} \\frac{\\partial Q}{\\partial\\beta_0}&amp;=2\\sum_{i=1}^n\\left(y_i-\\beta_0-\\beta_1 X_{i1}-\\beta_2 X_{i2}- \\ldots -\\beta_k X_{ik}\\right)(-1)\\\\ \\\\ \\frac{\\partial Q}{\\partial\\beta_1}&amp;=2\\sum_{i=1}^n\\left(y_i-\\beta_0-\\beta_1 X_{i1}-\\beta_2 X_{i2}- \\ldots -\\beta_k X_{ik}\\right)(- X_{i1})\\\\ \\\\ \\frac{\\partial Q}{\\partial\\beta_2}&amp;=2\\sum_{i=1}^n\\left(y_i-\\beta_0-\\beta_1 X_{i1}-\\beta_2 X_{i2}- \\ldots -\\beta_k X_{ik}\\right)(- X_{i2})\\\\ \\ldots \\\\ \\frac{\\partial Q}{\\partial\\beta_k}&amp;=2\\sum_{i=1}^n\\left(y_i-\\beta_0-\\beta_1 X_{i1}-\\beta_2 X_{i2}- \\ldots -\\beta_k X_{ik}\\right)(- X_{ik}) \\end{align}\\] For the minimum \\(\\hat{\\beta}\\) the derivative of each equation must be zero: \\[\\begin{align} &amp;\\sum_{i=1}^n\\left(y_i-\\hat\\beta_0-\\hat\\beta_1 X_{i1}-\\hat\\beta_2 X_{i2}- \\ldots -\\hat\\beta_k X_{ik}\\right) = 0\\\\ &amp;\\sum_{i=1}^n\\left(y_i-\\hat\\beta_0-\\hat\\beta_1 X_{i1}-\\hat\\beta_2 X_{i2}- \\ldots -\\hat\\beta_k X_{ik}\\right) X_{i1} = 0\\\\ &amp;\\sum_{i=1}^n\\left(y_i-\\hat\\beta_0-\\hat\\beta_1 X_{i1}-\\hat\\beta_2 X_{i2}- \\ldots -\\hat\\beta_k X_{ik}\\right) X_{i2} = 0\\\\ &amp; \\ldots \\\\ &amp;\\sum_{i=1}^n\\left(y_i-\\hat\\beta_0-\\hat\\beta_1 X_{i1}-\\hat\\beta_2 X_{i2}- \\ldots -\\hat\\beta_k X_{ik}\\right) X_{ik} = 0 \\end{align}\\] Alternatively, we can use matrix notation and combine the above equations into the following form: \\[X^Ty-X^TX\\hat\\beta=0\\] Rearranging this, the following expression is known as normal equations: \\[X^TX\\hat\\beta=X^Ty\\] Just for illustration, the system of normal equations in expanded matrix notation is: \\[ \\begin{bmatrix} n &amp; \\sum_{i=1}^n X_{i1} &amp; ... &amp; \\sum_{i=1}^n X_{ik}\\\\ \\sum_{i=1}^n X_{i1} &amp; \\sum_{i=1}^n X_{i1}^2 &amp; ... &amp; \\sum_{i=1}^n X_{i1} X_{ik}\\\\... &amp; ... &amp; ... &amp; ...\\\\ \\sum_{i=1}^n X_{ik} &amp; \\sum_{i=1}^n X_{ik} X_{i1} &amp; ... &amp; \\sum_{i=1}^n X_{ik}^2 \\end{bmatrix} \\begin{bmatrix} \\hat\\beta_0 \\\\ \\hat\\beta_1 \\\\ \\ldots \\\\ \\hat\\beta_k \\end{bmatrix} = \\begin{bmatrix} \\sum_{i=1}^ny_i\\\\\\sum_{i=1}^n X_{i1}y_i \\\\ \\ldots \\\\ \\sum_{i=1}^nX_{ik}y_i \\end{bmatrix} \\] The estimator \\(\\hat\\beta\\) can be obtained by rearranging again: \\[ \\hat{\\beta} = (X^T \\ X)^{-1}\\ X^Ty \\] Finally, to see that \\(\\hat\\beta\\) is indeed a global minimizer of the OLS criterion, we check that the second order condition is always a semidefinite positive matrix (details omitted here): \\[\\frac{\\partial^2 Q}{\\partial \\mathbf{\\hat\\beta}^2}=2X&#39;X &gt;0.\\]   The availability of these elegant mathematical solutions for OLS-regression explains why the computation of best-fitting regression coefficients with a built-in function like lm is lightning fast: it does not rely on optimization with optim, sampling methods or other similar computational approaches. Instead, it instantaneously calculates the analytical solution. References "],["Chap-04-01-linear-regression-MLE.html", "12.2 A maximum-likelihood approach", " 12.2 A maximum-likelihood approach In order to be able to extend regression modeling to predictor variables other than metric variables (so-called generalized linear regression models, see Chapter 15), the geometric approach needs to be abandoned in favor of a likelihood-based approach. The likelihood-based approach tries to find coefficients that explain the observed data most plausibly. 12.2.1 A likelihood-based model There are two equivalent formulations of a (simple) linear regression model using a likelihood-based approach. The first is more explicit, showing clearly that the model assumes that for each observation \\(y_i\\) there is an error term \\(\\epsilon_i\\), which is an iid sample from a Normal distribution. (Notice that the likelihood-based model assumes an additional parameter \\(\\sigma\\), the standard deviation of the error terms.) \\[ \\text{likelihood-based regression } \\text{[explicit version]} \\] \\[ \\begin{aligned} \\xi &amp; = X \\beta \\\\ y_i &amp; = \\xi + \\epsilon_i \\\\ \\epsilon_i &amp; \\sim \\text{Normal}(0, \\sigma) \\\\ \\end{aligned} \\] The second, equivalent version of this writes this more compactly, suppressing the explicit mentioning of iid error terms: \\[ \\text{likelihood-based regression } \\text{[compact version]} \\] \\[ \\begin{aligned} y_i &amp; \\sim \\text{Normal}((X \\beta)_i, \\sigma) \\end{aligned} \\] 12.2.2 Finding the MLE-solution with optim We can use optim to find maximum likelihood estimates for the simple linear regression of murder_rates predicted in terms of unemployment like so: # data to be explained / predicted y &lt;- murder_data %&gt;% pull(murder_rate) # data to use for prediction / explanation x &lt;- murder_data %&gt;% pull(unemployment) # function to calculate negative log-likelihood get_nll = function(y, x, beta_0, beta_1, sd) { if (sd &lt;= 0) {return( Inf )} yPred = beta_0 + x * beta_1 nll = -dnorm(y, mean = yPred, sd = sd, log = T) sum(nll) } # finding MLE fit_lh = optim(par = c(0, 1, 1), fn = function(par) { get_nll(y, x, par[1], par[2], par[3]) } ) # output the results message( &quot;Best fitting parameter values:&quot;, &quot;\\n\\tIntercept: &quot;, fit_lh$par[1] %&gt;% round(2), &quot;\\n\\tSlope: &quot;, fit_lh$par[2] %&gt;% round(2), &quot;\\nNegative log-likelihood for best fit: &quot;, fit_lh$value %&gt;% round(2) ) ## Best fitting parameter values: ## Intercept: -28.52 ## Slope: 7.08 ## Negative log-likelihood for best fit: 59.9 12.2.3 Finding the MLE-solution with glm R also has a built-in way of approaching simple linear regression with a maximum-likelihood approach, namely by using the function glm (generalized linear model). Notice that the output looks slightly different from that of lm. fit_glm &lt;- glm(murder_rate ~ unemployment, data = murder_data) fit_glm ## ## Call: glm(formula = murder_rate ~ unemployment, data = murder_data) ## ## Coefficients: ## (Intercept) unemployment ## -28.53 7.08 ## ## Degrees of Freedom: 19 Total (i.e. Null); 18 Residual ## Null Deviance: 1855 ## Residual Deviance: 467.6 AIC: 125.8 12.2.4 Finding the MLE-solution with math It is no coincidence that these fitted values are (modulo number imprecision) the same as for the geometric OLS approach. Theorem 12.3 (MLE solution) The vector \\(\\hat{\\beta} \\in \\mathbb{R}^k\\) maximizing the likelihood of a linear regression model with \\(k\\) predictors is the same as the vector that minimizes the residual sum of squares, namely: \\[ \\arg \\max_{\\beta} \\prod_{i = 1}^n \\text{Normal}(y_i \\mid \\mu = (X \\beta)_i, \\sigma) = (X^T X)^{-1} X^Ty \\] Show proof. Proof. Using the more explicit formulation of likelihood-based regression, we can rewrite the likelihood function in terms of the probability of “sampling” error terms \\(\\epsilon_i\\) for each \\(y_i\\) in such a way that \\(\\epsilon_i = y_i - \\xi_i = y_i - (X \\beta)_i\\): \\[ \\begin{align*} LH(\\beta) &amp; = \\prod_{i = 1}^n \\text{Normal}(\\epsilon_i \\mid \\mu = 0, \\sigma) \\\\ &amp; = \\prod_{i=1}^{n}\\frac{1}{\\sqrt{2\\pi} \\sigma} \\exp\\left[{-\\frac{1}{2}\\left(\\frac{\\epsilon_i^2}{\\sigma^2}\\right)}\\right] &amp; \\text{[by def. of normal distr.]} \\end{align*} \\] Since we are only interested in the maximum of this function, we can also look for the maximum of \\(\\log LH(\\beta)\\) because the logarithm is a strictly monotone increasing function. This is useful because the logarithm can then be rewritten as a sum. \\[ \\begin{align} LLH(\\beta)&amp;=\\log \\left(LH(\\beta)\\right)\\\\ &amp;=-\\left( \\frac{n}{2}\\right) \\log(2\\pi)-\\left( \\frac{n}{2}\\right) \\log(\\sigma^2)-\\left( \\frac{1}{2}\\sigma^2\\right) \\sum_{i=1}^n(\\epsilon_i)^2 \\tag{2.7} \\end{align} \\] Since only the last summand depends on \\(\\beta\\), and since we can drop the factor \\(\\frac{1}{2}\\sigma^2\\) for finding a maximum, we obtain: \\[ \\arg \\max_\\beta LLH(\\beta) = - \\sum_{i=1}^n(\\epsilon_i)^2 \\] If we substitute \\(\\epsilon_i\\) and multiply with \\(-1\\) to find the minimum, we see that we are back at the original problem of finding the OLS solution: \\[ \\arg \\min_\\beta -LLH(\\beta) = \\sum_{i=1}^n(y_i - (X \\beta)_i)^2 \\] Notice that this result holds independently of \\(\\sigma\\), which just canceled out in this derivation.   Exercise 13.3 Let’s assume that following the MLE approach, we obtained \\(\\beta_0 = 1\\), \\(\\beta_1 = 2\\) and \\(\\sigma = 0.5\\). For \\(x_i = 0\\), which \\(\\xi_i\\) value will maximize the likelihood? Solution Since \\(y_i \\sim \\text{Normal} (\\beta_0 + \\beta_1 x_i , \\sigma)\\), the likelihood is maximized at the mean of the normal distribution, i.e., \\(y_i = \\beta_0 + \\beta_1 x_i = 1\\). "],["a-bayesian-approach.html", "12.3 A Bayesian approach", " 12.3 A Bayesian approach The Bayesian approach to linear regression just builds on the likelihood-based approach of the last section, to which it adds priors for the model parameters \\(\\beta\\) (a vector of regression coefficients) and \\(\\sigma\\) (the standard deviation of the normal distribution). The next Chapter 13 introduces ways of conveniently sampling from Bayesian regression models with variable specifications of these model priors using the R package brms. This section introduces a Bayesian regression model with non-informative priors which extends the non-informative priors model for inferring the parameters of a normal distribution, which was introduced in section 9.4. The Bayesian non-informative priors regression model uses the same likelihood function as the likelihood-based model from before and assumes essentially the same non-informative priors as the model from section 9.4. Concretely, it assumes an (improper) flat distribution over regression coefficients, and it assumes that the variance \\(\\sigma^2\\) is log-uniformly distributed, which is equivalent to saying that \\(\\sigma^2\\) follows an inverse distribution. So, for a regression problem with \\(k\\) predictors, predictor matrix \\(X\\) of size \\(x \\times (k+1)\\) and dependent data \\(y\\) of size \\(n\\), we have: \\[ \\begin{aligned} \\beta_j &amp; \\sim \\mathrm{Uniform}(-\\infty, \\infty) \\ \\ \\ \\text{for all } 0 \\le j \\le k \\\\ \\log(\\sigma^2) &amp; \\sim \\mathrm{Uniform}(-\\infty, \\infty) \\\\ y_i &amp; \\sim \\text{Normal}((X \\beta)_i, \\sigma) \\end{aligned} \\] Using this prior, we can calculate a closed-form of the posterior to sample from (for details see Gelman et al. (2014) Chap. 14). The posterior has the general form: \\[ P(\\beta, \\sigma^2 \\mid y) \\propto P(\\sigma^2 \\mid y) \\ P(\\beta \\mid \\sigma^2, y) \\] Without going into details here, the posterior distribution of the variance \\(\\sigma^2\\) is an inverse-\\(\\chi^2\\): \\[ \\sigma^2 \\mid y \\sim \\text{Inv-}\\chi^2(n-k, \\color{gray}{\\text{ some-complicated-term}}) \\] The posterior of the regression coefficients is a (multivariate) normal distribution: \\[ \\beta \\mid \\sigma^2, y \\sim \\text{MV-Normal}(\\hat{\\beta}, \\color{gray}{\\text{ some-complicated-term}}) \\] What is interesting to note is that the mean of the posterior distribution of regression coefficients is exactly the optimal solution for ordinary least-squares regression and the maximum likelihood estimate: \\[ \\hat{\\beta} = (X^T \\ X)^{-1}\\ X^Ty \\] This is not surprising given that the mean of a normal distribution is also its mode and that the MAP for a non-informative prior coincides with the MLE. The aida package provides the convenience function aida::get_samples_regression_noninformative for sampling from the posterior of the Bayesian non-informative priors model. We use this function below but show it explicitly first: get_samples_regression_noninformative &lt;- function( X, # design matrix y, # dependent variable n_samples = 1000 ) { if(is.null(colnames(X))) { stop(&quot;Design matrix X must have meaningful column names for coefficients.&quot;) } n &lt;- length(y) k &lt;- ncol(X) # calculating the formula from Gelman et al # NB &#39;solve&#39; computes the inverse of a matrix beta_hat &lt;- solve(t(X) %*% X) %*% t(X) %*% y V_beta &lt;- solve(t(X) %*% X) # &#39;sample co-variance matrix&#39; s_squared &lt;- 1 / (n - k) * t(y - (X %*% beta_hat)) %*% (y - (X %*% beta_hat)) # sample from posterior of variance samples_sigma_squared &lt;- extraDistr::rinvchisq( n = n_samples, nu = n - k, tau = s_squared ) # sample full joint posterior triples samples_posterior &lt;- map_df( seq(n_samples), function(i) { s &lt;- mvtnorm::rmvnorm(1, beta_hat, V_beta * samples_sigma_squared[i]) colnames(s) = colnames(X) as_tibble(s) %&gt;% mutate(sigma = samples_sigma_squared[i] %&gt;% sqrt()) } ) return(samples_posterior) } Let’s apply this function to the running example of this chapter: # variables for regression y &lt;- murder_data$murder_rate x &lt;- murder_data$unemployment # the predictor &#39;intercept&#39; is just a # column vector of ones of the same length as y int &lt;- rep(1, length(y)) # create predictor matrix with values of all explanatory variables # (here only intercept and slope for MAD) X &lt;- matrix(c(int, x), ncol = 2) colnames(X) &lt;- c(&quot;intercept&quot;, &quot;slope&quot;) # collect samples with convenience function samples_Bayes_regression &lt;- aida::get_samples_regression_noninformative(X, y, 10000) The tibble samples_Bayes_regression contains 10,000 samples from the posterior. Let’s have a look at the first couple of samples: head(samples_Bayes_regression) ## # A tibble: 6 x 3 ## intercept slope sigma ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -34.3 7.59 4.54 ## 2 -26.1 6.60 5.75 ## 3 -35.4 8.06 4.71 ## 4 -26.1 6.84 5.03 ## 5 -28.1 7.01 4.65 ## 6 -29.8 7.73 6.91 Remember that each sample is a triple, one value for each of the model’s parameters. We can also look at some summary statistics, using another convenience function from the aida package: rbind( aida::summarize_sample_vector(samples_Bayes_regression$intercept, &quot;intercept&quot;), aida::summarize_sample_vector(samples_Bayes_regression$slope, &quot;slope&quot;), aida::summarize_sample_vector(samples_Bayes_regression$sigma, &quot;sigma&quot;) ) ## # A tibble: 3 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 intercept -42.5 -28.6 -13.6 ## 2 slope 5.01 7.09 9.09 ## 3 sigma 3.72 5.33 7.30 Here’s a density plot of the (marginal) posteriors for each parameter value: samples_Bayes_regression %&gt;% pivot_longer(cols = everything(), values_to = &quot;sample&quot;, names_to = &quot;parameter&quot;) %&gt;% mutate(parameter = factor(parameter, levels = c(&#39;intercept&#39;, &#39;slope&#39;, &#39;sigma&#39;))) %&gt;% ggplot(aes(x = sample)) + geom_density(fill = &quot;lightgray&quot;, alpha = 0.5) + facet_wrap(~parameter, scales = &quot;free&quot;) While these results are approximate, because they are affected by random sampling, they also convey a sense of uncertainty: given the data and the model, how certain should we be that, say, the slope is really at 7.08? We could, for instance, now test the hypothesis that the factor unemployment does not contribute at all to predicting the value of the variable murder_rate. This could be addressed as the point-valued hypothesis that the slope coefficient is exactly equal to zero. Since the 95% credible interval clearly excludes this value, we might (based on this binary decision logic) now say that based on the model and the data there is reason to believe that unemployment does contribute to predicting murder_rate, in fact, that the higher a city’s unemployment rate, the higher we should expect its murder rate to be. (Remember: this is not a claim about any kind of causal relation!) References "],["comparison-of-approaches.html", "12.4 Comparison of approaches", " 12.4 Comparison of approaches We saw three conceptually different approaches to linear regression: (i) based on ordinary least squares, (ii) based on likelihood alone and (iii) based on Bayesian inference (with non-informative priors). At the core of linear regression lies the linear predictor \\(\\xi = X \\beta\\), which all three approaches used. The three approaches differ in how they determine the regression coefficients \\(\\beta\\) that feed this linear predictor. Another crucial difference is in how these different approaches make predictions about new data observations \\(y_\\text{new}\\) given some (hypothetical or actually observed) vector of predictor variables \\(x_\\text{new}\\). Let’s go through these differences with some more eye for detail. The OLS-based approach determined coefficients based on a geometric notion of distance in terms of squared loss. The prediction of an OLS regression model for a new data set’s dependent variables would just be:56 \\[y_\\text{new} = \\hat\\xi = X_\\text{new} \\hat \\beta\\] In words, The OLS-model predicts that \\(y_\\text{new}\\) is given as a point on the best predictor linear regression line. This is a deterministic, very clear-cut point-valued prediction and almost certainly always false. The OLS approach, insofar as we have seen it, does not contain a measure of spread around this best predictor. The MLE-based approach uses a normal distribution to also quantify the likely spread of observations around the best predictor line. The (posterior) predictions of a trained MLE-based regression model are probabilistic. They are samples from a normal distribution whose central tendency is the best linear predictor: \\[ \\begin{align*} \\hat \\xi &amp; = X_\\text{new} \\hat \\beta \\\\ y_\\text{new} &amp; \\sim \\text{Normal}(\\hat \\xi, \\hat \\sigma) \\end{align*} \\] Finally, the Bayesian is even more stochastic, so to speak, than the MLE-based approach. The Bayesian approach does not assume a single best linear predictor vector \\(\\hat{\\xi}\\) for its (posterior) predictions, but rather gives us a probability distribution over linear predictors. In vague terms, we could say that Bayesian regression gives us, not a single regression line, but a weighted cloud of (usually: infinitely many) regression lines. A schematic representation of the posterior predictive for the new data point \\(y_\\text{new}\\) given \\(x_\\text{new}\\) in Bayesian regression is: \\[ \\begin{align*} \\beta_\\text{sample}, \\sigma_\\text{sample} &amp; \\sim \\text{Bayesian posterior given data} \\\\ \\xi_\\text{sample} &amp; = X_\\text{new} \\beta_\\text{sample} \\\\ y_\\text{new} &amp; \\sim \\text{Normal}(\\xi_\\text{sample}, \\sigma_\\text{sample}) \\end{align*} \\] Here, \\(X_\\text{new}\\) is the predictor matrix for the new predictor vector \\(x_\\text{new}\\).↩ "],["Chap-04-02-Bayes-regression-practice.html", "13 Bayesian regression in practice", " 13 Bayesian regression in practice Instead of hand-coding each Bayesian regression model, we can use the brms package (Burkner 2017). From now on, the exploration of Bayesian data analysis in this book will be centered on this package. This chapter provides a practical introduction to using this package. As a running example, this chapter uses the world temperature data set. We are going to regress avg_temp against year in order to address the “research question” of whether the world is getting warmer. More concretely, we are going to address the question of whether the data provide reason to believe that, on the assumption of a linear relationship \\(y = \\beta_0 + \\beta_1 x\\), where \\(x\\) is a calendar year and \\(y\\) is the average surface temperature for that year, the coefficient \\(\\beta_1\\) is credibly positive.57 The learning goals for this chapter are: be able to use the brms package to run linear regression models and in particular, to: specify a regression model with an R formula interpret the summary output extract posterior samples change the default priors test hypotheses about regression coefficients References "],["simple-linear-regression-with-brms.html", "13.1 Simple linear regression with brms", " 13.1 Simple linear regression with brms The main function of the brms package is brm (short for Bayesian Regression Model). It behaves very similarly to the glm function we saw above.58 Here is an example of the current case study based on the world temperature data set: fit_temperature &lt;- brm( # specify what to explain in terms of what # using the formula syntax formula = avg_temp ~ year, # which data to use data = aida::data_WorldTemp ) The formula syntax y ~ x tells R that we want to explain or predict the dependent variable y in terms of associated measurements of x, as stored in the data set (tibble or data.frame) supplied in the function call as data. The object returned by this function call is a special-purpose object of the class brmsfit. If we print this object to the screen we get a summary (which we can also produce with the explicit call summary(fit_temperature)). fit_temperature ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: avg_temp ~ year ## Data: aida::data_WorldTemp (Number of observations: 269) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## Intercept -3.51 0.59 -4.67 -2.38 1.00 4411 2800 ## year 0.01 0.00 0.01 0.01 1.00 4470 2874 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.41 0.02 0.37 0.44 1.00 1435 1585 ## ## Samples were drawn using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). This output tells us which model we fitted and it states some properties of the MCMC sampling routine used to obtain samples from the posterior distribution. The most important pieces of information for drawing conclusions from this analysis are the summaries for the estimated parameters, here called “Intercept” (the \\(\\beta_0\\) of the regression model), “year” (the slope coefficient \\(\\beta_1\\) for the year column in the data) and “sigma” (the standard deviation of the Gaussian error function around the central predictor). The “Estimate” shown here for each parameter is its posterior mean. The columns “l-95% CI” and “u-95% CI” give the 95% inner quantile range of the marginal posterior distribution for each parameter. Actually, brm is similar to the lmer function from the lme4 package, which is more general than glm. Both lmer and brm also cover so-called hierarchical regression models.↩ "],["extracting-posterior-samples.html", "13.2 Extracting posterior samples", " 13.2 Extracting posterior samples The function brms::posterior_samples extracts the samples from the posterior which are part of the brmsfit object.59 post_samples_temperature &lt;- brms::posterior_samples(fit_temperature) head(post_samples_temperature) ## b_Intercept b_year sigma lp__ ## 1 -3.354471 0.006162810 0.4216292 -142.8739 ## 2 -3.278704 0.006122216 0.4129473 -142.6768 ## 3 -3.326709 0.006157385 0.4234467 -141.8426 ## 4 -3.355899 0.006188528 0.4320845 -141.5849 ## 5 -3.675827 0.006354563 0.4024409 -140.3621 ## 6 -3.230453 0.006138876 0.3943308 -141.0583 These extracted samples can be used as before, e.g., to compute our own summary tibble: map_dfr(post_samples_temperature %&gt;% select(-lp__), aida::summarize_sample_vector) %&gt;% mutate(Parameter = colnames(post_samples_temperature[1:3])) ## # A tibble: 3 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 b_Intercept -4.64 -3.51 -2.36 ## 2 b_year 0.00566 0.00627 0.00687 ## 3 sigma 0.371 0.405 0.438 Or for manual plotting:60 post_samples_temperature %&gt;% select(-lp__) %&gt;% pivot_longer(cols = everything()) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_wrap(~name, scales = &quot;free&quot;) The column lp__ gives the log probability of the data for the corresponding parameter values in each row. This is useful information for model checking and model comparison, but we will neglect it here.↩ There are also specialized packages for plotting the output of Stan models and brms model fits, such as the excellent tidybayes and ggdist packages.↩ "],["excursion-inspecting-the-underlying-stan-code.html", "13.3 [Excursion:] Inspecting the underlying Stan code", " 13.3 [Excursion:] Inspecting the underlying Stan code Under the hood, the brms package automatically creates Stan code, runs it and computes useful additional information for regression modeling around the stan_fit object. Here’s how we can inspect the precise model that brms set up for us and ran: brms::stancode(fit_temperature) ## // generated with brms 2.14.4 ## functions { ## } ## data { ## int&lt;lower=1&gt; N; // total number of observations ## vector[N] Y; // response variable ## int&lt;lower=1&gt; K; // number of population-level effects ## matrix[N, K] X; // population-level design matrix ## int prior_only; // should the likelihood be ignored? ## } ## transformed data { ## int Kc = K - 1; ## matrix[N, Kc] Xc; // centered version of X without an intercept ## vector[Kc] means_X; // column means of X before centering ## for (i in 2:K) { ## means_X[i - 1] = mean(X[, i]); ## Xc[, i - 1] = X[, i] - means_X[i - 1]; ## } ## } ## parameters { ## vector[Kc] b; // population-level effects ## real Intercept; // temporary intercept for centered predictors ## real&lt;lower=0&gt; sigma; // residual SD ## } ## transformed parameters { ## } ## model { ## // likelihood including all constants ## if (!prior_only) { ## target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma); ## } ## // priors including all constants ## target += student_t_lpdf(Intercept | 3, 8.3, 2.5); ## target += student_t_lpdf(sigma | 3, 0, 2.5) ## - 1 * student_t_lccdf(0 | 3, 0, 2.5); ## } ## generated quantities { ## // actual population-level intercept ## real b_Intercept = Intercept - dot_product(means_X, b); ## } Even if the Stan code itself is not entirely transparent, a few interesting observations to be glimpsed are: brms automatically centralizes the predictor values, but returns fits for the non-centralized coefficients by default, the prior for slope coefficients is a completely uninformative one (every value is equally likely) "],["setting-priors.html", "13.4 Setting priors", " 13.4 Setting priors Bayesian models require priors for all parameters. The function brms::prior_summary shows which priors a model fitted with brms has (implicitly) assumed. prior_summary(fit_temperature) ## prior class coef group resp dpar nlpar bound source ## (flat) b default ## (flat) b year (vectorized) ## student_t(3, 8.3, 2.5) Intercept default ## student_t(3, 0, 2.5) sigma default This output tells us that brms used a Student’s \\(t\\) distribution for the intercept and the standard deviation.61 It also shows us that all slope coefficients (abbreviated here as “b”) have a flat (non-informative) prior. If we want to change the prior for any model parameter, or family of model parameters, we can use the prior argument in the brm function, which requires a special type of input using brms’ prior() function. The syntax for distributions inside the prior() follows that of Stan, as documented in the Stan function reference. The example below sets the prior for the slope coefficient to a very narrow Student’s \\(t\\) distribution with mean -0.01 and standard deviation 0.001. fit_temperature_skeptical &lt;- brm( # specify what to explain in terms of what # using the formula syntax formula = avg_temp ~ year, # which data to use data = aida::data_WorldTemp, # hand-craft priors for slope prior = prior(student_t(1, -0.01, 0.001), coef = year) ) This prior is a skeptical prior in the sense that it assumes a negative slope to be more likely, that is, the world has been getting colder over the years. Comparing the summary statistics for the original fit: map_dfr(post_samples_temperature %&gt;% select(-lp__), aida::summarize_sample_vector) %&gt;% mutate(Parameter = colnames(post_samples_temperature[1:3])) ## # A tibble: 3 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 b_Intercept -4.64 -3.51 -2.36 ## 2 b_year 0.00566 0.00627 0.00687 ## 3 sigma 0.371 0.405 0.438 against those of the new fit using skeptical priors: post_samples_temperature_skeptical &lt;- brms::posterior_samples(fit_temperature_skeptical) map_dfr(post_samples_temperature_skeptical %&gt;% select(-lp__), aida::summarize_sample_vector) %&gt;% mutate(Parameter = colnames(post_samples_temperature_skeptical[1:3])) ## # A tibble: 3 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 b_Intercept -4.69 -3.48 -2.34 ## 2 b_year 0.00564 0.00626 0.00689 ## 3 sigma 0.370 0.405 0.439 we see that the data has overturned the initial skeptical prior, suggesting that the evidence provided in the data for the belief that the slope coefficient is positive is stronger than the original (maybe hypothetical) assumption to the contrary. Exercise 13.1 What do you expect to happen to the estimate of the intercept when using a very strong prior on the slope coefficient for year, e.g., a normal distribution with a mean of 5 and a standard deviation of .01? Solution We should expect the posterior of the slope for year to be much higher than the original estimate, much closer to 5. The reason is that the normal distribution is much less “willing” to allow outliers and so constraints the fit much stronger towards the mean of the prior than the Student’s \\(t\\) distribution. Notice that with slope values close to 5, the estimates for the intercept and standard deviation also change (in ridiculous ways). fit_temperature_ridiculous &lt;- brm( # specify what to explain in terms of what # using the formula syntax formula = avg_temp ~ year, # which data to use data = aida::data_WorldTemp, # hand-craft priors for slope prior = prior(normal(5, 0.01), coef = year) ) post_samples_temperature_ridiculous &lt;- brms::posterior_samples(fit_temperature_ridiculous) map_dfr(post_samples_temperature_ridiculous %&gt;% select(-lp__), aida::summarize_sample_vector) %&gt;% mutate(Parameter = colnames(post_samples_temperature_ridiculous[1:3])) ## # A tibble: 3 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 b_Intercept -9442. -9406. -9367. ## 2 b_year 4.98 4.99 5.01 ## 3 sigma 356. 386. 420. Actually, the prior on the standard deviation is a truncated Student’s \\(t\\) distribution, as negative values are impossible for a standard deviation.↩ "],["posterior-predictions.html", "13.5 Posterior predictions", " 13.5 Posterior predictions The function brms::posterior_predict returns samples from the posterior predictive distribution of a brms_fit object. For example, the code below yields 4000 sampled predictions for each of the 269 year values in the world temperature data set. samples_post_pred_temperature &lt;- brms::posterior_predict(fit_temperature) dim(samples_post_pred_temperature) ## [1] 4000 269 The function brms::posterior_predict can also be used to sample from the posterior predictive distribution of a fitted regression model for new values of the model’s predictors. If we are interested in predictions of average world surface temperature for the years 2025 and 2040, all we need to do is supply a data frame (or tibble) with the predictor values of interest as an argument. # create a tibble with new predictor values X_new &lt;- tribble( ~ &quot;year&quot;, 2025, 2040 ) # get sample predictions from the Bayesian model post_pred_new &lt;- brms::posterior_predict(fit_temperature, X_new) # get a (Bayesian) summary for these posterior samples rbind( aida::summarize_sample_vector(post_pred_new[,1], &quot;2025&quot;), aida::summarize_sample_vector(post_pred_new[,2], &quot;2040&quot;) ) ## # A tibble: 2 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2025 8.47 9.20 10.1 ## 2 2040 8.46 9.28 10.1 "],["testing-hypotheses.html", "13.6 Testing hypotheses", " 13.6 Testing hypotheses The brms package also contains a useful function to address hypotheses about model parameters. The function brms::hypothesis can compute Bayes factors for point-valued hypotheses using the Savage-Dickey method. It also computes a binary test of whether a point-valued hypothesis is credible based on inclusion in a Bayesian credible interval. For interval-valued hypotheses \\(\\theta \\in [a;b]\\), the function brms::hypothesis computes the posterior odds (called evidence ratio in the context of this function):62 \\[ \\frac{P(\\theta \\in [a;b] \\mid D)}{P(\\theta \\not \\in [a;b] \\mid D)} \\] Computing Bayes factors for point-valued hypotheses with brms::hypothesis requires proper priors for all parameters that are part of the hypothesis. It also requires taking samples from the priors of parameters.63 So, here is a function call of brms:brm which (i) specifies a reasonably unconstrained but proper parameter for the slope coefficient for year and (ii) also collects samples from the prior (by setting the option sample_prior = &quot;yes&quot;): fit_temperature_weakinfo &lt;- brm( # specify what to explain in terms of what # using the formula syntax formula = avg_temp ~ year, # which data to use data = aida::data_WorldTemp, # weakly informative prior for slope prior = prior(student_t(1, 0, 1), coef = year), # option to sample from priors as well # (necessary for calculating BFs with Savage-Dickey) sample_prior = &#39;yes&#39;, # increase number of iterations (for precision of estimates) iter = 20000 ) Before addressing hypotheses about the slope parameter for year, let’s remind ourselves of the summary statistics for the posterior: brms::posterior_samples(fit_temperature_weakinfo) %&gt;% pull(b_year) %&gt;% aida::summarize_sample_vector() ## # A tibble: 1 x 4 ## Parameter `|95%` mean `95%|` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &quot;&quot; 0.00563 0.00627 0.00688 The main “research hypothesis” of interest is whether the slope for year is credibly positive. This is an interval-valued hypothesis and we can test it like so: hypothesis(fit_temperature_weakinfo, &quot;year &gt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob Star ## 1 (year) &gt; 0 0.01 0 0.01 0.01 Inf 1 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. The table shows the estimate for the slope of year, together with an estimated error, lower and upper bounds of a credible interval (95% by default). All of these numbers are rounded. It also shows the “Evidence ratio” which, for an interval-valued hypothesis is not the Bayes factor, but the posterior odds (see above). In the present case, an evidence ratio of Inf means that all posterior samples for the slope coefficient were positive. This is also expressed in the posterior probability (“Post.Prod” in the table) for the proposition that the interval-valued hypothesis is true (given data and model). The following tests a point-valued hypothesis: hypothesis(fit_temperature_weakinfo, &quot;year = 0.005&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob ## 1 (year)-(0.005) = 0 0 0 0 0 0.2 0.17 ## Star ## 1 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. For this point-valued hypothesis, the estimate (and associated error and credible interval) are calculated as a comparison against 0, as shown in the “Hypothesis” column. The evidence ratio given in the results table is the Bayes factor of the point-valued hypothesis against the embedding model (the full regression model with the prior we specified), as calculated by the Savage-Dickey method. As before, the posterior probability is also shown. The “Star” in this table indicates that the point-valued hypothesis is excluded from the computed credible interval, so that - if we adopted the (controversial) binary decision logic discussed in Chapter 11 - we would reject the tested hypothesis. Notice that for priors where \\(P(\\theta \\in [a;b]) = 0.5\\), the posterior odds equal the Bayes factor. For other priors, we’d need to correct the posterior odds by the priors to obtain Bayes factors, something that the brms package does not (presently seem to) do, unfortunately.↩ It may seem unnecessary to take prior samples for parameters, because, after all, couldn’t we just look at the (closed-form) definition of the prior for that parameter? Well, that only works for top-level parameters, but not parameters in a hierarchical model which depend on the value of other parameters and which therefore have no (easily accessible) closed-form prior to look up.↩ "],["Chap-04-03-predictors.html", "14 Categorical predictors", " 14 Categorical predictors The previous chapters applied linear regression models to cases where we wanted to predict a metric variable \\(y\\) based on the values of associated metric measurements \\(x_i\\) (\\(1 \\le i \\le n\\)). In this chapter, we are generalizing this approach to also deal with the case where a predictor \\(x_i\\) is a categorical variable, such as an indicator value showing which group or experimental condition a measurement of \\(y\\) belongs to. In this way, at the end of the chapter, we will be able to apply linear regression modeling to the analysis of (metric) measurements, for instance, from a factorial design - a common design type of psychological experiments (see Chapter 3). As we will see in this chapter, the only “trick” to generalizing linear regression modeling to also cover categorical predictors, as we will call them, is to map levels of a categorical variable onto numbers. For example, if we have two groups in a predictor variable \\(x\\), say group \\(A\\) and \\(B\\), we could just encode group \\(A\\) as a value of \\(x = 0\\) and group \\(B\\) as a value of \\(x = 1\\). But there are many sensible mappings of this kind, and many helplessly ridiculous ones. The relevant technical term here is contrast coding, i.e., a scheme of mapping categorical distinctions onto numeric representations in such a way that the theoretically interesting contrasts (i.e., the distinctions between groups that we want to test) can be easily tested with the resulting regression model. The chapter is structured as follows. Section 14.1 uses the Simon task data to cover the case of a single categorical predictor with just two category levels (e.g., just groups \\(A\\) and \\(B\\)). Section 14.2 then uses data from the Mental Chronometry experiment to look at the more general case of a single categorical predictor with more than two category levels (e.g., just groups \\(A\\), \\(B\\) and \\(C\\)). Section 14.3 considers cases with several categorical predictors, including their interaction, based on the politeness data set. The video below provides a dense coverage of single-predictor contrast coding, i.e., the contents of Sections 14.1 and 14.2. The learning goals for this chapter are: understand the basic idea behind contrast coding be able to interpret the results of a regression analysis that uses treatment coding be able to interpret inferences for models including an interaction coefficient for two categorical predictors "],["Chap-04-03-predictors-two-levels.html", "14.1 Single two-level predictor", " 14.1 Single two-level predictor Let’s revisit the data from the Simon task. Just like in chapter 11, we will be looking at the hypothesis that, among all correct responses, the mean reaction times for the congruent condition are lower than those of the incongruent condition. # extract just the currently relevant columns # from the data set data_ST_excerpt &lt;- aida::data_ST %&gt;% filter(correctness == &quot;correct&quot;) %&gt;% select(RT, condition) # show the first couple of lines head(data_ST_excerpt, 5) ## # A tibble: 5 x 2 ## RT condition ## &lt;dbl&gt; &lt;chr&gt; ## 1 735 incongruent ## 2 557 incongruent ## 3 455 congruent ## 4 376 congruent ## 5 626 incongruent Notice that this tibble contains the data in a tidy format, i.e., each row contains a pair of associated measurements. We want to explain or predict the variable RT in terms of the variable condition. The variable RT is a metric measurement. But the variable condition is categorical variable with two category levels. Before we head on, let’s look at the data (again). Here’s a visualization of the distribution of RTs in each condition: data_ST_excerpt %&gt;% ggplot(aes(x = condition, y = RT, color = condition, fill = condition)) + geom_violin() + theme(legend.position = &quot;none&quot;) The means for both conditions are: data_ST_excerpt %&gt;% group_by(condition) %&gt;% summarize(mean_RT = mean(RT)) ## # A tibble: 2 x 2 ## condition mean_RT ## &lt;chr&gt; &lt;dbl&gt; ## 1 congruent 453. ## 2 incongruent 477. The difference between the means of conditions is: data_ST_excerpt %&gt;% filter(condition == &quot;incongruent&quot;) %&gt;% pull(RT) %&gt;% mean() - data_ST_excerpt %&gt;% filter(condition == &quot;congruent&quot;) %&gt;% pull(RT) %&gt;% mean() ## [1] 23.63348 While numerically this difference seems high, the question remains whether this difference is, say, big enough to earn our trust. We address this question here using posterior inference based on a regression model. Notice that we simply use the same formula syntax as before: we want a model that explains RT in terms of condition. fit_brms_ST &lt;- brm( formula = RT ~ condition, data = data_ST_excerpt ) Let’s inspect the summary information for the posterior samples, which we do here using the summary function for the brms_fit object from which we extract information only about the fixed effects, showing the mean (here called “Estimate”) and indicators of the lower and upper 95% inner quantile. summary(fit_brms_ST)$fixed[,c(&quot;l-95% CI&quot;, &quot;Estimate&quot;, &quot;u-95% CI&quot;)] ## l-95% CI Estimate u-95% CI ## Intercept 451.02810 452.87640 454.68453 ## conditionincongruent 21.07431 23.64385 26.15692 We see that the model inferred a value for an “Intercept” variable and for another variable called “conditionincongruent”. What are these? If you look back at the empirically inferred means, you will see that the mean estimate for “Intercept” corresponds to the mean of RTs in the “congruent” condition and that the mean estimate for the variable “conditionincongruent” closely matches the computed difference between the means of the two conditions. And, indeed, that is what this regression model is doing for us. Using a uniform formula syntax, brms has set up a regression model in which a predictor, given as a character (string) column, was internally coerced somehow into a format that produced an estimate for the mean of one condition and an estimate for the difference between conditions. How do these results come about? And why are the variables returned by brms called “Intercept” and “conditionincongruent”? In order to use the simple linear regression model, the categorical predictor \\(x\\) has been coded as either \\(0\\) or \\(1\\). Concretely, brms has introduced a new predictor variable, call it new_predictor, which has value \\(0\\) for the “congruent” condition and \\(1\\) for the “incongruent” condition. By default, brms chooses the level that is alphanumerically first as the so-called reference level, assigning to it the value \\(0\\). Here, that’s “congruent”. The result would look like this: data_ST_excerpt %&gt;% mutate(new_predictor = ifelse(condition == &quot;congruent&quot;, 0, 1)) %&gt;% head(5) ## # A tibble: 5 x 3 ## RT condition new_predictor ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 735 incongruent 1 ## 2 557 incongruent 1 ## 3 455 congruent 0 ## 4 376 congruent 0 ## 5 626 incongruent 1 Now, with this new numeric coding of the predictor, we can calculate the linear regression model as usual: \\[ \\begin{aligned} \\xi_i &amp; = \\beta_0 + \\beta_1 x_i &amp; y_i &amp; \\sim \\text{Normal}(\\mu = \\xi_i, \\sigma) \\end{aligned} \\] As a consequence, the linear model’s intercept parameter \\(\\beta_0\\) can be interpreted as the predicted mean of the reference level: if for some \\(i\\) we have \\(x_i = 0\\), then the predictor \\(\\xi_i\\) will just be \\(\\xi_i = \\beta_0\\); whence that the intercept \\(\\beta_0\\) will be fitted to the mean of the reference level if for some \\(i\\) we have \\(x_i = 1\\) instead, the predicted value will be computed as \\(\\xi_i = \\beta_0 + \\beta_1\\), so that the slope term \\(\\beta_1\\) will effectively play the role of the difference \\(\\delta\\) between the mean of the groups. The upshot is that we can conceive of a \\(t\\)-test as a special case of a linear regression model! Schematically, we can represent this coding scheme for coefficients like so: ## # A tibble: 2 x 3 ## condition x_0 x_1 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 congruent 1 0 ## 2 incongruent 1 1 Exercise 14.1 For the given data below, compute (or guess) the MLEs of the regression coefficients. Choose the appropriate 0/1 encoding of group information. We have two groups, and three measurements of \\(y\\) for each: groupA: (1,0,2) and groupB: (10,13,7) Solution For \\(\\xi_i = \\beta_0 + \\beta_1 x_i\\), let \\(x_i =0\\) if the data point is from groupA and \\(x_i=1\\) if it’s from groupB. Then the mean of groupA is computed by the intercept \\(\\mu_A = \\beta_0\\) and the mean of groupB is computed as the sum of the intercept and the slope \\(\\mu_B = \\beta_0 + \\beta_1\\). Since \\(\\mu_A = 1\\) and \\(\\mu_B = 10\\), we can guess that \\(\\beta_0 = 1\\) and \\(\\beta_1 = 10 - 1 = 9\\). "],["Chap-04-03-predictors-multi-levels.html", "14.2 Single multi-level predictor", " 14.2 Single multi-level predictor The 0/1 coding scheme above works fine for a single categorical predictor value with two levels. It is possible to use linear regression also for categorical predictors with more than two levels. Only, in that case, there are quite a few more reasonable contrast coding schemes, i.e., ways to choose numbers to encode the levels of the predictor. The mental chronometry data has a single categorical predictor, called block, with three levels, called “reaction”, “goNoGo” and “discrimination”. We are interested in regressing reaction times, stored in variable RT, against block. Our main question of interest is whether these inequalities are supported by the data: \\[ \\text{RT in &#39;reaction&#39;} &lt; \\text{RT in &#39;goNoGo&#39;} &lt; \\text{RT in &#39;discrimination&#39;} \\] So we are interested in the \\(\\delta\\)s, so to speak, between ‘reaction’ and ‘goNoGo’ and between ‘discrimination’ and ‘goNoGo’. Let’s consider only the data relevant for our current purposes: # select the relevant columns data_MC_excerpt &lt;- aida::data_MC_cleaned %&gt;% select(RT, block) # show the first couple of lines data_MC_excerpt %&gt;% head(5) ## # A tibble: 5 x 2 ## RT block ## &lt;dbl&gt; &lt;chr&gt; ## 1 311 reaction ## 2 269 reaction ## 3 317 reaction ## 4 325 reaction ## 5 240 reaction Here are the means of the reaction times for different block levels: data_MC_excerpt %&gt;% group_by(block) %&gt;% summarize(mean_RT = mean(RT)) ## # A tibble: 3 x 2 ## block mean_RT ## &lt;chr&gt; &lt;dbl&gt; ## 1 discrimination 488. ## 2 goNoGo 427. ## 3 reaction 300. And here is a plot of the distribution of measurements in each block: To fit this model with brms, we need a simple function call with the formula RT ~ block that precisely describes what we are interested in, namely explaining reaction times as a function of the experimental condition: fit_brms_mc &lt;- brm( formula = RT ~ block, data = data_MC_excerpt ) To inspect the posterior fits of this model, we can extract the relevant summary statistics as before: summary(fit_brms_mc)$fixed[,c(&quot;l-95% CI&quot;, &quot;Estimate&quot;, &quot;u-95% CI&quot;)] ## l-95% CI Estimate u-95% CI ## Intercept 482.17203 487.59013 493.29124 ## blockgoNoGo -70.41559 -60.32833 -50.54859 ## blockreaction -195.91785 -187.70701 -179.57204 Notice that there is an intercept term, as before. This corresponds to the mean reaction time of the reference level, which is again set based on alphanumeric ordering, so corresponding to “discrimination”. There are two slope coefficients, one for the difference between the reference level and “goNoGo” and another for the difference between the reference level and the “reaction” condition. These intercepts are estimated to be credibly negative, suggesting that the “discrimination” condition indeed had the highest mean reaction times. This answers one half of the comparisons we are interested in: \\[ \\text{RT in &#39;reaction&#39;} &lt; \\text{RT in &#39;goNoGo&#39;} &lt; \\text{RT in &#39;discrimination&#39;} \\] Unfortunately, it is not directly possible to read off information about the second comparison we care about, namely the comparison between “reaction” and “goNoGo”. And here is where we see the point of contrast coding pop up for the first time. We would like to encode predictor levels ideally in such a way that we can read off (test) the hypotheses we care about directly. In other words, if possible, we would like to have parameters in our model in the form of slope coefficients, which directly encode the \\(\\delta\\)s, so to speak, that we want to test.64 In the case at hand, all we need to do is change the reference level. If the reference level is the “middle category” (as per our ordered hypothesis), the two slopes will express the contrasts we care about. To change the reference level, we only need to make block a factor and order its levels manually, like so: data_MC_excerpt &lt;- data_MC_excerpt %&gt;% mutate(block_reordered = factor(block, levels = c(&quot;goNoGo&quot;, &quot;reaction&quot;, &quot;discrimination&quot;))) We then run another Bayesian regression model, regressing RT against block_reordered. fit_brms_mc_reordered &lt;- brm( formula = RT ~ block_reordered, data = data_MC_excerpt ) And inspect the summary of the posterior samples for the relevant coefficients: summary(fit_brms_mc_reordered)$fixed[,c(&quot;l-95% CI&quot;, &quot;Estimate&quot;, &quot;u-95% CI&quot;)] ## l-95% CI Estimate u-95% CI ## Intercept 419.14817 427.22688 435.1645 ## block_reorderedreaction -136.64300 -127.40843 -117.8941 ## block_reordereddiscrimination 50.54296 60.46776 69.9743 Now the “Intercept” corresponds to the new reference level “goNoGo”. And the two slope coefficients give the differences to the other two levels. Which numeric encoding leads to this result? In formulaic terms, we have three coefficients \\(\\beta_0, \\dots, \\beta_2\\). The predicted mean value for observation \\(i\\) is \\(\\xi_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2}\\). We assign numeric value \\(1\\) for predictor \\(x_1\\) when the observation is from the “reaction” block. We assign numeric value \\(1\\) for predictor \\(x_2\\) when the observation is from the “discrimination” block. Schematically, what we now have is: ## # A tibble: 3 x 4 ## block x_0 x_1 x_2 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 goNoGo 1 0 0 ## 2 reaction 1 1 0 ## 3 discrimination 1 0 1 As we may have expected, the 95% inter-quantile range for both slope coefficients (which, given the amount of data we have, is almost surely almost identical to the 95% HDI) does not include 0 by a very wide margin. We could therefore conclude that, based on a Bayesian approach to hypothesis testing in terms of posterior estimation, the reaction times of conditions are credibly different. The coding of levels in terms of a reference level is called treatment coding, or also dummy coding. The video included at the beginning of this chapter discusses further contrast coding schemes, and also shows in more detail how a coding scheme translates into “directly testable” hypotheses. Exercise 14.2 Suppose that there are three groups, A, B, and C as levels of your predictor. You want the regression intercept to be the mean of group A. You want the first slope to be the difference between the means of group B and group A. And, you want the second slope to be the difference between the mean of C and B. How do you numerically encode these contrasts in terms of numeric predictor values? Solution Schematically, like this: ## # A tibble: 3 x 4 ## group x_0 x_1 x_2 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 1 0 0 ## 2 B 1 1 0 ## 3 C 1 1 1 As group A is a reference category, \\(\\beta_0\\) expresses the mean reaction time of group A. The mean reaction time of group B is \\(\\beta_0 + \\beta_1\\), so we need \\((x_{i1} =1 , x_{i2} = 0)\\) for any \\(i\\) which is of group B. In the text above, the mean reaction time of group C is given by \\(\\beta_0 + \\beta_2\\). However, the value we need now is given by \\(\\beta_0 + \\beta_1 + \\beta_2\\), so \\((x_{i1} =1 , x_{i2} = 1)\\). To be precise, it is possible to also test derived random variables from the posterior samples. So, it is not necessary to encode the contrasts of interests directly. But, most often, in Bayesian analyses it will make sense to put priors on exactly these \\(\\delta\\)s (e.g., skeptical priors biased against a hypothesis to be tested) and for that purpose, it is (almost) practically necessary to have the relevant contrasts expressed as slope coefficients in the model.↩ "],["Chap-04-03-predictors-multiple-predictors.html", "14.3 Multiple predictors", " 14.3 Multiple predictors Factorial designs, which have more than one categorical predictor variable, are common in experimental psychology. Any contrast coding scheme usable for encoding a single categorical predictor can, in principle, also be used when there are multiple categorical predictors. But having multiple categorical predictors also requires some additional considerations relating to how (the model assumes that) different predictors might or might not interact with one another. Here is an informal example. Suppose that we have metric measurements of how tasty a snack is perceived to be. There are two categorical factors that we want to use to predict the average tastiness of a snack. The first predictor is mayo and we encode it numerically as: 0 if the dish does not contain mayonnaise and 1 if it does. The second predictor is chocolate and we encode it similarly as: 0 if the dish does not contain chocolate and 1 if it does. Suppose we estimate these two slope coefficients (one for mayo and one for chocolate) for our imaginary data set and find that both are credibly positive. That means that there is reason to believe that, all else equal, when we find mayo in a snack we may expect it to be rated as more tasty, and, all else equal, when we find chocolate in a snack we may also expect it to be rated as more tasty.65 But what about a dish with both mayo and chocolate? Maybe we can agree to assume for the sake of argument that, on average, snacks containing both mayo and chocolate are not rated as tasty at all. Or, at least, we might want to include in our model the possibility that the combination of mayo and chocolate has a different effect than the sum of the contributions of (i) mayo on its own and that of (ii) chocolate of its own. That is why, when we have multiple categorical predictors, we also often want to include yet another type of slope coefficient, so-called interaction terms, that capture how the combination of different factor levels from different categorical predictors, well, interact. If you like a more precise characterization at this moment already (although an example below will make things hopefully much clearer), we could say that, in the context of a linear regression model, an interaction between levels of several predictors is a (potential) deviation from the sum of all of the additive effects of the individual predictor levels in isolation. To make this more precise, let us consider the example of the politeness data.66 The to-be-predicted data are measurements of voice pitch in a \\(2 \\times 2\\) factorial design, with factors gender and context. The factor gender has (sadly only) two levels: “male” and “female”. The factor context has two levels, namely “informal” for informal speech situations and “polite” for polite speech situations. Let us first load the data &amp; inspect it. politeness_data &lt;- aida::data_polite politeness_data %&gt;% head(5) ## # A tibble: 5 x 5 ## subject gender sentence context pitch ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 F1 F S1 pol 213. ## 2 F1 F S1 inf 204. ## 3 F1 F S2 pol 285. ## 4 F1 F S2 inf 260. ## 5 F1 F S3 pol 204. The research hypotheses of interest are: H1: (gender): the voice pitch of male speakers is lower than that of female speakers; H2: (context): the voice pitch of speech in polite contexts is lower than in informal contexts; and H3: (interaction): the effect of context (= the difference of voice pitch between polite and informal context; as mentioned in the second hypothesis) is larger for female speakers than for male speakers. The first two hypotheses are statements related to what is often called main effects, namely differences between levels of a single categorical predictor, averaging over all levels of any other categorical predictor. Consequently, we could also rephrase this as saying: “We expect a main effect of gender (H1) and a main effect of context (H2).” only thereby omitting the direction of the difference between respective factor levels. The third hypothesis is a more convoluted formulation about the interaction of the two categorical predictors. To understand hypotheses about main effects and interactions better, at least in the easiest case of a \\(2 \\times 2\\) factorial design, it is useful to consider stylized diagrams, like in Figure 14.1, which show how the data would look like if main effects or various interaction relations are present or absent. Concretely, the panels in Figure 14.1 depict the following types of situations: A: no main effect (neither gender nor context) and no interaction; B: main effect of gender, no main effect of context and no interaction; C: main effect of context, no main effect of gender and no interaction; D: main effects of both context and gender but no interaction; E: main effects of both context and gender with an interaction amplifying the strength of the main effect of context for the female category; and F: as in E but with a different kind of interaction (effect reversal). Notice that the type of situation shown in panel E is the expectation derivable from the conjunction of the hypotheses H1-H3 formulated above: we predict/expect main effects for both predictors (in the direction shown in panel E) and we expect the effect of context to be stronger for female speakers than for male speakers. Figure 14.1: Schematic representation of the presence/absence of main effects and (different kinds of) interactions. The situations shown are as follows: A: no main effect (neither gender nor context) and no interaction; B: main effect of gender only w/ no interaction; C: main effect of context only w/ no interaction; D: main effects of both context and gender but no interaction; E: main effects of both context and gender with an interaction amplifying the strength of the main effect of context for the female category (this is the situation envisaged by hypotheses 1-3 from the main text); F: as in E but with a different kind of interaction (effect reversal). Let us now take a look at the actual data: Judging from visual inspection, we might say that the empirical data most resembles panel D in Figure 14.1. It looks as if there might be a rather strong effect of gender. The measurements in the female category seem (on average) higher than in the male category. Also, there might well be a main effect of context. Probably the voice pitch in informal contexts is higher than in polite contexts, but we cannot be as sure as for a potential main effect of gender. It is very difficult to discern whether the data supports the hypothesized interaction. In the following, we are therefore going to test these hypotheses (more or less directly) with two different kinds of coding schemes: treatment coding and sum coding. 14.3.1 Treatment coding In a \\(2 \\times 2\\) factorial design there are essentially four pairs of factor levels (so-called design cells). For the politeness data, these are female speakers in informal contexts, female speakers in polite contexts, male speakers in informal contexts and male speakers in polite contexts. Different coding schemes exist by means of which different comparisons of means of design cells (or single factors) can be probed. A simple coding scheme for differences in our \\(2 \\times 2\\) design is shown in Figure 14.2. This is a straightforward extension of treatment coding for the single predictors introduced previously which additionally includes a potential interaction. Figure 14.2: Regression coefficients for a factorial design (using so-called ‘treatment coding’). The coding scheme in Figure 14.2 considers the cell “female+informal” as the reference level and therefore models its mean as intercept \\(\\beta_0\\). We then have a slope term \\(\\beta_{\\text{pol}}\\) which encodes the difference between female pitch in informal and female pitch in polite contexts. Analogous reasoning holds for \\(\\beta_{\\text{male}}\\). Finally, we also include a so-called interaction term, denoted as \\(\\beta_{\\text{pol&amp;male}}\\) in Figure 14.2. The interaction term quantifies how much a change away from the reference level in both variables differs from the sum of unilateral changes. Another way of describing what the interaction term \\(\\beta_{\\text{pol&amp;male}}\\) captures is that it represents the difference which the manipulation of context has on female and male speakers. To see this, notice that the “extent of the effect of context”, i.e., the decrease in pitch between informal and polite contexts, for female speakers is: \\[ \\text{eff_context_on_female} = \\beta_0 - (\\beta_0 + \\beta_\\text{pol}) = - \\beta_\\text{pol} \\] The bigger this number, the larger, so to speak, “the effect of context on female speakers”. The effect of context on male speaker’s pitch is correspondingly: \\[ \\text{eff_context_on_male} = (\\beta_0 + \\beta_\\text{male} + \\beta_{\\text{pol}} + \\beta_\\text{pol&amp;male}) - (\\beta_\\text{pol} + \\beta_\\text{male}) = - \\beta_{\\text{pol}} - \\beta_\\text{pol&amp;male} \\] Therefore, the difference -comparing female and male speakers- of the effect of context is: \\[\\text{eff_context_on_female} - \\text{eff_context_on_male} = \\beta_\\text{pol&amp;male}\\] How do these model coefficients help address the research hypotheses we formulated above? - The interaction term \\(\\beta_\\text{pol&amp;male}\\) directly relates to hypothesis 3 above, namely that the context-effect is larger for female speakers than for male speakers. In other words, we can express H3 as the parameter-based hypothesis that: \\[\\textbf{H3: (interaction)} \\ \\ \\ \\ \\beta_\\text{pol&amp;male} &gt; 0\\] The other two hypotheses are not directly expressible as a statement involving a single coefficient. But they can be expressed as a complex hypothesis involving more than one coefficient of the model. Hypothesis H1 states that the pitch of male speakers (averaging over context types) is lower than that of female speakers (averaging over context types). This translates directly into the following statement (where the LHS/RHS is the average pitch of male/female speakers): \\[ \\frac{1}{2} (\\beta_0 + \\beta_\\text{male} + \\beta_0 + \\beta_\\text{male} + \\beta_\\text{pol} + \\beta_\\text{pol&amp;male}) &lt; \\frac{1}{2} (\\beta_0 + \\beta_0 + \\beta_\\text{pol}) \\] This can be simplified to: \\[ \\textbf{H1: (gender)} \\ \\ \\ \\ \\beta_\\text{male} + \\frac{1}{2} \\beta_\\text{pol&amp;male} &lt; 0 \\] Similar reasoning leads to the following formulation of hypothesis H2 concerning a main effect of factor context: \\[ \\textbf{H2: (context)} \\ \\ \\ \\ \\beta_\\text{pol} + \\frac{1}{2} \\beta_\\text{pol&amp;male} &lt; 0 \\] To test these hypotheses, we can fit a regression model with this coding scheme using the formula pitch ~ gender * context. Importantly the star * between explanatory variables gender and context indicates that we also want to include the interaction term.67 fit_brms_politeness &lt;- brm( # model &#39;pitch&#39; as a function of &#39;gender&#39; and &#39;context&#39;, # also including the interaction between `gender` and `context` formula = pitch ~ gender * context, data = politeness_data ) The summary statistics below lists Bayesian summary statistics for the (marginal) posteriors of the model parameters indicated in Figure 14.2. summary(fit_brms_politeness)$fixed[,c(&quot;l-95% CI&quot;, &quot;Estimate&quot;, &quot;u-95% CI&quot;)] ## l-95% CI Estimate u-95% CI ## Intercept 245.13899 260.77238 276.332456 ## genderM -138.91421 -116.36293 -94.467468 ## contextpol -49.04407 -27.29945 -5.457806 ## genderM:contextpol -15.33484 15.85449 48.252632 The function brms::hypothesis can test the relevant hypotheses based on the brms_fit object stored in fit_brms_politeness. Starting with H1, we find very strong support for a main effect of gender: brms::hypothesis(fit_brms_politeness, &quot;genderM + 0.5 * genderM:contextpol &lt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (genderM+0.5*gend... &lt; 0 -108.44 8.05 -121.51 -95.21 Inf ## Post.Prob Star ## 1 1 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. As for H2, we also find very strong evidence in support of a belief in a main effect of context: brms::hypothesis(fit_brms_politeness, &quot;contextpol + 0.5 * genderM:contextpol &lt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (contextpol+0.5*g... &lt; 0 -19.37 7.97 -32.4 -6.23 128.03 ## Post.Prob Star ## 1 0.99 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. In contrast, based on the data and the model, there is at best very mildly suggestive evidence in favor of the third hypothesis according to which female speakers are more susceptible to pitch differences induced by different context types. brms::hypothesis(fit_brms_politeness, &quot;genderM:contextpol &gt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (genderM:contextpol) &gt; 0 15.85 15.99 -10.08 42.08 5.17 ## Post.Prob Star ## 1 0.84 ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. We can interpret this as saying that, given model and data, it is plausible to think that male speakers had lower voice pitch than female speakers (averaging over both context types). We may also conclude that given model and data, it is plausible to think that voice pitch was lower in polite contexts than informal contexts (averaged over both levels of factor gender). The posterior of the interaction term genderM:contextpol does not give any indication to think that 0, or any value near it, is not plausible. This can be interpreted as saying that there is no indication, given model and data, to believe that male speakers’ voice pitch changes differently from informal to polite contexts than female speakers’ voice pitch does. Exercise 14.3 Based on the estimate given above, what is the mean estimate for male speakers speaking in informal contexts? Solution The mean estimate for male speakers speaking in informal contexts is given by \\(\\beta_0 +\\beta_{\\text{male}} = 261.02993 -116.53009 \\approx 144\\). 14.3.2 Sum coding Treatment coding allowed us to directly test H3 in terms of a single coefficient, but testing of hypotheses about so-called “main effects” (H1 and H2) cannot be directly read off a single coefficient’s posterior. As hypotheses about main effects are natural and common in experimental psychology, another coding scheme is very popular, namely sum coding.68 Figure 14.3 shows how the mean of each design cell in our \\(2\\times2\\) design is expressed in terms of four regression coefficients. Parameter \\(\\beta_0\\) is called “intercept” as usual, but encodes the so-called grand mean, i.e. the mean value of all data observations. To see this, just sum all of the four terms in Figure 14.3 and divide by 4: the result is \\(\\beta_0\\). The parameters \\(\\beta_\\text{male}\\) and \\(\\beta_\\text{pol}\\) are slope coefficients, but they now encode the deviance from the grand mean. For example, \\(\\beta_\\text{male}\\) encodes the difference between (i) the average pitch of all measurements taken from male participants and (ii) the grand mean. Finally, the interaction coefficient \\(\\beta_\\text{pol&amp;male}\\) serves the same function as before in treatment coding, namely to make room for a difference in the strength of one main effect, e.g., of context, on the levels of the other predictor, e.g., gender. Figure 14.3: Regression coefficients for a factorial design (using so-called ‘sum coding’). It is then clear that under treatment coding, the hypotheses H1 and H2, which target main effects, can be straightforwardly stated as inequalities concerning singular coefficients, namely: \\[ \\textbf{H1: (gender)} \\ \\ \\ \\ \\beta_\\text{male} &lt; 0 \\] \\[ \\textbf{H2: (context)} \\ \\ \\ \\ \\beta_\\text{pol} &lt; 0 \\] What is less obvious is that the interaction term, as defined under sum coding, still directly expresses the interaction hypothesis H3. To see this, calculate as before: \\[ \\begin{align*} &amp; \\text{eff_context_on_female} \\\\ &amp; = (\\beta_0 - \\beta_\\text{male} - \\beta_\\text{pol} + \\beta_\\text{pol&amp;male}) - (\\beta_0 - \\beta_\\text{male} + \\beta_\\text{pol} - \\beta_\\text{pol&amp;male}) \\\\ &amp; = - 2 \\beta_\\text{pol} + 2 \\beta_\\text{pol&amp;male} \\end{align*} \\] The effect of context on male speaker’s pitch is: \\[ \\begin{align*} &amp; \\text{eff_context_on_male} \\\\ &amp; = (\\beta_0 + \\beta_\\text{male} - \\beta_\\text{pol} - \\beta_\\text{pol&amp;male}) - (\\beta_0 + \\beta_\\text{male} + \\beta_\\text{pol} + \\beta_\\text{pol&amp;male}) \\\\ &amp; = - 2 \\beta_\\text{pol} - 2 \\beta_\\text{pol&amp;male} \\end{align*} \\] Consequently, the difference -comparing female and male speakers- of the effect of context under sum coding is expressed as: \\[\\text{eff_context_on_female} - \\text{eff_context_on_male} = 4 \\beta_\\text{pol&amp;male}\\] To implement sum coding for use in brms, R provides the functions contrasts and contr.sum. Here is an example. # make predictors &#39;factors&#39; b/c that&#39;s required for contrast coding # also: change order to match coding assumed in the main text data_polite &lt;- aida::data_polite %&gt;% mutate( gender = factor(gender, levels = c(&#39;M&#39;, &#39;F&#39;)), context = factor(context, levels = c(&#39;pol&#39;, &#39;inf&#39;)) ) # apply &#39;sum&#39; contrasts contrasts(data_polite$context) &lt;- contr.sum(2) contrasts(data_polite$gender) &lt;- contr.sum(2) # add intelligible name to the new contrast coding colnames(contrasts(data_polite$context)) &lt;- &quot;:polite&quot; colnames(contrasts(data_polite$gender)) &lt;- &quot;:male&quot; # run brms as usual fit_brms_politeness_sum &lt;- brm( pitch ~ gender * context, data_polite ) We can inspect the coefficients as usual: summary(fit_brms_politeness_sum)$fixed[, c(&quot;l-95% CI&quot;, &quot;Estimate&quot; ,&quot;u-95% CI&quot;)] ## l-95% CI Estimate u-95% CI ## Intercept 185.214314 192.847146 200.795844 ## gender:male -62.442427 -54.225500 -46.494742 ## context:polite -17.745009 -9.697432 -1.755093 ## gender:male:context:polite -3.614788 4.031338 12.003508 The summary statistics for the posterior already directly address all three hypotheses in question, but we should compare our previous results to the full results of using brms::hypothesis also for the sum-coded analysis. # testing H1 brms::hypothesis(fit_brms_politeness_sum, &quot;gender:male &lt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob ## 1 (gender:male) &lt; 0 -54.23 3.99 -60.87 -47.76 Inf 1 ## Star ## 1 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. # testing H2 brms::hypothesis(fit_brms_politeness_sum, &quot;context:polite &lt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (context:polite) &lt; 0 -9.7 4.08 -16.43 -3.06 107.11 ## Post.Prob Star ## 1 0.99 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. # testing H3 brms::hypothesis(fit_brms_politeness_sum, &quot;gender:male:context:polite &gt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (gender:male:cont... &gt; 0 4.03 4 -2.58 10.67 5.53 ## Post.Prob Star ## 1 0.85 ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. Since we didn’t use any priors, which could have altered results slightly between treatment- and sum-coded regression modeling, we find (modulo sampling imprecision) the same “evidence ratios” and posterior probabilities of these hypotheses. The overall conclusions are therefore the exact same: evidence for both main effects; no evidence for interaction. Notice the deliberate avoidance of causal terminology. We should not say that there is reason to believe that adding mayo to any dish will make it taste better, just that, epistemically put, observing it in a dish should alter our expectations.↩ Part of the following content is a distilled version of a short tutorial on Bayesian regression modeling for factorial designs (Franke and Roettger 2019), which can be downloaded here.↩ If the interaction term should be excluded, the formula pitch ~ gender + context can be used, so with + instead of *.↩ The comparisons tested by sum coding are the same contrasts also addressed by analysis of variance (ANOVA), a special case of regression modeling which was very popular and is still the standard method of statistical analysis for factorial designs in some areas of experimental psychology, despite good arguments in favor of (hierarchical) generalized regression analyses (Jaeger 2008).↩ "],["Chap-04-04-GLM.html", "15 Generalized linear model", " 15 Generalized linear model So far our regression models all had a metric dependent variable. In this chapter we are going to look at the basic architecture of generalized linear models (GLM), a class of regression models that allow for different types of dependent variables, like binary, nominal, ordinal or count data. The focus of this chapter is on the main idea of the generalization, and to showcase the GLM family with one concrete example, namely logistic regression, which is used for a binary dependent variable. The learning goals for this chapter are: understand how to generalize linear regression modeling to other kinds of dependent variables be able to run and interpret a logistic regression model with brms "],["generalizing-the-linear-regression-model.html", "15.1 Generalizing the linear regression model", " 15.1 Generalizing the linear regression model The general architecture of a (Bayesian) generalized regression model is shown in Figure 15.1. Based on a predictor matrix \\(X\\) and concrete values for the regression coefficients \\(\\beta\\), the heart of linear regression modeling is the linear predictor term: \\[ \\xi = X \\beta \\] The linear predictor is transformed in some way or other by what is called a link function \\(LF\\) to yield the predicted central tendency: \\[ \\eta = LF(\\xi, \\theta_{LF}) \\] The link function (also sometimes specified as an inverse link function) may additionally have free model parameters \\(\\theta_{LF}\\). The predicted central tendency \\(\\eta\\) then serves an argument in a likelihood function \\(LH\\), which needs to be appropriate for the data to be explained and which, too, may have additional free model parameters \\(\\theta_{LH}\\): \\[ y \\sim LH(\\eta, \\theta_{LH}) \\] Figure 15.1: Basic architecture of generalized linear regression models. The standard linear regression, which was covered in the previous chapters, is subsumed under this GLM scheme. To see this, consider the following representation of a (Bayesian) linear regression model: \\[ \\begin{align*} \\beta, \\sigma &amp; \\sim \\text{some prior} \\\\ \\xi &amp; = X \\beta &amp;&amp; \\text{[linear predictor]} \\\\ \\eta &amp; = \\xi &amp;&amp; \\text{[predictor of central tendency]} \\\\ y &amp; \\sim \\text{Normal}(\\eta, \\sigma) &amp;&amp; \\text{[likelihood]} \\end{align*} \\] So, the standard linear regression model is the special case of the GLM scheme of Figure 15.1 in which (i) the (inverse) link function is the identity map, so that the linear predictor is the predicted central tendency \\(\\xi = \\eta\\) and (ii) the likelihood function is the normal distribution (with additional parameter \\(\\theta_{LF} = \\sigma\\)). The need to have other likelihood functions arises when the data \\(y\\) to be predicted is not plausibly generated by a normal distribution. Take for instance the binary outcome of a coin flip, where a Bernoulli distribution is the natural choice for the probability of a single outcome / data observation. The Bernoulli distribution has a single parameter \\(\\theta_c\\) (the bias of the coin), and can be written as follows, where it is assumed that \\(y\\) takes values 0 or 1, as usual: \\[ y \\sim \\text{Bernoulli}(\\theta_c) = {\\theta_c}^y (1- \\theta_c)^{1-y} \\] So, if we want a Bernoulli likelihood function (which makes perfect sense of binary outcomes) our prediction of central tendency \\(\\eta\\) should be a latent coin bias \\(\\theta_c\\), rather than the mean of a normal distribution. Since the coin bias is bounded \\(\\theta_c \\in [0;1]\\), but our linear predictor \\(\\xi \\in \\mathbb{R}\\) is not, a link function is needed which maps (in a suitable way) a real-valued linear predictor \\(\\xi\\) onto a bounded predictor of central tendency \\(\\eta = \\theta_c\\). Whence the need for a link function: we just need to make sure that the linear predictor (a nice, well-behaved construct) maps onto appropriate values that the likelihood function (whose nature is dictated by the (assumed) nature of the data) requires. In the case of binary data, a good choice of a link function is the logistic function. The next section looks at the resulting logistic regression model in more detail. Other combinations of (inverse) link functions and likelihood functions give rise to other kinds of commonly used instances of generalized linear models. Below is a concise list of some of the common instances: type of \\(y\\) (inverse) link function likelihood function metric \\(\\eta = \\xi\\) \\(y \\sim \\text{Normal}(\\mu = \\eta, \\sigma)\\) binary \\(\\eta = \\text{logistic}(\\xi) = (1 + \\exp(-\\xi))^{-1}\\) \\(y \\sim \\text{Bernoulli}(\\eta)\\) nominal \\(\\eta_k = \\text{soft-max}(\\xi_k, \\lambda) \\propto \\exp(\\lambda \\xi_k)\\) \\(y \\sim \\text{Multinomial}({\\eta})\\) ordinal \\(\\eta_k = \\text{threshold-Phi}(\\xi_k, \\sigma, {\\delta})\\) \\(y \\sim \\text{Multinomial}({\\eta})\\) count \\(\\eta = \\exp(\\xi)\\) \\(y \\sim \\text{Poisson}(\\eta)\\) "],["logistic-regression.html", "15.2 Logistic regression", " 15.2 Logistic regression Suppose \\(y \\in \\{0,1\\}^n\\) is an \\(n\\)-placed vector of binary outcomes, and \\(X\\) a predictor matrix for a linear regression model. A Bayesian logistic regression model has the following form: \\[ \\begin{align*} \\beta, \\sigma &amp; \\sim \\text{some prior} \\\\ \\xi &amp; = X \\beta &amp;&amp; \\text{[linear predictor]} \\\\ \\eta_i &amp; = \\text{logistic}(\\xi_i) &amp;&amp; \\text{[predictor of central tendency]} \\\\ y_i &amp; \\sim \\text{Bernoulli}(\\eta_i) &amp;&amp; \\text{[likelihood]} \\\\ \\end{align*} \\] The logistic function used as a link function is a function in \\(\\mathbb{R} \\rightarrow [0;1]\\), i.e., from the reals to the unit interval. It is defined as: \\[\\text{logistic}(\\xi_i) = (1 + \\exp(-\\xi_i))^{-1}\\] It’s shape (a sigmoid, or S-shaped curve) is this: We use the Simon task data as an example application. So far we only tested the first of two hypotheses about the Simon task data, namely the hypothesis relating to reaction times. The second hypothesis which arose in the context of the Simon task refers to the accuracy of answers, i.e., the proportion of “correct” choices: \\[ \\text{Accuracy}_{\\text{correct},\\ \\text{congruent}} &gt; \\text{Accuracy}_{\\text{correct},\\ \\text{incongruent}} \\] Notice that correctness is a binary categorical variable. Therefore, we use logistic regression to test this hypothesis. Here is how to set up a logistic regression model with brms. The only thing that is new here is that we specify explicitly the likelihood function and the (inverse!) link function.69 This is done using the syntax family = bernoulli(link = &quot;logit&quot;). For later hypothesis testing we also use proper priors and take samples from the prior as well. fit_brms_ST_Acc = brm( # regress &#39;correctness&#39; against &#39;condition&#39; formula = correctness ~ condition, # specify link and likeihood function family = bernoulli(link = &quot;logit&quot;), # which data to use data = aida::data_ST %&gt;% # &#39;reorder&#39; answer categories (making &#39;correct&#39; the target to be explained) mutate(correctness = correctness == &#39;correct&#39;), # weakly informative priors (slightly conservative) # for `class = &#39;b&#39;` (i.e., all slopes) prior = prior(student_t(1, 0, 2), class = &#39;b&#39;), # also collect samples from the prior (for point-valued testing) sample_prior = &#39;yes&#39;, # take more than the usual samples (for numerical stability of testing) iter = 20000 ) The Bayesian summary statistics of the posterior samples of values for regression coefficients are: summary(fit_brms_ST_Acc)$fixed[,c(&quot;l-95% CI&quot;, &quot;Estimate&quot;, &quot;u-95% CI&quot;)] ## l-95% CI Estimate u-95% CI ## Intercept 3.1067020 3.2042928 3.3059530 ## conditionincongruent -0.8496013 -0.7260651 -0.6050912 What do these specific numerical estimates for coefficients mean? The mean estimate for the linear predictor \\(\\xi_\\text{cong}\\) for the “congruent” condition is roughly 3.204. The mean estimate for the linear predictor \\(\\xi_\\text{inc}\\) for the “incongruent” condition is roughly 3.204 + -0.726, so roughly 2.478. The central predictors corresponding to these linear predictors are: \\[ \\begin{align*} \\eta_\\text{cong} &amp; = \\text{logistic}(3.204) \\approx 0.961 \\\\ \\eta_\\text{incon} &amp; = \\text{logistic}(2.478) \\approx 0.923 \\end{align*} \\] These central estimates for the latent proportion of “correct” answers in each condition tightly match the empirically observed proportion of “correct” answers in the data: proportions_correct_ST &lt;- data_ST %&gt;% group_by(condition, correctness) %&gt;% dplyr::count() %&gt;% group_by(condition) %&gt;% mutate(proportion_correct = (n / sum(n)) %&gt;% round(3)) %&gt;% filter( correctness == &quot;correct&quot;) %&gt;% select(-n, -correctness) proportions_correct_ST ## # A tibble: 2 x 2 ## # Groups: condition [2] ## condition proportion_correct ## &lt;chr&gt; &lt;dbl&gt; ## 1 congruent 0.961 ## 2 incongruent 0.923 Testing hypothesis for a logistic regression model is the exact same as for a standard regression model. And so, we find very strong support for hypothesis 2, suggesting that (given model and data), there is reason to believe that the accuracy in incongruent trials is lower than in congruent trials. brms::hypothesis(fit_brms_ST_Acc, &quot;conditionincongruent &lt; 0&quot;) ## Hypothesis Tests for class b: ## Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (conditionincongr... &lt; 0 -0.73 0.06 -0.83 -0.62 Inf ## Post.Prob Star ## 1 1 * ## --- ## &#39;CI&#39;: 90%-CI for one-sided and 95%-CI for two-sided hypotheses. ## &#39;*&#39;: For one-sided hypotheses, the posterior probability exceeds 95%; ## for two-sided hypotheses, the value tested against lies outside the 95%-CI. ## Posterior probabilities of point hypotheses assume equal prior probabilities. Notice that the logit function is the inverse of the logistic function.↩ "],["ch-05-01-frequentist-hypothesis-testing.html", "16 Null Hypothesis Significance Testing", " 16 Null Hypothesis Significance Testing In this chapter, we are going to look at basic notions and principles of frequentist statistics. Section 16.1 sets the scene by describing what frequentist statistics is and how it differs from Bayesian approaches. The key notion of a \\(p\\)-value is discussed in Section 16.2. Section 16.3 takes an excursion to introduce the Central Limit Theorem. Section 16.4 shortly surveys the main ideas of the Neyman-Pearson approach to statistical inference, including notions like \\(\\beta\\)-error and statistical power. Section 16.5 covers confidence intervals. Finally, Section 16.6 introduces some of the most commonly used frequentist tests from a model-centric perspective. The learning goals for this chapter are: become familiar with frequentist hypothesis testing see the differences between the Bayesian and the frequentist approaches understand key statistical notions such as: sampling distribution \\(p\\)-value confidence interval statistical significance understand and become able to apply and interpret basic frequentist tests: binomial test, \\(t\\)-tests, ANOVA, linear regression, \\(\\chi^2\\)-test, likelihood-ratio test "],["ch-05-01-frequentist-testing-overview.html", "16.1 Frequentist statistics: why &amp; how", " 16.1 Frequentist statistics: why &amp; how Bayesian ideas have first been expressed in the 17th century (by Thomas Bayes) and have been given a solid mathematical treatment starting in the 18th century (by French mathematician Pierre-Simon Laplace). A rigorous philosophical underpinning of subjective probability has been given in the early 20th century (by authors like Frank Ramsey or Bruno de Finetti). Still, in the first part of the 20th century, the rise of statistics as a modern, ubiquitous tool for empirical knowledge gain in science took off in a distinctly non-Bayesian direction. Key figures in the early development of statistical ideas (such as Ronald Fisher, Egon Pearson and Jerzy Neyman), were rather opposed to Bayesian ideas. While the precise mechanisms of this historical development are very interesting (from the point of view of history and philosophy of science), suffice it to say here that at least the following two (interrelated) objections are very likely to have contributed a lot to how history unfolded: By requiring subjective priors, Bayesian statistical methods have an air of vagueness and non-rigidity. Bayesian inference is very demanding (mathematically and computationally).70 As an alternative to Bayesian approaches, the dominant method of statistical inference of the 20th century is frequentist statistics. As a matter of strong philosophical conviction, frequentist statistics makes do entirely without subjective probability: no priors on parameters, no priors on models, no researcher beliefs whatsoever. A crude (and certainly simplified) explanation of why frequentist approaches eschew subjective beliefs is this. Extreme frequentism denies that a probability distribution over a latent parameter like \\(\\theta\\) is meaningful. Whatever we choose, the choice cannot be justified or defended in a scientifically rigorous manner. The only statements about probabilities that are conceptually sound, according to a fundamentalist frequentist interpretation, are those that derive from intuitions about limiting frequencies when (hypothetically) performing a random process (like throwing a dice or drawing a ball from an urn) repeatedly. Bluntly put, there is no “(thought) experiment” which can be repeated so that its objective results, on average, align with whatever subjective prior beliefs the Bayesian analysis needs. Of course, the objections to the use of priors could be less fundamentalist. Researchers who have no metaphysical troubles with subjective priors in principle might reject the use of priors in data analysis because they feel that the necessity to specify priors is a burden or a spurious degree of freedom in empirical science. Thus, priors should be avoided to stay as objective, procedurally systematic, and streamlined as possible. So, after having seen Bayesian inference in action extensively, you may wonder: how -on earth- is inference and hypothesis testing even possible without (subjective) priors, even if assumed to be non-informative? - Frequentist statistics has devised very clever means of working around subjective probability. Frequentists do accept probabilities, of course. But only of the objective kind: in the form of a likelihood function which can be justified by appeal to repeated executions and limiting frequencies of events. In a (simplified) nutshell, you may think of frequentism as squeezing everything (inference, estimation, testing, model comparison) out of suitably constructed likelihood functions, which are constructed around point-valued assumptions about any remaining model parameters. Central to frequentist statistics is the notion of a \\(p\\)-value, which plays a central role in hypothesis testing. Let’s consider an example. The goal is to get a first idea of how frequentist methods can work without subjective probability. More detail will be presented in the following sections. Say, we are interested in the question of whether a given coin is fair, so: \\(\\theta_c = 0.5\\). This assumption \\(\\theta_{c} = 0.5\\) is our null hypothesis \\(H_{0}\\).71 We refuse to express beliefs about the likely value of \\(\\theta_c\\), both prior and posterior. But we are allowed to engage in hypothetical mind games. So, let’s assume for the sake of argument that the coin is fair. So, we assume the null hypothesis to be true for the sake of argument. That’s not a belief; it’s a thought experiment: nothing wrong with that. We build a frequentist model around this point-valued assumption, and call it a null-model. The null-model assumes that \\(\\theta_{c} = 0.5\\) but also uses the obvious likelihood function, \\(\\text{Binomial}(k, N, \\theta_c = 0.5)\\), stating how likely it would be to observe \\(k\\) heads in \\(N\\) tosses, for fixed \\(\\theta_c = 0.5\\). These likelihoods are not subjective, but grounded in limiting frequencies of events. Now, we also bring into the picture some actual data. Unsurprisingly: \\(k=7\\), \\(N=24\\). We can now construct a measure of how surprising this data observation would be on the purely instrumental assumption that the null-model is true. In more Bayesian words, we are interested in measuring the perplexity of an agent whose belief is captured by the null-model (so an agent who genuinely and inflexibly believes that the coin is fair), when that agent observes \\(k=7\\) and \\(N=24\\). If the agent’s perplexity is extremely high, i.e., if the null-model would not have predicted the data at hand to a high enough degree, we take this as evidence against the null-model. Since the main contestable assumption in the construction of the null-model is the null hypothesis itself, we treat this as evidence against the null hypothesis, and so are able to draw conclusions about a point-valued hypothesis of interest, crucially, without any recourse to subjective probability. The quantified notion of evidence against a null-model is the \\(p\\)-value, famously introduced by Ronald Fisher, which we will discuss in the next section 16.2. Historically, there have been different schools of thought in frequentist statistics, all of which relate in some way or other to a quantified notion of evidence against a null-model, but that differ substantially in other ways. The three main approaches, shown in Figure 16.1, are Fisher’s approach, the Neyman-Pearson approach and the hybrid approach, often referred to simply as NHST (= null hypothesis significance testing), which is the standard practice today. In simplified terms, the main difference is that Fisher’s approach is belief-oriented, while the Neyman-Pearson approach is action-oriented. Fisher’s approach calculates \\(p\\)-values as measures of evidence against a model, but does not necessarily prescribe what to do with this quantitative measure. The approach championed by Neyman-Pearson calculates a \\(p\\)-value and also fixes categorical decision rules relating to whether to accept or reject the null-model (or an alternative model, which is also explicitly featured in the Neyman-Pearson approach). The main rationale for the Neyman-Pearson approach is to to have a tight upper bound on certain types of statistical error. Section 16.4 deals with the Neyman-Pearson approach in more detail, where we also introduce the notion of statistical significance. While both Fisher’s approach and the Neyman-Pearson approach are intrinsically sound, in actual practice we often see a rather inconsistent mix of ideas and practices. That’s why Figure 16.1 characterizes the modern NHST approach more in terms of how we actually find it applied in practice (and, unfortunately, also taught) rather than how it should be. Figure 16.1: The three most prominent flavors of frequentist statistics. Notice also that Bayesian computation is a very recent field. The MCMC algorithm was only invented in the middle of the 20th century. Before close to the turn of the 21st century, researchers lacked wide-spread access to computers powerful enough to run algorithms that approximate Bayesian inference for complex models.↩ The term “null hypothesis” does not want to imply that the hypothesis is that some value of interest is equal to zero (although in practice that is frequently the case). The term rather implicates that this hypothesis is put out there in order to be possibly refuted, i.e., nullified, by the data (Gigerenzer 2004).↩ "],["ch-03-05-hypothesis-p-values.html", "16.2 Quantifying evidence against a null-model with p-values", " 16.2 Quantifying evidence against a null-model with p-values All prominent frequentist approaches to statistical hypothesis testing (see Section 16.1) agree that if empirical observations are sufficiently unlikely from the point of view of the null hypothesis \\(H_0\\), this should be treated (in some way or other) as evidence against the null hypothesis. A measure of how unlikely the data is in the light of \\(H_0\\) is the \\(p\\)-value.72 To preview the main definition and intuition (to be worked out in detail hereafter), let’s first consider a verbal and then a mathematical formulation. Definition \\(p\\)-value. The \\(p\\)-value associated with observed data \\(D_\\text{obs}\\) gives the probability, derived from the assumption that \\(H_0\\) is true, of observing an outcome for the chosen test statistic that is at least as extreme evidence against \\(H_0\\) as the observed outcome. Formally, the \\(p\\)-value of observed data \\(D_\\text{obs}\\) is: \\[ p\\left(D_{\\text{obs}}\\right) = P\\left(T^{|H_0} \\succeq^{H_{0,a}} t\\left(D_{\\text{obs}}\\right)\\right) % = P(\\mathcal{D}^{|H_0} \\in \\{D \\mid t(D) \\ge t(D_{\\text{obs}})\\}) \\] where \\(t \\colon \\mathcal{D} \\rightarrow \\mathbb{R}\\) is a test statistic which picks out a relevant summary statistic of each potential data observation, \\(T^{|H_0}\\) is the sampling distribution, namely the random variable derived from test statistic \\(t\\) and the assumption that \\(H_0\\) is true, and \\(\\succeq^{H_{0,a}}\\) is a linear order on the image of \\(t\\) such that \\(t(D_1) \\succeq^{H_{0,a}} t(D_2)\\) expresses that test value \\(t(D_1)\\) is at least as extreme evidence against \\(H_0\\) as test value \\(t(D_2)\\) when compared to an alternative hypothesis \\(H_a\\).73 A few aspects of this definition are particularly important (and subsequent text is dedicated to making these aspects more comprehensible): this is a frequentist approach in the sense that probabilities are entirely based on (hypothetical) repetitions of the assumed data-generating process, which assumes that \\(H_0\\) is true; the test statistic t plays a fundamental role and should be chosen such that: it must necessarily select exactly those aspects of the data that matter to our research question, it should optimally make it possible to derive a closed-form (approximation) of \\(T\\),74 and it would be desirable (but not necessary) to formulate \\(t\\) in such a way that the comparison relation \\(\\succeq^{H_{0,a}}\\) coincides with a simple comparison of numbers: \\(t(D_1) \\succeq^{H_{0,a}} t(D_2)\\) iff \\(t(D_1) \\ge t(D_2)\\); there is an assumed data-generating model buried inside notation \\(T^{|H_0}\\); and the notion of “more extreme evidence against \\(H_0\\)”, captured in comparison relation \\(\\succeq^{H_{0,a}}\\) depends on our epistemic purposes, i.e., what research question we are ultimately interested in.75 The remainder of this section will elaborate on all of these points. It is important to mention that especially the third aspect (that there is an implicit data-generating model “inside of” classical hypothesis tests) is not something that receives a lot of emphasis in traditional statistics textbooks. Many textbooks do not even mention the assumptions implicit in a given test. Here we will not only stress key assumptions behind a test but present all of the assumptions behind classical tests in a graphical model, similar to what we did for Bayesian models. This arguably makes all implicit assumptions maximally transparent in a concise and lucid representation. It will also help see parallels between Bayesian and frequentist approaches, thereby helping to see both as more of the same rather than as something completely different. In order to cash in this model-based approach, the following sections will therefore introduce new graphical tools to communicate the data-generating model implicit in the classical tests we cover. 16.2.1 Frequentist null-models We start with the Binomial Model because it is the simplest and perhaps most intuitive case. We work out what a \\(p\\)-value is for data for this model and introduce the new graphical language to communicate “frequentist models” in the following. We also introduce the notions of test statistic and sampling distribution based on a case that should be very intuitive, if not familiar. The Binomial Model was covered before from a Bayesian point of view, where we represented it using graphical notation like in Figure 16.2 (repeated from before). Remember that this is a model to draw inferences about a coin’s bias \\(\\theta\\) based on observations of outcomes of flips of that coin. The Bayesian modeling approach treated the number of observed heads \\(k\\) and the number of flips in total \\(N\\) as given, and the coin’s bias parameter \\(\\theta\\) as latent. Figure 16.2: The Binomial Model (repeated from before) for a Bayesian approach to parameter inference/testing. Actually, this way of writing the Binomial Model is a shortcut. It glosses over each individual data observation (whether the \\(i\\)-th coin flip was heads or tails) and jumps directly to the most relevant summary statistic of how many of the \\(N\\) flips were heads. This might, of course, be just the relevant level of analysis. If our assumption is true that the outcome of each coin flip is independent of any other flip, and given our goal to learn something about \\(\\theta\\), all that really matters is \\(k\\). But we can also rewrite the Bayesian model from Figure 16.2 as the equivalent extended model in Figure 16.3. In the latter representation, the individual outcomes of each flip are represented as \\(x_i \\in \\{0,1\\}\\). Each individual outcome is sampled from a Bernoulli distribution. Based on the whole vector of \\(x_i\\)-s and our knowledge of \\(N\\), we derive the test statistic \\(k\\), which maps each observation (a vector \\(x\\) of zeros and ones) to a single number \\(k\\) (the number of heads in the vector). Notice that the node for \\(k\\) has a solid double edge, indicating that it follows deterministically from its parent nodes. This is why we can think of \\(k\\) as a sample from a random variable constructed from “raw data” observations \\(x\\). Figure 16.3: The Binomial Model for a Bayesian approach, extended to show ‘raw observations’ and the ‘summary statistic’ implicitly used. Compare this latter representation in Figure 16.3 with the frequentist Binomial Model in Figure 16.4. The frequentist model treats the number of observations \\(N\\) as observed, just like the Bayesian model. But it also fixes a specific value for the coin’s bias \\(\\theta\\). This is where the (point-valued) null hypothesis comes in. For purposes of analysis, we fix the value of the relevant unobservable latent parameter to a specific value (because we do not want to assign probabilities to latent parameters, but we still like to talk about probabilities somehow). In our graphical model in Figure 16.4, the node for the coin’s bias is shaded (= treated as known) but also has a dotted second edge to indicate that this is where our null hypothesis assumption kicks in. We then treat the data vector \\(x\\) and, with it, the associated test statistic \\(k\\) as unobserved. The data we actually observed will, of course, come in at some point. But the frequentist model leaves the observed data out at first in order to bring in the kinds of probabilities frequentist approaches feel comfortable with: probabilities derived from (hypothetical) repetitions of chance events. So, the frequentist model can now make statements about the likelihood of (raw) data \\(x\\) and values of the derived summary statistic \\(k\\) based on the assumption that the null hypothesis is true. Indeed, for the case at hand, we already know that the sampling distribution, i.e., the distribution of values for \\(k\\) given \\(\\theta_0\\) is the Binomial distribution. Figure 16.4: The Binomial Model for a frequentist binomial test. Let’s take a step back. The frequentist model for the binomial case considers (“raw”) data of the form \\(\\langle x_1, \\dots, x_N \\rangle\\) where each \\(x_i \\in \\{0,1\\}\\) indicates whether the \\(i\\)-th flip was a success (= heads, = 1) or a failure (= tails, = 0). We identify the set of all binary vectors of length \\(N\\) as the set of hypothetical data that we could, in principle, observe in a fictitious repetition of this data-generating process. \\(\\mathcal{D}^{|H_0}\\) is then the random variable that assigns each potential observation \\(D = \\langle x_1, \\dots, x_N \\rangle\\) the probability with which it would occur if \\(H_0\\) (= a specific value of \\(\\theta\\)) is true. In our case, that is: \\[P(\\mathcal{D}^{|H_0} = \\langle x_1, \\dots, x_N \\rangle) = \\prod_{i=1}^N \\text{Bernoulli}(x_i, \\theta_0)\\] The model does not work with this raw data and its implied distribution (represented by random variable \\(\\mathcal{D}^{|H_0}\\)), it instead uses a (very natural!) test statistic \\(t \\colon \\langle x_1, \\dots, x_N \\rangle \\mapsto \\sum_{i=1}^N x_i\\). The sampling distribution for this model is therefore the distribution of values for the derived measure \\(k\\) - a distribution that follows from the distribution of the raw data (\\(\\mathcal{D}^{|H_0}\\)) and this particular test statistic \\(t\\). In its most general form, we write the sampling distribution as \\(T^{|H_0} = t(\\mathcal{D^{H_0}})\\).76 It just so happens (what a relief!) that we know how to express \\(T^{|H_0}\\) in a mathematically very concise fashion. It’s just the Binomial distribution, so that \\(k \\sim \\text{Binomial}(\\theta_0, N)\\). (Notice how the sampling distribution is really a function of \\(\\theta_0\\), i.e., the null hypothesis, and also of \\(N\\).) 16.2.2 One- vs. two-sided \\(p\\)-values After seeing a frequentist null model and learning about notions like “test statistic” and “sampling distribution”, let’s explore what a \\(p\\)-value is based on the frequentist Binomial Model. Our running example will be the 24/7 case, where \\(N = 24\\) and \\(k = 7\\). Notice that we are glossing over the “raw” data immediately and work with the value of the test statistic of the observed data directly: \\(t(D_{\\text{obs}}) = 7\\). Remember that, by the definition given above, \\(p(D_{\\text{obs}})\\) is the probability of observing a value of the test statistic that is at least as extreme evidence against \\(H_0\\) as \\(t(D_{\\text{obs}})\\), under the assumption that \\(H_0\\) is true: \\[ p(D_{\\text{obs}}) = P(T^{|H_0} \\succeq^{H_{0,a}} t(D_{\\text{obs}})) % = P(\\mathcal{D}^{|H_0} \\in \\{D \\mid t(D) \\ge t(D_{\\text{obs}})\\}) \\] To fill this with life, we need to set a null hypothesis, i.e., a value \\(\\theta_0\\) of coin bias \\(\\theta\\), that we would like to collect evidence against. A fixed \\(H_0\\) will directly fix \\(T^{|H_0}\\), but we will have to put extra thought into how to conceptualize \\(\\succeq^{H_{0,a}}\\) for any given \\(H_0\\). To make exactly this clearer is the job of this section. Specifically, we will look at what is standardly called a two-sided \\(p\\)-value and a one-sided \\(p\\)-value. The difference lies in whether we are testing a point-valued or an interval-based null hypothesis. So, let’s suppose that we want to test the following null hypotheses: Is the coin fair (\\(\\theta = 0.5\\))? Is the coin biased towards heads (\\(\\theta &gt; 0.5\\))? In the case of testing for fairness (\\(\\theta = 0.5\\)), the pair of null hypothesis and alternative hypothesis are: \\[ \\begin{aligned} H_0 \\colon \\theta = 0.5 &amp;&amp; H_a \\colon \\theta \\neq 0.5 \\end{aligned} \\] The case for testing the null hypothesis \\(\\theta &gt; 0.5\\) is slightly more convoluted. The frequentist construction of a null model strictly requires point-valued assumptions about all model parameters. Otherwise, subjective priors would sneak it. (NB: Even the assumption of equal probability of parameter values, as in a non-informative prior, is a biased and subjective assumption, according to frequentism.) We therefore actually test the point-valued null hypothesis \\(\\theta = 0.5\\), but we contrast it with a different alternative hypothesis, which is now one-sided: \\[ \\begin{aligned} H_0 \\colon \\theta = 0.5 &amp;&amp; H_a \\colon \\theta &lt; 0.5 \\end{aligned} \\] Case \\(\\theta = 0.5\\). To begin with, assume that we want to address the question of whether the coin is fair. Figure 16.5 shows the sampling distribution of the test statistic \\(k\\). The probability of the observed value of the sampling statistic is shown in red. Figure 16.5: Sampling distribution (here: Binomial distribution) and the probability associated with observed data \\(k=7\\) highlighted in red, for \\(N = 24\\) coin flips, under the assumption of a null hypothesis \\(\\theta = 0.5\\). The question we need to settle to obtain a \\(p\\)-value is how to interpret \\(\\succeq^{H_{0,a}}\\) for this case. To do this, we need to decide which alternative values of \\(k\\) would count as equally or more extreme evidence against the chosen null hypothesis when compared to the specified alternative hypothesis. The obvious approach is to use the probability of any value of the test statistic \\(k\\) directly and say that observing \\(D_1\\) counts as at least as extreme evidence against \\(H_0\\) as observing \\(D_2\\), \\(t(D_1) \\succeq^{H_{0,a}} t(D_2)\\), iff the probability of observing the test statistic associated with \\(D_1\\) is at least as unlikely as observing \\(D_2\\): \\(P(T^{|H_0} = t(D_1)) \\le P(T^{|H_0} = t(D_2))\\). To calculate the \\(p\\)-value in this way, we therefore need to sum up the probabilities of all values \\(k\\) under the Binomial distribution (with parameters \\(N=24\\) and \\(\\theta = \\theta_0 = 0.5\\)) that are no larger than the value of the observed \\(k = 7\\). In mathematical language:77 \\[ p(k) = \\sum_{k&#39; = 0}^{N} [\\text{Binomial}(k&#39;, N, \\theta_0) &lt;= \\text{Binomial}(k, N, \\theta_0)] \\ \\text{Binomial}(k&#39;, N, \\theta_0) \\] In code, we calculate this \\(p\\)-value as follows: # exact p-value for k = 7 with N = 24 and null hypothesis theta = 0.5 k_obs &lt;- 7 N &lt;- 24 theta_0 &lt;- 0.5 tibble( lh = dbinom(0:N, N, theta_0) ) %&gt;% filter( lh &lt;= dbinom(k_obs, N, theta_0) ) %&gt;% pull(lh) %&gt;% sum %&gt;% round(5) ## [1] 0.06391 Figure 16.6 shows the values that need to be summed over in red. Figure 16.6: Sampling distribution (Binomial likelihood function) and two-sided \\(p\\)-value for the observation of \\(k=7\\) successes in \\(N = 24\\) coin flips, under the assumption of a null hypothesis \\(\\theta = 0.5\\). Of course, R also has a built-in function for a Binomial test. We can use it to verify that we get the same result for the \\(p\\)-value: binom.test( x = 7, # observed successes n = 24, # total no. of observations p = 0.5 # null hypothesis ) ## ## Exact binomial test ## ## data: 7 and 24 ## number of successes = 7, number of trials = 24, p-value = 0.06391 ## alternative hypothesis: true probability of success is not equal to 0.5 ## 95 percent confidence interval: ## 0.1261521 0.5109478 ## sample estimates: ## probability of success ## 0.2916667 Exercise 16.1: Output of R’s binom.test Look at the output of the above call to R’s binom.test function. Which pieces of information in that output make sense to you (given your current knowledge) and which do not? Solution The output given first states what was computed, namely an exact binomial test. You should understand what a binomial test is. The additional adjective exact refers to the fact that we did not use any approximation to get at the shown \\(p\\)-value. Next, we see the data repeated and the calculated \\(p\\)-value, which we have seen how to calculate by hand. The output then also names the alternative hypothesis, just like the text previously explained, making clear that this is a two-valued \\(p\\)-value. Then comes something which you do not yet know about: the notion of a 95% confidence interval will be covered later in this chapter. Finally, the output also gives the maximum likelihood estimate of the theta parameter. Together with the 95% confidence interval, the test result therefore also reports the most common frequentist estimators, point-values (MLE) and interval-valued (95% confidence interval) for the parameter of interest. Case \\(\\theta &gt; 0.5\\). Let’s now look at the case where we want to test whether the coin is biased towards heads \\(\\theta &gt; 0.5\\). As explained above, we need a point-valued assumption for the coin bias \\(\\theta\\) to set up a frequentist model and retrieve a sampling distribution for the relevant test statistic. We choose \\(\\theta_{0} = 0.5\\) as the point-valued null hypothesis, because if we get a high measure of the evidence against the hypothesis \\(\\theta_{0} = 0.5\\) (in a comparison against the alternative \\(\\theta &lt; 0.5\\)), we can discredit the whole interval-based hypothesis \\(\\theta &gt; 0.5\\) because any other value of \\(\\theta\\) bigger than 0.5 would give at least as high a \\(p\\)-value. In other words, we pick the single value for the comparison which is most favorable for the hypothesis \\(\\theta &gt; 0.5\\) when compared against \\(\\theta &lt; 0.5\\), so as when even that value is discredited, the whole hypothesis \\(\\theta &gt; 0.5\\) is discredited. But even though we use the same null-value of \\(\\theta_0 = 0.5\\), the calculation of the \\(p\\)-value will be different from the case we looked at previously. It will be one-sided. The reason lies in a change to what we should consider more extreme evidence against this interval-valued null hypothesis, i.e., the interpretation of \\(\\succeq^{H_{0,a}}\\). Look at Figure 16.7. As before we see the Bernoulli likelihood function derived from the point-value null hypothesis. The \\(k\\)-value observed is \\(k=7\\). Again we need to ask: which values of \\(k\\) would constitute equal or more evidence against the null hypothesis when compared against the alternative hypothesis, which is now \\(\\theta &lt; 0.5\\) Unlike in the previous, two-sided case, observing large values of \\(k\\), e.g., larger than 12, even if they are unlikely for the point-valued hypothesis \\(\\theta_0 = 0.5\\), does not constitute evidence against the interval-valued hypothesis we are interested in. So therefore, we disregard the contribution of the right-hand side in Figure 16.6 to arrive at a picture like in Figure 16.7. Figure 16.7: Sampling distribution (Binomial likelihood function) and one-sided \\(p\\)-value for the observation of \\(k=7\\) successes in \\(N = 24\\) coin flips, under the assumption of a null hypothesis \\(\\theta = 0.5\\) compared against the alternative hypothesis \\(\\theta &lt; 0\\). The associated \\(p\\)-value with this so-called one-sided test is consequently: k_obs &lt;- 7 N &lt;- 24 theta_0 &lt;- 0.5 # exact p-value for k = 7 with N = 24 and null hypothesis theta &gt; 0.5 dbinom(0:k_obs, N, theta_0) %&gt;% sum %&gt;% round(5) ## [1] 0.03196 We can double-check against the built-in function binom.test when we ask for a one-sided test: binom.test( x = 7, # observed successes n = 24, # total no. of observations p = 0.5, # null hypothesis alternative = &quot;less&quot; # the alternative to compare against is theta &lt; 0.5 ) ## ## Exact binomial test ## ## data: 7 and 24 ## number of successes = 7, number of trials = 24, p-value = 0.03196 ## alternative hypothesis: true probability of success is less than 0.5 ## 95 percent confidence interval: ## 0.0000000 0.4787279 ## sample estimates: ## probability of success ## 0.2916667 16.2.3 Significance &amp; categorical decisions Fisher’s early writings suggest that he considered \\(p\\)-values as quantitative measures of strength of evidence against the null hypothesis. What would need to be done or concluded from such a quantitative measure would need to depend on further careful case-by-base deliberation. In contrast, the Neyman-Pearson approach, as well as the presently practiced hybrid NHST approach use \\(p\\)-values to check, in a rigid conventionalized manner, whether a test result is noteworthy in a categorical, not quantitative way. More on the Neyman-Pearson approach in Section 16.4. Fixing an \\(\\alpha\\)-level of significance (with common values \\(\\alpha \\in \\{0.05, 0.01, 0.001\\}\\)), we say that a test result is statistically significant (at level \\(\\alpha\\)) if the \\(p\\)-value of the observed data is lower than the specified \\(\\alpha\\). The significance of a test result, as a categorical measure, can then be further interpreted as a trigger for decision making. Commonly, a significant test result is interpreted as the signal to reject the null hypothesis, i.e., to speak and act as if it was false. Importantly, a non-significant test results by some \\(\\alpha\\)-level is not to be treated as evidence in favor of the null hypothesis.78 Exercise 16.2: Significance &amp; errors If the \\(p\\)-value is larger than a prespecified significance threshold \\(\\alpha\\) (e.g., \\(\\alpha = 0.05\\)), we… …accept \\(H_0\\). …reject \\(H_0\\) in favor of \\(H_a\\). …fail to reject \\(H_0\\). Solution Statement c. is correct. 16.2.4 How (not) to interpret p-values Though central to much of frequentist statistics, \\(p\\)-values are frequently misinterpreted, even by seasoned scientists (Haller and Krauss 2002). To repeat, the \\(p\\)-value measures the probability of observing, if the null hypothesis is correct, a value of the test statistic that is (in a specific, contextually specified sense) more extreme than the value of the test statistic that we assign to the observed data. We can therefore treat \\(p\\)-values as a measure of evidence against the null hypothesis. And if we want to be even more precise, we interpret this as evidence against the whole assumed data-generating process, a central part of which is the null hypothesis. The \\(p\\)-value is not a statement about the probability of the null hypothesis given the data. So, it is not something like \\(P(H_0 \\mid D)\\). The latter is a very appealing notion, but it is one that the frequentist denies herself access to. It can also only be computed based on some consideration of prior plausibility of \\(H_0\\) in relation to some alternative hypothesis. Indeed, to calculate \\(P(H_0 \\mid D)\\) is unforgivingly a subjective, Bayesian notion. Exercise 16.3: \\(p\\)-values Which statement(s) about \\(p\\)-values is/are true? The \\(p\\)-value is… …the probability that the null hypothesis \\(H_0\\) is true. …the probability that the alternative hypothesis \\(H_a\\) is true. …the probability, derived from the assumption that \\(H_0\\) is true, of obtaining an outcome for the chosen test statistic that is the exact same as the observed outcome. …a measure of evidence in favor of \\(H_0\\). …the probability, derived from the assumption that \\(H_0\\) is true, of obtaining an outcome for the chosen test statistic that is the same as the observed outcome or more extreme evidence for \\(H_a\\). …a measure of evidence against \\(H_0\\). Solution Statements e. and f. are correct. 16.2.5 [Excursion] Distribution of \\(p\\)-values A result that might seem surprising at first is that if the null hypothesis is true, the distribution of \\(p\\)-values is uniform. This, however, is intuitive on second thought. Mathematically it is a direct consequence of the Probability Integral Transform Theorem. Theorem 16.1 (Probability Integral Transform) If \\(X\\) is a continuous random variable with cumulative distribution function \\(F_X\\), the random variable \\(Y = F_X(X)\\) is uniformly distributed over the interval \\([0;1]\\), i.e., \\(y \\sim \\text{Uniform}(0,1)\\). Proof Proof. Notice that the cumulative density function of a standard uniform distribution \\(y \\sim \\text{Uniform}(0,1)\\) is a linear line with intercept 0 and slope 1. It therefore suffices to show that \\(F_Y(y) = y\\). \\[ \\begin{aligned} F_Y(y) &amp; = P(Y \\le y) &amp;&amp; [\\text{def. of cumulative distribution}] \\\\ &amp; = P(F_X(X) \\le y) &amp;&amp; [\\text{by construction / assumption}] \\\\ &amp; = P(X \\le F^{-1}_X(y)) &amp;&amp; [\\text{applying inverse cumulative function}] \\\\ &amp; = F_X(F^{-1}_X(y)) &amp;&amp; [\\text{def. of cumulative distribution}] \\\\ &amp; = y &amp;&amp; [\\text{inverses cancel out}] \\\\ \\end{aligned} \\]   Seeing the uniform distribution of \\(p\\)-values (under a true null hypothesis) helps appreciate how the \\(\\alpha\\)-level of significance is related to long-term error control. If the null hypothesis is true, the probability of a significant test result is exactly the significance level. References "],["ch-03-05-hypothesis-testing-CLT.html", "16.3 [Excursion] Central Limit Theorem", " 16.3 [Excursion] Central Limit Theorem The previous sections expanded on the notion of a \\(p\\)-value and showed how to calculate \\(p\\)-values for different kinds of research questions for data from repeated Bernoulli trials (= coin flips). We saw that a natural test statistic is the Binomial distribution. The Binomial distribution described the sampling distribution precisely, i.e., the sampling distribution for the frequentist Binomial Model as we set it up is the Binomial distribution. Unfortunately, there are models and types of data for which the sampling distribution is not known precisely. In these cases, frequentist statistics work with approximations to the true sampling distribution. These approximations get better the more data was observed, i.e., these are limit-approximations that hold in the limit when the amount of data observed goes towards infinity. For small samples, the error might be substantial. Rules of thumb have become conventional guides for judging when (not) to use a given approximation. Which (approximation for a) sampling distribution to use needs to be decided on a case-by-case basis. To establish that a particular distribution is a good approximation of the true sampling distribution, the most important formal result is the Central Limit Theorem (CLT). In rough terms, the CLT says that, under certain conditions, we can use a normal distribution as an approximation of the sampling distribution. To appreciate the CLT, let’s start with another seminal result, the Law of Large Numbers, which we had already relied on when we discussed a sample-based approach to representing probability distributions. For example, the Law of Large Numbers justifies why taking (large) samples from a random variable sufficiently approximate a mean (the most prominent Bayesian point-estimator of, e.g., a posterior approximated by samples from MCMC algorithms). Theorem 16.2 (Law of Large Numbers) Let \\(X_1, \\dots, X_n\\) be a sequence of \\(n\\) differentiable random variables with equal mean, such that \\(\\mathbb{E}_{X_i} = \\mu_X\\) for all \\(1 \\le i \\le n\\).79 As the number of samples \\(n\\) goes to infinity, the mean of any tuple of samples, one from each \\(X_i\\), convergences almost surely to \\(\\mu_X\\): \\[ P \\left(\\lim_{n \\rightarrow \\infty} \\frac{1}{n} \\sum_{i = 1}^n X_i = \\mu_X \\right) = 1 \\] Computer simulations make the point and usefulness of this fact easier to appreciate: # sample from a standard normal distribution (mean = 0, sd = 1) samples &lt;- rnorm(100000) # collect the mean after each 10 samples &amp; plot tibble( n = seq(100, length(samples), by = 10) ) %&gt;% group_by(n) %&gt;% mutate( mu = mean(samples[1:n]) ) %&gt;% ggplot(aes(x = n, y = mu)) + geom_line() For practical purposes, think of the Central Limit Theorem as an extension of the Law of Large Numbers. While the latter tells us that, as \\(n \\rightarrow \\infty\\), the mean of repeated samples from a random variable \\(X\\) converges to the mean of \\(X\\), the Central Limit Theorem tells us something about the distribution of our estimate of \\(X\\)’s mean. The Central Limit Theorem tells us that the sampling distribution of the mean approximates a normal distribution for a large enough sample size. Theorem 16.3 (Central Limit Theorem) Let \\(X_1, \\dots, X_n\\) be a sequence of \\(n\\) differentiable random variables with equal mean \\(\\mathbb{E}_{X_i} = \\mu_X\\) and equal finite variance \\(\\text{Var}(X_i) = \\sigma_X^2\\) for all \\(1 \\le i \\le n\\).80 The random variable \\(S_n\\) which captures the distribution of the sample mean for any \\(n\\) is: \\[ S_n = \\frac{1}{n} \\sum_{i=1}^n X_i \\] As the number of samples \\(n\\) goes to infinity, the random variable \\(\\sqrt{n} (S_n - \\mu_X)\\) converges in distribution to a normal distribution with mean 0 and standard deviation \\(\\sigma_X\\).   A proof of the CLT is not trivial, and we will omit it here. We will only point to the CLT when justifying approximations of sampling distributions, e.g., for the case of Pearson’s \\(\\chi^2\\)-test. Below you can explore the effect of different sample sizes and numbers of samples on the sampling distribution of the mean. Play around with the values and note how with increasing sample size and number of samples… …the sample mean approximates the population mean (Law of Large Numbers). …the distribution of sample means approximates a normal distribution (Central Limit Theorem). To be able to simulate the CLT, we first need a population to sample from. In the drop-down menu below, you can choose how the population should be distributed, where the parameter values are fixed (e.g., if you choose “normally distributed”, the population will be distributed according to \\(N(\\mu = 4, \\sigma = 1)\\)).81 Also try out the custom option to appreciate that both concepts hold for every distribution. In variable sample_size, you can specify how many samples you want to take from the population. number_of_samples denotes how many samples of size sample_size are taken. E.g., if number_of_samples = 5 and sample_size = 3, we would repeat the process of taking three samples from the population a total of five times. The output will show the population and sampling distribution with their means. Population distribution normally distributed uniformly distributed beta distributed binomially distributed custom Though the result is more general, it is convenient to think of a natural application as the case where all \\(X_i\\) are samples from the exact same distribution.↩ As with the Law of Large Numbers, the most common application is the case where all \\(X_i\\) are samples from the exact same distribution.↩ If you want to change the default parameter values, simply click on the yellowish box and change the respective variable value. If you would like to see how different parameter values generally affect a given distribution, you should take a look at Appendix B.↩ "],["ch-03-04-hypothesis-significance-errors.html", "16.4 [Excursion] The Neyman-Pearson approach", " 16.4 [Excursion] The Neyman-Pearson approach Neyman and Pearson criticized Fisher’s approach for not being able to deliver results that could lead to accepting the null hypothesis. Moreover, the Neynam-Pearson approach is motivated by establishing a tight regime of long-term error control: we want to keep a cap on the long-run amount of errors that we make in statistical decision making. To do so, the N-P approach requires that researchers specify not only a null hypothesis \\(H_0\\), but also a point-valued alternative hypothesis \\(H_a\\), which are pitted against each other (similar to what we would expect from model comparison). The point-value for \\(H_a\\) usually comes from previous research or is chosen in a strategic manner. If we have a pair of explicit, point-valued hypotheses, null and alternative, we can do more than just to reject or not reject the null hypothesis, so the N-P approach proposes. We can reject the null hypothesis, in which case we accept the alternative hypothesis, or we can accept the null hypothesis, in which case we reject the alternative hypothesis. Being entirely frequentist, the N-P approach makes this binary decision between competing hypotheses based on \\(p\\)-values derived from the null hypothesis, as before. As we will see, this binary accept/reject logic is only tight if we make sure that a particular kind of error, the \\(\\beta\\)-error, is low enough; which we do, essentially, by making sure that we have enough data. If we have two hypotheses \\(H_0\\) and \\(H_a\\), and accept/reject them in a binary fashion, there are two types of error relevant to these considerations: the \\(\\alpha\\) or, Type-I error, is the error of falsely rejecting the null hypothesis, when in fact it is true. the \\(\\beta\\) error, or Type-II error, is the error of falsely accepting the null hypothesis, when in fact the alternative hypothesis is true. Figure 16.8 visualizes these two error concepts. The curves show the sampling distributions of a relevant test statistic under the assumption that \\(H_0\\) is true (green) or that \\(H_a\\) is true (yellow). If we fix a significance level \\(\\alpha\\) for a \\(p\\)-value based test -as before-, the proportion of error we make in the case that \\(H_0\\) is true, is given by \\(\\alpha\\) itself. This is shown for a one-sided test in Figure 16.8, where \\(t^*\\) is the critical value of the test statistic above which we get a significant result at \\(\\alpha\\) level. But now assume that, by the new N-P decision rule, whenever our test result is not significant, i.e., we get a result for the test statistic below \\(t^*\\), we would accept the null hypothesis and reject the alternative hypothesis \\(H_a\\). Then, the amount of errors we make, under the assumption that \\(H_a\\) is actually true is given by \\(\\beta\\). Figure 16.8: Schematic representation of \\(\\alpha\\)- and \\(\\beta\\)-errors. The green curve is the sampling distribution of some test statistic under the assumption that the null hypothesis is true. The yellow curve is the sampling distribution for the alternative hypothesis. The decision criterion for an N-P test is indicated as \\(t^*\\). The shaded regions show the probabilities of falsely rejecting a true null hypothesis (in green) and that of false accepting a false alternative hypothesis. For this N-P logic of rejecting and accepting the null hypothesis to work, we would therefore need to make sure that \\(\\beta\\) is low enough. We don’t want to make that kind of mistake too often. Otherwise, we should simply withhold judgement in case of a non-significant test result. So, how do we make sure that the \\(\\beta\\) error is small? We need to make sure that we have enough data. By the Central Limit Theorem, we know that the sampling distribution of our test statistics will have lower variance the more samples we take. Intuitively speaking, the more samples we have the steeper and tighter the curves in Figure 16.8. The \\(\\alpha\\) error will remain fixed, but the \\(\\beta\\) error decreases as the sample size increases. Consequently, if a frequentist wants to be able to both reject and accept a null hypothesis using N-P testing logic, the frequentist will: fix \\(H_0\\) and \\(H_a\\) (based on previous research if possible) determine an acceptable level of \\(\\alpha\\) determine a desired level of statistical power defined as \\(1-\\beta\\) do a power analysis, i.e., compute (using math or simulations) how many samples are necessary to meet the \\(1-\\beta\\) power bar For simple statistical tests, like \\(t\\)-tests and ANOVA, power calculations are mathematically tractable. For more complex cases, analysts have to resort to simulations, which can be quite complex.82 Power analyses are also possible for Bayesian models, but not necessary for being able to quantify evidence in favor of a null hypothesis.↩ "],["ch-05-01-frequentist-testing-confidence-intervals.html", "16.5 Confidence intervals", " 16.5 Confidence intervals The most commonly used interval estimate in frequentist analyses is confidence intervals. Although (frequentist) confidence intervals can coincide with (subjectivist) credible intervals in specific cases, they generally do not. And even when confidence and credible values yield the same numerical results, these notions are fundamentally different and ought not to be confused. Let’s look at credible intervals to establish the proper contrast. Recall that part of the definition of a credible interval for a posterior distribution over \\(\\theta\\), captured here notationally in terms of a random variable \\(\\Theta\\), was the probability \\(P(l \\le \\Theta \\le u)\\) that the value realized by random variable \\(\\Theta\\) lies in the interval \\([l;u]\\). This statement makes no sense to the frequentist. There cannot be any non-trivial value for \\(P(l \\le \\Theta \\le u)\\). The true value of \\(\\theta\\) is either in the interval \\([l;u]\\) or it is not. To speak of a probability that \\(\\theta\\) is in \\([l;u]\\) is to appeal to an ill-formed concept of probability which the frequentist denies. In order to give an interval estimate nonetheless, the frequentist appeals to probabilities that she can accept: probabilities derived from (hypothetical) repetitions of a genuine random event with objectively observable outcomes. Let \\(\\mathcal{D}\\) be the random variable that captures the probability with which data \\(\\mathcal{D}=D\\) is realized. We obtain a pair of derived random variables \\(X_l\\) and \\(X_u\\) from a pair of functions \\(g_{l,u} \\colon d \\mapsto \\mathbb{R}\\). A \\(\\gamma\\%\\) confidence interval for observed data \\(D_{\\text{obs}}\\) is the interval \\([g_l(D_{\\text{obs}}), g_u(D_{\\text{obs}})]\\) whenever functions \\(g_{l,u}\\) are constructed in such a way that \\[ \\begin{aligned} P(X_l \\le \\theta_{\\text{true}} \\le X_u) = \\frac{\\gamma}{100} \\end{aligned} \\] where \\(\\theta_{\\text{true}}\\) is the unknown but fixed true value of \\(\\theta\\). In more intuitive words, a confidence interval is an outcome of special construction (functions \\(g_{l,u}\\)) such that, when applying this procedure repeatedly to outcomes of the assumed data-generating process, the true value of parameter \\(\\theta\\) will lie inside of the computed confidence interval in exactly \\(\\gamma\\)% of the cases. It is easier to think of the definition of a confidence interval in terms of computer code and sampling (see Figure 16.9). Suppose Grandma gives you computer code, a magic_function which takes as input data observations, and returns an interval estimate for the parameter of interest. We sample a value for the parameter of interest repeatedly and consider it the “true parameter” for the time being. For each sampled “true parameter”, we generate data repeatedly. We apply Grandma’s magic_function, obtain an interval estimate, and check if the true value that triggered the whole process is included in the interval. Grandma’s magic_function is a \\(\\gamma\\%\\) confidence interval if the proportion of inclusions (the checkmarks in Figure 16.9) is \\(\\gamma\\%\\). Figure 16.9: Schematic representation of what a confidence interval does: think of it as a magic function that returns intervals that contain the true value in \\(\\gamma\\) percent of the cases. In some complex cases, the frequentist analyst relies on functions \\(g_{l}\\) and \\(g_{u}\\) that are easy to compute but only approximately satisfy the condition \\(P(X_l \\le \\theta_{\\text{true}} \\le X_u) = \\frac{\\gamma}{100}\\). For example, we might use an asymptotically correct calculation, based on the observation that, if \\(n\\) grows to infinity, the binomial distribution approximates a normal distribution. We can then calculate a confidence interval as if our binomial distribution actually was a normal distribution. If \\(n\\) is not large enough, this will be increasingly imprecise. Rules of thumb are used to decide how big \\(n\\) has to be to involve at best a tolerable amount of imprecision (see the Info Box below). For our running example (\\(k = 7\\), \\(n=24\\)), the rule of thumb mentioned in the Info Box below recommends not using the asymptotic calculation. If we did nonetheless, we would get a confidence interval of \\([0.110; 0.474]\\). For the binomial distribution, also a more reliable calculation exists, which yields \\([0.126; 0.511]\\) for the running example. (We can use numeric simulation to explore how good/bad a particular approximate calculation is, as shown in the next section.) The more reliable construction, the so-called exact method, implemented in the function binom.confint of R package binom, revolves around the close relationship between confidence intervals and \\(p\\)-values. (To foreshadow a later discussion: the exact \\(\\gamma\\%\\) confidence interval is the set of all parameter values for which an exact (binomial) test does not yield a significant test result as the level of \\(\\alpha = 1-\\frac{\\gamma}{100}\\).) Asymptotic approximation of a binomial confidence interval using a normal distribution. Let \\(X\\) be the random variable that determines the binomial distribution, i.e., the probability of seeing \\(k\\) successes in \\(n\\) flips. For large \\(n\\), \\(X\\) approximates a normal distribution with a mean \\(\\mu = n \\ \\theta\\) and a standard deviation of \\(\\sigma = \\sqrt{n \\ \\theta \\ (1 - \\theta)}\\). The random variable \\(U\\): \\[U = \\frac{X - \\mu}{\\sigma} = \\frac{X - n \\ \\theta}{\\sqrt{n \\ \\theta \\ (1-\\theta)}}\\] Let \\(\\hat{P}\\) be the random variable that captures the distribution of our maximum likelihood estimates for an observed outcome \\(k\\): \\[\\hat{P} = \\frac{X}{n}\\] Since \\(X = \\hat{P} \\ n\\) we obtain: \\[U = \\frac{\\hat{P} \\ n - n \\ \\theta}{\\sqrt{n \\ \\theta \\ (1-\\theta)}}\\] We now look at the probability that \\(U\\) is realized to lie in a symmetric interval \\([-c,c]\\), centered around zero — a probability which we require to match our confidence level: \\[P(-c \\le U \\le c) = \\frac{\\gamma}{100}\\] We now expand the definition of \\(U\\) in terms of \\(\\hat{P}\\), equate \\(\\hat{P}\\) with the current best estimate \\(\\hat{p} = \\frac{k}{n}\\) based on the observed \\(k\\) and rearrange terms, yielding the asymptotic approximation of a binomial confidence interval: \\[\\left [ \\hat{p} - \\frac{c}{n} \\ \\sqrt{n \\ \\hat{p} \\ (1-\\hat{p})} ; \\ \\ \\hat{p} + \\frac{c}{n} \\ \\sqrt{n \\ \\hat{p} \\ (1-\\hat{p})} \\right ]\\] This approximation is conventionally considered precise enough when the following rule of thumb is met: \\[n \\ \\hat{p} \\ (1 - \\hat{p}) &gt; 9\\] 16.5.1 Relation of p-values to confidence intervals There is a close relation between \\(p\\)-values and confidence intervals.83 For a two-sided test of a null hypothesis \\(H_0 \\colon \\theta = \\theta_0\\), with alternative hypothesis \\(H_a \\colon \\theta \\neq \\theta_0\\), it holds for all possible data observations \\(D\\) that \\[ p(D) &lt; \\alpha \\ \\ \\text{iff} \\ \\ \\theta_0 \\not \\in \\text{CI}(D) \\] where \\(\\text{CI}(D)\\) is the \\((1-\\alpha) \\cdot 100\\%\\) confidence interval constructed for data \\(D\\). This connection is intuitive when we think about long-term error. Decisions to reject the null hypothesis are false in exactly \\((\\alpha \\cdot 100)\\%\\) of the cases when the null hypothesis is true. The definition of a confidence interval was exactly the same: the true value should lay outside a \\((1-\\alpha) \\cdot 100\\%\\) confidence interval in exactly \\((\\alpha \\cdot 100)\\%\\) of the cases. (Of course, this is only a vague and intuitively appealing argument based on the overall rate, not any particular case.) Exercise 16.4: \\(p\\)-value, confidence interval, interpretation etc. Suppose that we have reason to believe that a coin is biased to land heads. A hypothesis test should shed light on this belief. We toss the coin \\(N = 10\\) times and observe \\(k = 8\\) heads. We set \\(\\alpha = 0.05\\). What is an appropriate null hypothesis, what is an appropriate alternative hypothesis? Solution \\(H_0\\): \\(\\theta_0 = 0.5\\), \\(H_a\\): \\(\\theta &gt; 0.5\\). Which alternative values of \\(k\\) provide more extreme evidence against \\(H_0\\)? Solution Values greater than 8 (we conduct a one-sided hypothesis test). The 95% confidence interval ranges between 0.493 and 1.0. Based on this information, decide whether the \\(p\\)-value is significant or non-significant. Why? Solution The \\(p\\)-value is non-significant because the value of the null hypothesis \\(H_0\\): \\(\\theta_0 = 0.5\\) is contained within the 95% CI. Hence, it is not sufficiently unlikely that the observed outcome was generated by a fair coin. Below is the probability mass function of the Binomial distribution (our sampling distribution). The probability of obtaining exactly \\(k\\) successes in \\(N\\) independent trials is defined as: \\[P(X = k)=\\binom{N}{k}p^k(1-p)^{N-k},\\] where \\(\\binom{N}{k}=\\frac{N!}{k!(N-k)!}\\) is the Binomial coefficient. Given the formula above, calculate the \\(p\\)-value (by hand) associated with our test statistic \\(k\\), under the assumption that \\(H_0\\) is true. Solution As this is a one-sided test, we look at those values of \\(k\\) that provide more extreme evidence against \\(H_0\\). We therefore compute the probability of at least 8 heads, given that \\(H_0\\) is true: \\[ P(X\\geq8)=P(X=8)+P(X=9)+P(X=10)\\\\ P(X=8)=\\binom{10}{8}0.5^8(1-0.5)^{10-8}=45\\cdot0.5^{10}\\\\ P(X=9)=\\binom{10}{9}0.5^9(1-0.5)^{10-9}=10\\cdot0.5^{10}\\\\ P(X=10)=\\binom{10}{10}0.5^{10}(1-0.5)^{10-10}=1\\cdot0.5^{10}\\\\ P(X\\geq8)=0.5^{10}(45+10+1)\\approx 0.0547 \\] Based on your result in d., decide whether we should reject the null hypothesis. Solution As we have a non-significant \\(p\\)-value (\\(p&gt;\\alpha\\)), we fail to reject the null hypothesis. Hence, we do not have evidence in favor of the hypothesis that the coin is biased to land heads. Use R’s built-in function for a Binomial test to check your results. Solution binom.test( x = 8, # observed successes n = 10, # total no. of observations p = 0.5, # null hypothesis alternative = &quot;greater&quot; # alternative hypothesis ) ## ## Exact binomial test ## ## data: 8 and 10 ## number of successes = 8, number of trials = 10, p-value = 0.05469 ## alternative hypothesis: true probability of success is greater than 0.5 ## 95 percent confidence interval: ## 0.4930987 1.0000000 ## sample estimates: ## probability of success ## 0.8 The \\(p\\)-value is affected by the sample size \\(N\\). Try out different values for \\(N\\) while keeping the proportion of successes constant to 80%. What do you notice with regard to the \\(p\\)-value? Solution With a larger sample size, the \\(p\\)-value is smaller compared to 10 coin flips. It requires only a few more samples to cross the significance threshold, allowing us to reject \\(H_0\\). However, this is just the case if the null hypothesis is in fact false. NB: Don’t collect more data after you observed the \\(p\\)-value! The sample size should be fixed prior to data collection and not increased afterwards. An important caveat applies here. There can be different (approximate) ways of defining \\(p\\)-values and confidence intervals. The relation described here does not hold when the (approximate) way of computing the \\(p\\)-value does not match the (approximate) way of computing the confidence interval.↩ "],["ch-03-05-hypothesis-testing-tests.html", "16.6 Selected tests", " 16.6 Selected tests This section captures a selection of commonly used frequentist tests. 16.6.1 Pearson’s \\(\\chi^2\\)-tests There are many tests that use the \\(\\chi^2\\)-distribution as an (approximate) sampling distribution. But given relevance and historical prominence, the name “\\(\\chi^2\\)-test” is usually interpreted to refer to one of several flavor’s of what we could specifically call “Pearson’s \\(\\chi^2\\)-test”. We will look at two flavors here. Pearson’s \\(\\chi^2\\)-test for goodness of fit tests whether an observed vector of counts is well explained by a given vector of predicted proportion. Pearson’s \\(\\chi^2\\)-test for independence tests whether a (two-dimensional) table of counts could plausibly have been generated by a process of independently selecting the column and the row category. We will explain how both of these tests work based on an application of the BLJM data, which we load as usual: data_BLJM_processed &lt;- aida::data_BLJM The focus is on the counts of music-subject choices: BLJM_associated_counts &lt;- data_BLJM_processed %&gt;% select(submission_id, condition, response) %&gt;% pivot_wider(names_from = condition, values_from = response) %&gt;% # drop the Beach-vs-Mountain condition select(-BM) %&gt;% dplyr::count(JM,LB) BLJM_associated_counts ## # A tibble: 4 x 3 ## JM LB n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Jazz Biology 38 ## 2 Jazz Logic 26 ## 3 Metal Biology 20 ## 4 Metal Logic 18 Remember that the lecturer’s bold conjecture was that a preference for Logic over Biology goes together with a preference for Metal over Jazz. The visualization suggests that there might be such a trend, but the (statistical) jury is still out as to whether this conjecture has empirical support. 16.6.1.1 Pearson’s \\(\\chi^2\\)-test for goodness of fit “Goodness of fit” is a term used in model checking (a.k.a. model criticism, model validation, …). In such a context, tests for goodness-of-fit investigate whether a model’s predictions are compatible with the observed data. Pearson’s \\(\\chi^2\\)-test for goodness of fit does exactly this for categorical data. Categorical data is data where each data observation falls into one of several unordered categories. If we have \\(k\\) such categories, a prediction vector \\(\\vec{p} = \\langle p_1, \\dots, p_k \\rangle\\) is a probability vector of length \\(k\\) such that \\(p_i\\) gives the probability with which a single data observation falls into the \\(i\\)-th category. The likelihood of a single data observation is given by the Categorical distribution, and the likelihood of \\(N\\) data observations is given by the Multinomial distribution. These are generalizations of the Bernoulli and Binomial distributions, which expand the case of two unordered categories to more than two unordered categories. The BLJM data supplies us with categorical data. Here is the vector of counts of how many participants selected a given music+subject pair: # add category names BLJM_associated_counts &lt;- BLJM_associated_counts %&gt;% mutate( category = str_c( BLJM_associated_counts %&gt;% pull(LB), &quot;-&quot;, BLJM_associated_counts %&gt;% pull(JM) ) ) counts_BLJM_choice_pairs_vector &lt;- BLJM_associated_counts %&gt;% pull(n) names(counts_BLJM_choice_pairs_vector) &lt;- BLJM_associated_counts %&gt;% pull(category) counts_BLJM_choice_pairs_vector ## Biology-Jazz Logic-Jazz Biology-Metal Logic-Metal ## 38 26 20 18 Figure 16.10 shows a crude plot of these counts, together with a baseline prediction of equal proportion in each category. Figure 16.10: Observed counts of choice pairs of music+subject preference in the BLJM data. Pearson’s \\(\\chi^2\\)-test for goodness of fit allows us to test whether this data could plausibly have been generated by (a model whose predictions are given by) a prediction vector \\(\\vec{p} = \\langle p_1, \\dots, p_4 \\rangle\\), where \\(p_1\\) would be the predicted probability of a choice pair “Biology-Jazz” occurring for a single participant, and so on. Frequently, this test is used to check whether an equal baseline distribution could have generated the data. We do that here, too. We form the null hypothesis that \\(\\vec{p} = \\vec{p}_0\\) with \\(p_{0i} = \\frac{1}{4}\\) for all categories \\(i\\). Figure 16.11 shows a graphical representation of the model implicitly assumed in the background for a Pearson’s \\(\\chi^2\\)-test for goodness of fit. The model assumes that the observed vector of counts (like our counts_BLJM_choice_pairs_vector from above) follows a Multinomial distribution.84 Each vector of (hypothetical) data is associated with a test statistic, called \\(\\chi^2\\), which sums over the standardized squared deviation of the observed counts from the predicted baseline in each cell. It can be shown that, if the number of observations \\(N\\) is large enough, the sampling distribution of the \\(\\chi^2\\) test statistic is approximated well enough by the \\(\\chi^2\\)-distribution with \\(k-1\\) degrees of freedom (where \\(k\\) is the number of categories).85 Notice that the approximation by a \\(\\chi^2\\)-distribution hinges on an approximation, which is only met when there are enough samples (just as we needed in the CLT). A rule-of-thumb is that at most 20% of all cells should have expected frequencies below 5 in order for the test to be applicable, i.e., \\(np_i &lt; 5\\) for all \\(i\\) in Figure 16.11. Figure 16.11: Graphical representation of Pearson’s \\(\\chi^2\\)-test for goodness of fit (testing a vector of predicted proportion). We can compute the \\(\\chi^2\\)-value associated with the observed data \\(t(D_{obs})\\) as follows: # observed counts n &lt;- counts_BLJM_choice_pairs_vector # proportion predicted p &lt;- rep(1/4, 4) # expected number in each cell e &lt;- sum(n) * p # chi-squared for observed data chi2_observed &lt;- sum((n - e)^2 * 1/e) chi2_observed ## [1] 9.529412 We can then compare this value to the sampling distribution, which is a \\(\\chi^2\\)-distribution with \\(k-1 = 3\\) degrees of freedom. We compute the \\(p\\)-value associated with our data as the tail of the sampling distribution, as also shown in Figure 16.12:86 p_value_BLJM &lt;- 1 - pchisq(chi2_observed, df = 3) Figure 16.12: Sampling distribution for a Pearson’s \\(\\chi^2\\)-test of goodness of fit (\\(\\chi^2\\)-distribution with \\(k-1 = 3\\) degrees of freedom), testing a flat baseline null hypothesis based on the BLJM data. Of course, these calculations can also be performed by using a built-in R function, namely chisq.test: counts_BLJM_choice_pairs_vector &lt;- BLJM_associated_counts %&gt;% pull(n) chisq.test(counts_BLJM_choice_pairs_vector) ## ## Chi-squared test for given probabilities ## ## data: counts_BLJM_choice_pairs_vector ## X-squared = 9.5294, df = 3, p-value = 0.02302 The common interpretation of our calculations would be to say that the test yielded a significant result, at least at the significance level of \\(\\alpha = 0.5\\). In a research paper, we might report these results roughly as follows: Observed counts deviated significantly from what is expected if each category (here: pair of music+subject choice) was equally likely (\\(\\chi^2\\)-test, with \\(\\chi^2 \\approx 9.53\\), \\(df = 3\\) and \\(p \\approx 0.023\\)). Notice that this test is an “omnibus test of difference”. We can conclude from a significant test result that the whole vector of observations is unlikely to have been generated by chance. Still, we cannot conclude from this result (without doing anything else) why, where or how the observations deviated from the assumed prediction vector. Looking at the plot of the data in Figure 16.10 above, it seems intuitive to think that Metal is disproportionally disfavored and that the combination of Biology and Jazz looks particularly outliery when compared to the baseline expectation. 16.6.1.2 Pearson’s \\(\\chi^2\\)-test of independence The previous test of goodness of fit does not allow us to address the lecturer’s conjecture that a preference of Metal over Jazz goes with a preference of Logic over Biology. A slightly different kind of \\(\\chi^2\\)-test is better suited for this. In Pearson’s \\(\\chi^2\\)-test of independence, we look at a two-dimensional table of correlated data observations, like this one: BLJM_table &lt;- BLJM_associated_counts %&gt;% select(-category) %&gt;% pivot_wider(names_from = LB, values_from = n) BLJM_table ## # A tibble: 2 x 3 ## JM Biology Logic ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Jazz 38 26 ## 2 Metal 20 18 For easier computation and compatibility with the function chisq.test, we handle the same data but stored as a matrix: counts_BLJM_choice_pairs_matrix &lt;- matrix( counts_BLJM_choice_pairs_vector, nrow = 2, byrow = T ) rownames(counts_BLJM_choice_pairs_matrix) &lt;- c(&quot;Jazz&quot;, &quot;Metal&quot;) colnames(counts_BLJM_choice_pairs_matrix) &lt;- c(&quot;Biology&quot;, &quot;Logic&quot;) counts_BLJM_choice_pairs_matrix ## Biology Logic ## Jazz 38 26 ## Metal 20 18 Pearson’s \\(\\chi^2\\)-test of independence addresses the question of whether two-dimensional tabular count data like the above could plausibly have been generated by a prediction vector \\(\\vec{p}\\), which results from the assumption that the realizations of row- and column-choices are stochastically independent. If row- and column-choices are independent, the probability of seeing an outcome result in cell \\(ij\\) is the probability of realizing row \\(i\\) times the probability of realizing column \\(j\\). So, under an independence assumption, we expect a matrix and a resulting vector of choice proportions like this: # number of observations in total N &lt;- sum(counts_BLJM_choice_pairs_matrix) # marginal proportions observed in the data # the following is the vector r in the model graph row_prob &lt;- counts_BLJM_choice_pairs_matrix %&gt;% rowSums() / N # the following is the vector c in the model graph col_prob &lt;- counts_BLJM_choice_pairs_matrix %&gt;% colSums() / N # table of expected observations under independence assumption # NB: %o% is the outer product of vectors BLJM_expectation_matrix &lt;- (row_prob %o% col_prob) * N BLJM_expectation_matrix ## Biology Logic ## Jazz 36.39216 27.60784 ## Metal 21.60784 16.39216 # the following is the vector p in the model graph BLJM_expectation_vector &lt;- as.vector(BLJM_expectation_matrix) BLJM_expectation_vector ## [1] 36.39216 21.60784 27.60784 16.39216 Figure 16.13 shows a graphical representation of the \\(\\chi^2\\)-test of independence. The main difference to the previous test of goodness of fit is that we do no longer just fix any-old prediction vector \\(\\vec{p}\\), but consider \\(\\vec{p}\\) the deterministic results of independence and the best estimates (based on the data at hand) of the row- and column probabilities. Figure 16.13: Graphical representation of Pearson’s \\(\\chi^2\\)-test for independence. We can compute the observed \\(\\chi^2\\)-test statistic and the \\(p\\)-value as follows: chi2_observed &lt;- sum( (counts_BLJM_choice_pairs_matrix - BLJM_expectation_matrix)^2 / BLJM_expectation_matrix ) p_value_BLJM &lt;- 1 - pchisq(q = chi2_observed, df = 1) round(p_value_BLJM, 5) ## [1] 0.50615 Figure 16.14 shows the sampling distribution, the value of the test statistic for the observed data and the \\(p\\)-value. Figure 16.14: Sampling distribution for a Pearson’s \\(\\chi^2\\) test of independence (\\(\\chi^2\\)-distribution with \\(1\\) degree of freedom), testing a flat baseline null hypothesis based on the BLJM data. We can also use the built-in function chisq.test in R to obtain this result more efficiently: chisq.test( # supply data as a matrix, not as a vector, for a test of independence counts_BLJM_choice_pairs_matrix, # do not use the default correction (because we didn&#39;t introduce it) correct = FALSE ) ## ## Pearson&#39;s Chi-squared test ## ## data: counts_BLJM_choice_pairs_matrix ## X-squared = 0.44202, df = 1, p-value = 0.5061 With a \\(p\\)-value of about 0.5061, we should conclude that there is no indication of strong evidence against the assumption of independence. Consequently, there is no evidence in favor of the lecturer’s conjecture of dependence of musical and academic preferences. In a research paper, we might report this result as follows: A \\(\\chi^2\\)-test of independence did not yield a significant test result (\\(\\chi^2\\)-test, with \\(\\chi^2 \\approx 0.44\\), \\(df = 1\\) and \\(p \\approx 0.5\\)). Therefore, we cannot claim to have found any evidence for the research hypothesis of dependence. Exercise 16.5: \\(\\chi^2\\)-test of independence Let us assume that there are two unordered categorical variables \\(A\\) and \\(B\\). Categorical variable \\(A\\) has two levels \\(a_1\\) and \\(a_2\\). Categorical variable \\(B\\) has three levels \\(b_1\\), \\(b_2\\) and \\(b_3\\). Let us further assume that the (marginal) probabilities of a choice from categories \\(A\\) or \\(B\\) is as follows: \\[ P(A=a_i)=\\begin{cases} 0.3 &amp;\\textbf{if \\(i=1\\)} \\\\ 0.7 &amp;\\textbf{if \\(i=2\\)} \\end{cases} \\quad P(B=b_i)=\\begin{cases} 0.2 &amp;\\textbf{if \\(i=1\\)}\\\\ 0.3 &amp;\\textbf{if \\(i=2\\)}\\\\ 0.5 &amp;\\textbf{if \\(i=3\\)} \\end{cases} \\] If observations of pairs of instances from categories \\(A\\) and \\(B\\) are stochastically independent, what would the expected joint probability of each pair of potential observations be? Solution \\(b_1\\) \\(b_2\\) \\(b_3\\) \\(a_1\\) .3 \\(\\times\\) .2 = .06 .3 \\(\\times\\) .3 = .09 .3 \\(\\times\\) .5 = .15 \\(a_2\\) .7 \\(\\times\\) .2 = .14 .7 \\(\\times\\) .3 = .21 .7 \\(\\times\\) .5 = .35 Imagine you observe the following table of counts for each pair of instances of categories \\(A\\) and \\(B\\): \\(b_1\\) \\(b_2\\) \\(b_3\\) \\(a_1\\) 1 26 3 \\(a_2\\) 19 4 47 Which of the \\(p\\)-values given below would you expect to see when feeding this table into a Pearson \\(\\chi^2\\)-test of independence? (only one correct answer) \\(p \\approx 1\\) \\(p \\approx 0.5\\) \\(p \\approx 0\\) I expect no result because the test is not suitable for this kind of data. Solution The correct answer is \\(p \\approx 0\\). Explain the answer you gave in the previous part in at most three concise sentences. Solution As the marginal proportions of observed counts for the table in b. equal the marginal probabilities given above, the joint probability table in a. actually gives the predicted probabilities under the assumption of independence. Comparing prediction against observed proportion (obtained by dividing the table in b. by the total count of 100), we see severe divergences, especially in the middle column. 16.6.2 z-test The Central Limit Theorem tells us that, given enough data, we can treat means of repeated samples from any arbitrary probability distribution as approximately normally distributed. Notice in addition that if \\(X\\) and \\(Y\\) are random variables following a normal distribution, then so is \\(Z = X - Y\\) (see also the chapter on the normal distribution). It now becomes clear how research questions about means and differences between means (e.g., in the Mental Chronometry experiment) can be addressed, at least approximately: We conduct tests that hinge on a sampling distribution which is a normal distribution (usually a standard normal distribution). The \\(z\\)-test is perhaps the simplest of a family of tests that rely on normality of the sampling distribution. Unfortunately, what makes it so simple is also what makes it inapplicable in a wide range of cases. The \\(z\\)-test assumes that a quantity that is normally distributed has an unknown mean (to be inferred by testing), but it also assumes that the variance is known. Since we do not know the variance in most cases of practical relevance, the \\(z\\)-test needs to be replaced by a more adequate test, usually a test from the \\(t\\)-test family, to be discussed below. We start with the \\(z\\)-test nonetheless because of the added benefit to our understanding. Figure 16.15 shows the model that implicitly underlies a \\(z\\)-test. It checks whether the data \\(\\vec{x}\\), which are assumed to be normally distributed with known \\(\\sigma\\), could have been generated by a hypothesized mean \\(\\mu = \\mu_0\\). The sampling distribution of the derived test statistic \\(z\\) is a standard normal distribution. Figure 16.15: Graphical representation of a \\(z\\)-test. We know that IQ test results are normally distributed around a mean of 100 with a standard deviation of 15. This holds when the sample is representative of the whole population. But suppose we have reason to believe that the sample is from CogSci students. The standard deviation in a sample from CogSci students might still plausibly be fixed to 15, but we’d like to test the assumption that this sample was generated by a mean \\(\\mu = 100\\), our null hypothesis. For illustration, suppose we observed the following data set of IQ test results: # fictitious IQ data IQ_data &lt;- c(87, 91, 93, 97, 100, 101, 103, 104, 104, 105, 105, 106, 108, 110, 111, 112, 114, 115, 119, 121) mean(IQ_data) ## [1] 105.3 The mean of this data set is 105.3. Suspicious! Following the model in Figure 16.15, we calculate the value of the test statistic for the observed data. # number of observations N &lt;- length(IQ_data) # null hypothesis to test mu_0 &lt;- 100 # standard deviation (known/assumed as true) sd &lt;- 15 z_observed &lt;- (mean(IQ_data) - mu_0) / (sd / sqrt(N)) z_observed %&gt;% round(4) ## [1] 1.5802 We focus on a one-sided \\(p\\)-value because our “research” hypothesis is that CogSci students have, on average, a higher IQ. Since we observed a mean of 105.3 in the data, which is higher than the critical value of 100, we test the null hypothesis \\(\\mu = 100\\) against an alternative hypothesis that assumes that the data was generated by a mean bigger than 100 (which is exactly our research hypothesis). As before, we can then compute the \\(p\\)-value by checking the area under the sampling distribution, here a standard normal, in the appropriate way. Figure 16.16 shows this result graphically. p_value_IQ_data_ztest &lt;- 1 - pnorm(z_observed) p_value_IQ_data_ztest %&gt;% round(6) ## [1] 0.057036 Figure 16.16: Sampling distribution for a \\(z\\)-test, testing the null hypothesis based on the assumption that the IQ-data was generated by \\(\\mu = 100\\) (with assumed/known \\(\\sigma\\)). We can also use a ready-made function for the \\(z\\)-test. However, as the \\(z\\)-test is so uncommon, it is not built into core R. We need to rely on the BSDA package to find the function z.test. BSDA::z.test(x = IQ_data, mu = 100, sigma.x = 15, alternative = &quot;greater&quot;) ## ## One-sample z-Test ## ## data: IQ_data ## z = 1.5802, p-value = 0.05704 ## alternative hypothesis: true mean is greater than 100 ## 95 percent confidence interval: ## 99.78299 NA ## sample estimates: ## mean of x ## 105.3 The conclusion to be drawn from this test could be formulated in a research report as follows: We tested the null hypothesis of a mean equal to 100, assuming a known standard deviation of 15, in a one-sided \\(z\\)-test against the alternative hypothesis that the data was generated by a mean greater than 100 (our research hypothesis). The test was not significant (\\(N = 20\\), \\(z \\approx 1.5802\\), \\(p \\approx 0.05704\\)), giving us no indication of strong evidence against the assumption that the mean is at most 100. 16.6.3 t-tests In most practical applications where a \\(z\\)-test might be useful, the standard deviation is not known. If unknown, it should also not lightly be fixed by clever guess-work. This is where the family of \\(t\\)-tests comes in. We will look at two examples of these: the one-sample \\(t\\)-test, which compares one set of samples to a fixed mean, and the two-sample \\(t\\)-test, which compares the means of two sets of samples. 16.6.3.1 One-sample \\(t\\)-test The simplest example of this family, namely a \\(t\\)-test for one metric vector \\(\\vec{x}\\) of normally distributed observations, tests the null hypothesis that \\(\\vec{x}\\) was generated by some \\(\\mu = \\mu_0\\) (just like the \\(z\\)-test). However, unlike the \\(z\\)-test, a one-sample \\(t\\)-test does not assume that the standard deviation is known. It rather uses the observed data to obtain an estimate for this parameter. More concretely, a one-sample \\(t\\)-test for \\(\\vec{x}\\) estimates the standard deviation in the usual way (see Chapter 5): \\[\\hat{\\sigma}_x = \\sqrt{\\frac{1}{n-1} \\sum_{i=1}^n (x_i - \\mu_{\\vec{x}})^2}\\] Figure 16.17 shows a graphical representation of a one-sample \\(t\\)-test model. The light shading of the node for the standard deviation indicates that this parameter is estimated from the observed data. Importantly, the distribution of the test statistic \\(t\\) is no longer well approximated by a normal distribution when the sample size is low. It is better captured by a Student’s \\(t\\) distribution. Figure 16.17: Graphical representation of the model underlying a frequentist one-sample \\(t\\)-test. Notice that the lightly shaded node for the standard deviation represents that the value for this parameter is estimated from the data. Let’s revisit our IQ-data set from above to calculate a \\(t\\)-test. Using a \\(t\\)-test implies that we are now assuming that the standard deviation is actually unknown. We can calculate the value of the test statistic for the observed data and use this to compute a \\(p\\)-value, much like in the case of the \\(z\\)-test before. N &lt;- length(IQ_data) # fix the null hypothesis mean_0 &lt;- 100 # unlike in a z-test, we use the sample to estimate the SD sigma_hat &lt;- sd(IQ_data) t_observed &lt;- (mean(IQ_data) - mean_0) / sigma_hat * sqrt(N) t_observed %&gt;% round(4) ## [1] 2.6446 We calculate the relevant one-sided \\(p\\)-value using the cumulative distribution function pt of the \\(t\\)-distribution. p_value_t_test_IQ &lt;- 1 - pt(t_observed, df = N - 1) p_value_t_test_IQ %&gt;% round(6) ## [1] 0.007992 Figure 16.18: Sampling distribution for a \\(t\\)-test, testing the null hypothesis that the IQ-data was generated by \\(\\mu = 100\\) (with unknown \\(\\sigma\\)). Compare these calculations against the built-in function t.test: t.test(x = IQ_data, mu = 100, alternative = &quot;greater&quot;) ## ## One Sample t-test ## ## data: IQ_data ## t = 2.6446, df = 19, p-value = 0.007992 ## alternative hypothesis: true mean is greater than 100 ## 95 percent confidence interval: ## 101.8347 Inf ## sample estimates: ## mean of x ## 105.3 These results could be stated in a research report much like so: We tested the null hypothesis of a mean equal to 100, assuming an unknown standard deviation, using a one-sided, one-sample \\(t\\)-test against the alternative hypothesis that the data was generated by a mean greater than 100 (our research hypothesis). The significant test result (\\(N = 20\\), \\(t \\approx 2.6446\\), \\(p \\approx 0.007992\\)) suggests that the data provides strong evidence against the assumption that the mean is not bigger than 100. Notice that the conclusions we draw from the previous \\(z\\)-test and this one-sample \\(t\\)-test are quite different. Why is this so? Well, it is because we (cheekily) chose a data set IQ_data that was actually not generated by a normal distribution with a standard deviation of 15, contrary to what we said about IQ-scores normally having this standard deviation. The assumption about \\(\\sigma\\) fed into the \\(z\\)-test was (deliberately!) wrong. The result of the \\(t\\)-test, at least for this example, is better. The data in IQ_data are actually samples from \\(\\text{Normal}(105,10)\\). This demonstrates why the one-sample \\(t\\)-test is usually preferred over a \\(z\\)-test: unshakable, true knowledge of \\(\\sigma\\) is very rare. 16.6.3.2 Two-sample \\(t\\)-test (for unpaired data with equal variance and unequal sample sizes) The “mother of all experimental designs” compares two groups of measurements. We give a drug to one group of patients, a placebo to another. We take a metric measure (say, blood sugar level) and ask whether there is a difference between these two groups. Section 9 introduced the \\(T\\)-Test Model for a Bayesian approach. Here, we look at a corresponding model for a frequentist approach, a so-called two-sample \\(t\\)-test. There are different kinds of such two-sample \\(t\\)-tests. The differences lie, e.g., in whether we assume that both groups have equal variance, in whether the sample sizes are the same in both groups, or in whether observations are paired (e.g., as in a within-subjects design, where we get two measurements from each participant, one from each condition/group). Here, we focus on unpaired data (as from a between-subjects design), assume equal variance but (possibly) unequal sample sizes. The case we look at is the avocado data, where we want to specifically investigate whether the weekly average price of organically grown avocados is higher than that of conventionally grown avocados.87 We here consider the preprocessed avocado data set (see Appendix Chapter D.5 for details on how this preprocessing was performed). avocado_data &lt;- aida::data_avocado Remember that the distribution of prices looks as follows: A graphical representation of the two-sample \\(t\\)-test (for unpaired data with equal variance and unequal sample sizes), which we will apply to this case, is shown in Figure 16.19. The model assumes that we have two vectors of metric measurements \\(\\vec{x}_A\\) and \\(\\vec{x}_B\\), with length \\(n_A\\) and \\(n_B\\), respectively. These are the price measures for conventionally grown and for organically grown avocados. The model assumes that measures in both \\(\\vec{x}_A\\) and \\(\\vec{x}_B\\) are i.i.d. samples from a normal distribution. The mean of one group (group \\(B\\) in the graph) is assumed to be some unknown \\(\\mu\\). Interestingly, this parameter will cancel out eventually: the approximation of the sampling distribution turns out to be independent of this parameter.88 The mean of the other group (group \\(A\\) in the graph) is computed as \\(\\mu + \\delta\\), so with some additive parameter \\(\\delta\\) indicating the difference between means of these groups. This \\(\\delta\\) is the main parameter of interest for inferences regarding hypotheses concerning differences between groups. Finally, the model assumes that both groups have the same standard deviation, an estimate of which is derived from the data (in a rather convoluted looking formula that is not important for our introductory concerns). As indicated in Figure 16.19, the sampling distribution for this model is an instance of Student’s \\(t\\)-distribution with mean 0, standard deviation 1 and degrees of freedom \\(\\nu\\) given as \\(n_A + n_B - 2\\). Figure 16.19: Graphical representation of the model underlying a frequentist two-population \\(t\\)-test (for unpaired data with equal variance and unequal sample sizes). Notice that the light shading of the node for the standard deviation indicates that the value for this parameter is estimated from the data. Figure 16.19 gives us the template to compute the value of the test statistic for the observed data: # fix the null hypothesis: no difference between groups delta_0 &lt;- 0 # data (group A) x_A &lt;- avocado_data %&gt;% filter(type == &quot;organic&quot;) %&gt;% pull(average_price) # data (group B) x_B &lt;- avocado_data %&gt;% filter(type == &quot;conventional&quot;) %&gt;% pull(average_price) # sample mean for organic (group A) mu_A &lt;- mean(x_A) # sample mean for conventional (group B) mu_B &lt;- mean(x_B) # numbers of observations n_A &lt;- length(x_A) n_B &lt;- length(x_B) # variance estimate sigma_AB &lt;- sqrt( ( ((n_A - 1) * sd(x_A)^2 + (n_B - 1) * sd(x_B)^2 ) / (n_A + n_B - 2) ) * (1/n_A + 1/n_B) ) t_observed &lt;- (mu_A - mu_B - delta_0) / sigma_AB t_observed ## [1] 105.5878 We can use the value of the test statistic for the observed data to compute a one-sided \\(p\\)-value, as before. Notice that we use a one-sided test because we hypothesize that organically grown avocados are more expensive, not just that they have a different price (more expensive or cheaper). p_value_t_test_avocado &lt;- 1 - pt(q = t_observed, df = n_A + n_B - 2) p_value_t_test_avocado ## [1] 0 Owing to number imprecision, the calculated \\(p\\)-value comes up as a flat zero. We have a lot of data, and the task of defending that conventionally grown avocados are not less expensive than organically grown is very tough. This also shows in the corresponding picture in Figure 16.20. Figure 16.20: Sampling distribution for a two-sample \\(t\\)-test, testing the null hypothesis of no difference between groups, based on the avocado data. We can also, of course, calculate this test result with the built-in function t.test: t.test( x = x_A, # first vector of data measurements y = x_B, # second vector of data measurements paired = FALSE, # measurements are to be treated as unpaired var.equal = TRUE, # we assume equal variance in both groups mu = 0 # NH is delta = 0 (name &#39;mu&#39; is misleading!) ) ## ## Two Sample t-test ## ## data: x_A and x_B ## t = 105.59, df = 18247, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.4867522 0.5051658 ## sample estimates: ## mean of x mean of y ## 1.653999 1.158040 The result could be reported as follows: We conducted a two-sample \\(t\\)-test of differences of means (unpaired samples, equal variance, unequal sample sizes) to compare the average weekly price of conventionally grown avocados to that of organically grown avocados. The test result indicates a significant difference for the null hypothesis that conventionally grown avocados are not cheaper (\\(N_A = 9123\\), \\(N_B = 9126\\), \\(t \\approx 105.59\\), \\(p \\approx 0\\)). Exercise 16.6: Two-sample \\(t\\)-test Your fellow student is skeptical of her flatmate’s claim that pizzas from place \\(A\\) have a smaller diameter than place \\(B\\) (both pizzerias have just one pizza size, namely \\(\\varnothing\\ 32\\ cm\\)). She decides to test that claim with a two-sample \\(t\\)-test and sets \\(H_0: \\mu_A = \\mu_B\\) (\\(\\delta = 0\\)), \\(H_a: \\mu_A &lt; \\mu_B\\), \\(\\alpha = 0.05\\). She then asks your class to always measure the pizza’s diameter if ordered from one of the two places. At the end of the semester, she has the following table: Pizzeria \\(A\\) Pizzeria \\(B\\) mean 30.9 31.8 standard deviation 2.3 2 sample size 38 44 How many degrees of freedom \\(\\nu\\) are there? Solution \\(\\nu = n_A+n_B-2 = 38+44-2 = 80\\) degrees of freedom. Given the table above, calculate the test statistic \\(t\\). Solution \\[ \\hat{\\sigma}=\\sqrt{\\frac{(n_A-1)\\hat{\\sigma}_A^2+(n_B-1)\\hat{\\sigma}^2_B}{n_A+n_B-2}(\\frac{1}{n_A}+\\frac{1}{n_B})}\\\\ \\hat{\\sigma}=\\sqrt{\\frac{37\\cdot2.3^2+43\\cdot2^2}{80}(\\frac{1}{38}+\\frac{1}{44})}\\approx 0.47\\\\ t=((\\bar{x}_A-\\bar{x}_B)-\\delta)\\cdot\\frac{1}{\\hat{\\sigma}}\\\\ t=\\frac{30.9-31.8}{0.47}\\approx -1.91 \\] Look at this so-called t table and determine the critical value to be exceeded in order to get a statistically significant result. NB: We are looking for the critical value that is on the left side of the distribution. So, in order to have a statistically significant result, the test statistic from b. has to be smaller than the negated critical value in the table. Solution The critical value is -1.664. Compare the test statistic from b. with the critical value from c. and interpret the result. Solution The calculated test statistic from b. is smaller than the critical value. We therefore know that the \\(p\\)-value is statistically significant. The fellow student should reject the null hypothesis of equal pizza diameters. 16.6.4 ANOVA ANOVA is short for “analysis of variance”. It’s an umbrella term for a number of different models centered around testing the influence of one or several categorical predictors on a metric measurement. In previous sections, we have summoned regression models for this task. This is indeed the more modern and preferred approach, especially when the regression modeling also takes random effects (so-called hierarchical modeling) into account. Nonetheless, it is good to have a basic understanding of ANOVAs, as they are featured prominently in a lot of published research papers, whose findings are still relevant. Also, in some areas of empirical science, ANOVAs are still commonly used. Here we are just going to cover the most basic type of ANOVA, which is called a one-way ANOVA. A one-way ANOVA is, in regression jargon, a suitable approach for the case of a single categorical predictor with more than two levels (otherwise a \\(t\\)-test would be enough) and a metric dependent variable. For illustration we will here consider a fictitious case of metric measurement for three groups: A, B, and C. These groups are levels of a categorical predictor group. We want to address the research question of whether the means of the measurements of groups A, B and C could plausibly be identical. The main idea behind analysis of variance is not to look at the means of measurements to be compared, but rather to compare the between-group variances to the within-group variances. Whence the name “analysis of variance”. While mathematically complex, the idea is quite intuitive. Figure 16.21 shows four different (made-up) data sets, each with different measurements for groups A, B and C. It also shows the “pooled data”, i.e., the data from all three groups combined. What is also shown in each panel is the so-called F-statistic, which is a number derived from a sample in the following way. We have \\(k \\ge 2\\) groups of metric observations. For group \\(1 \\le j \\le k\\), there are \\(n_j\\) observations. Let \\(x_{ij}\\) be the observation \\(1 \\le i \\le n_j\\) for group \\(1 \\le j \\le k\\). Let \\(\\bar{x}_j = \\frac{1}{n_j} \\sum_{i = 1}^{n_j} x_{ij}\\) be the mean of group \\(j\\) and let \\(\\bar{\\bar{x}} = \\frac{1}{k} \\sum_{j=1}^k \\frac{1}{n_j} \\sum_{i=1}^{n_j} x_{ij}\\) be the grand mean of all data points. The between-group variance measures how much, on average, the mean of each group deviates from the grand mean of all data points (where distance is squared distance, as usual): \\[ \\hat{\\sigma}_{\\mathrm{between}} = \\frac{\\sum_{j=1}^k n_j (\\bar{x}_j - \\bar{\\bar{x}})^2}{k-1} \\] The within-group variance is a measure of the average variance of the data points inside of each group: \\[ \\hat{\\sigma}_{\\mathrm{within}} = \\frac{\\sum_{j=1}^k \\sum_{i=1}^{n_j} (x_{ij} - \\bar{x}_j)^2}{\\sum_{i=1}^k (n_i - 1)} \\] Now, if the means of different groups are rather different from each other, the between-group variance should be high. But absolute numbers may be misleading, so we need to scale the between-group variance also by how much variance we see, on average, in each group, i.e., the within-group variance. That is why the \\(F\\)-statistic is defined as: \\[ F = \\frac{\\hat{\\sigma}_{\\mathrm{between}}}{\\mathrm{\\hat{\\sigma}_{\\mathrm{within}}}} \\] For illustration, Figure 16.21 shows four different scenarios with associated measures of \\(F\\). Figure 16.21: Different examples of metric measurements for three groups (A, B, C), shown here together with a plot of the combined (= pooled) data. We see that, as the means of measurements go apart, so does the ratio of between-group variance and within-group variance. It can be shown that, under the assumption that the \\(k\\) groups have identical means, the sampling distribution of the \\(F\\) statistic follows an \\(F\\)-distribution with appropriate parameters (which is, unsurprisingly, the distribution constructed for exactly this purpose): \\[ F \\sim F\\mathrm{\\text{-}distribution}\\left(k - 1, \\sum_{i=1}^k (n_i - 1) \\right) \\] The complete frequentist model of a one-way ANOVA is shown in Figure 16.22. Notice that the null hypothesis of equal means is not shown explicitly, but rather only a single mean \\(\\mu\\) is shown, which functions as the mean for all groups. Figure 16.22: Graphical representation of the model underlying a one-way ANOVA. Let’s consider some concrete, but fictitious data for a full example: # fictitious data x_A &lt;- c(78, 43, 60, 60, 60, 50, 57, 58, 64, 64, 56, 62, 66, 53, 59) x_B &lt;- c(52, 53, 51, 49, 64, 60, 45, 50, 55, 65, 76, 62, 62, 45) x_C &lt;- c(78, 66, 74, 57, 75, 64, 64, 53, 63, 60, 79, 68, 68, 47, 63, 67) # number of observations in each group n_A &lt;- length(x_A) n_B &lt;- length(x_B) n_C &lt;- length(x_C) # in tibble form anova_data &lt;- tibble( condition = c( rep(&quot;A&quot;, n_A), rep(&quot;B&quot;, n_B), rep(&quot;C&quot;, n_C) ), value = c(x_A, x_B, x_C) ) Here’s a plot of this data: We want to know whether it is plausible to entertain the idea that the means of these three groups are identical. We can calculate the one-way ANOVA explicitly as follows, following the calculations described in Figure 16.22: # compute grand_mean grand_mean &lt;- anova_data %&gt;% pull(value) %&gt;% mean() # compute degrees of freedom (parameters to F-distribution) df1 &lt;- 2 df2 &lt;- n_A + n_B + n_C - 3 # between-group variance between_group_variance &lt;- 1/df1 * ( n_A * (mean(x_A) - grand_mean)^2 + n_B * (mean(x_B) - grand_mean)^2 + n_C * (mean(x_C) - grand_mean)^2 ) # within-group variance within_group_variance &lt;- 1/df2 * ( sum((x_A - mean(x_A))^2) + sum((x_B - mean(x_B))^2) + sum((x_C - mean(x_C))^2) ) # test statistic of observed data F_observed &lt;- between_group_variance / within_group_variance # retrieving the p-value (using the F-distribution) p_value_anova &lt;- 1 - pf(F_observed, 2, n_A + n_B + n_C - 3) p_value_anova %&gt;% round(4) ## [1] 0.0172 Compare this to the result of calling R’s built-in function aov: aov(formula = value ~ condition, anova_data) %&gt;% summary() ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## condition 2 640.8 320.4 4.485 0.0172 * ## Residuals 42 3000.3 71.4 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 To report these results, we could use a statement like this: Based on a one-way ANOVA, we find evidence against the assumption of equal means across all groups (\\(F(2, 42) \\approx 4.485\\), \\(p \\approx 0.0172\\)). 16.6.5 Linear regression Significance testing for linear regression parameters follows the same logic as for other models as well. In particular, it can be shown that the relevant test statistic for ML-estimates of regression coefficients \\(\\hat\\beta_i\\), under the assumption that the true model has \\(\\beta_i = 0\\), follows a \\(t\\)-distribution. We can run a linear regression model (with a Gaussian noise function) using the built-in function glm (for “generalized linear model”): fit_murder_mle &lt;- glm( formula = murder_rate ~ low_income, data = aida::data_murder ) If we inspect a summary for the model fit, we see the results of a \\(t\\)-test, one for each coefficient, based on the null-hypothesis that this coefficient’s true value is 0. summary(fit_murder_mle) ## ## Call: ## glm(formula = murder_rate ~ low_income, data = aida::data_murder) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -9.1663 -2.5613 -0.9552 2.8887 12.3475 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -29.901 7.789 -3.839 0.0012 ** ## low_income 2.559 0.390 6.562 3.64e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 30.38125) ## ## Null deviance: 1855.20 on 19 degrees of freedom ## Residual deviance: 546.86 on 18 degrees of freedom ## AIC: 128.93 ## ## Number of Fisher Scoring iterations: 2 So, in the case of the murder_data, we would conclude that there is strong evidence against the assumption that the data could have been generated by a model whose slope parameter for low_income is set to 0. 16.6.6 Likelihood-Ratio Test The likelihood-ratio (LR) test is a very popular frequentist method of model comparison. The LR-test assimilates model comparison to frequentist hypothesis testing. It defines a suitable test statistic and supplies an approximation of the sampling distribution. The LR-test first and foremost applies to the comparison of nested models, but there are results about how approximate results can be obtained when comparing non-nested models with an LR-test (Vuong 1989). A frequentist model \\(M_i\\) is nested inside another frequentist model \\(M_j\\) iff \\(M_i\\) can be obtained from \\(M_j\\) by fixing at least one of \\(M_j\\)’s free parameters to a specific value. If \\(M_i\\) is nested under \\(M_j\\), \\(M_i\\) is called the nested model, and \\(M_j\\) is called the nesting model or the encompassing model. Obviously, the nested model is simpler (of lower complexity) than the nesting model. For example, we had the two-parameter exponential model of forgetting previously in Chapter 10: \\[ \\begin{aligned} P(D = \\langle k, N \\rangle \\mid \\langle a, b\\rangle) &amp; = \\text{Binom}(k,N, a \\exp (-bt)), \\ \\ \\ \\ \\text{where } a,b&gt;0 \\end{aligned} \\] We wanted to explain the following “forgetting data”: # time after memorization (in seconds) t &lt;- c(1, 3, 6, 9, 12, 18) # proportion (out of 100) of correct recall y &lt;- c(.94, .77, .40, .26, .24, .16) # number of observed correct recalls (out of 100) obs &lt;- y * 100 An example of a model that is nested under this two-parameter model is the following one-parameter model, which fixes \\(a = 1.1\\). \\[ \\begin{aligned} P(D = \\langle k, N \\rangle \\mid b) &amp; = \\text{Binom}(k,N, 1.1 \\ \\exp (-bt)), \\ \\ \\ \\ \\text{where } b&gt;0 \\end{aligned} \\] Here’s an ML-estimation for the nested nested model (the best fit for the nesting model bestExpo was obtained in Chapter 10): nLL_expo_nested &lt;- function(b) { # calculate predicted recall rates for given parameters theta &lt;- 1.1 * exp(-b * t) # one-param exponential model # avoid edge cases of infinite log-likelihood theta[theta &lt;= 0.0] &lt;- 1.0e-4 theta[theta &gt;= 1.0] &lt;- 1 - 1.0e-4 # return negative log-likelihood of data - sum(dbinom(x = obs, prob = theta, size = 100, log = T)) } bestExpo_nested &lt;- optim( nLL_expo_nested, par = 0.5, method = &quot;Brent&quot;, lower = 0, upper = 20 ) bestExpo_nested ## $par ## [1] 0.1372445 ## ## $value ## [1] 19.21569 ## ## $counts ## function gradient ## NA NA ## ## $convergence ## [1] 0 ## ## $message ## NULL The LR-test looks at the likelihood ratio of the nested model \\(M_0\\) over the encompassing model \\(M_1\\) using the following test statistic: \\[\\text{LR}(M_1, M_0) = -2\\log \\left(\\frac{P_{M_0}(D_\\text{obs} \\mid \\hat{\\theta}_0)}{P_{M_1}(D_\\text{obs} \\mid \\hat{\\theta}_1)}\\right)\\] We can calculate the value of this test statistic for the current example as follows: LR_observed &lt;- 2 * bestExpo_nested$value - 2 * bestExpo$value LR_observed ## [1] 1.098429 If the simpler (nested) model is true, the sampling distribution of this test statistic approximates a \\(\\chi^2\\)-distribution with \\(d\\) if we have more and more data. The degrees of freedom \\(d\\) are given by the difference in free parameters, i.e., the number of parameters the nested model fixes to specific values, but which are free in the nesting model. We can therefore calculate the \\(p\\)-value for the LR-test for our current example like so: p_value_LR_test &lt;- 1 - pchisq(LR_observed, 1) p_value_LR_test ## [1] 0.2946111 The \\(p\\)-value of this test quantifies the evidence against the assumption that the data was generated by the simpler model. A significant test result would therefore indicate that it would be surprising if the data was generated by the simpler model. This is usually taken as evidence in favor of the more complex, nesting model. Given the current \\(p\\)-value \\(p \\approx 0.2946\\), we would conclude that there is no strong evidence against the simpler model. Often this may lead researchers to favor the nested model due to its simplicity; the data at hand does not seem to warrant the added complexity of the nesting model; the nested model seems to suffice. Exercise 16.7 TRUE OR FALSE? The nested model usually has more free parameters than the nesting model. When we perform the LR-test, we initially assume that the nested model is more plausible. An LR-test can only compare the nested model with nesting models. If the LR-test result has a \\(p\\)-value equal to 1.0, one can conclude that it’s a piece of evidence in favor of the simpler model. Solution False True False True References "],["ch-05-02-comparison-freq-Bayes.html", "17 Comparing frequentist and Bayesian statistics", " 17 Comparing frequentist and Bayesian statistics Bayesian methods allow for probability distributions over latent variables, like model parameters or models themselves. Frequentist methods do not. That is the most striking difference between these two approaches to data analysis. At the heart, this difference is one based on conceptual considerations about what we may or may not attach probabilities to. Still, conceptual questions aside, there are also further consequences of this difference. The most obvious is that, usually, Bayesian approaches are more complex to compute or analyze but provide richer information, such as a full distribution rather than just a point- and an interval-estimate. This chapter will explore some of the more or less obvious differences in order to also contribute a better understanding of both approaches in isolation. "],["frequentist-and-bayesian-statistical-models.html", "17.1 Frequentist and Bayesian statistical models", " 17.1 Frequentist and Bayesian statistical models Section 8.1 introduced the notion of a Bayesian statistical model as a pair consisting of a likelihood function \\[ P_M(D_\\text{DV} \\mid D_\\text{IV}, \\theta) \\] and a prior over model parameters \\[ P_M(\\theta)\\,.\\] Normally, the frequentist approach is not model-centric, but rather describes its methods as an arsenal of situation-specific tests. The explicit model-centric explanation of a selection of frequentist tests given in the previous chapter showed that the frequentist models that underlie the computation of \\(p\\)-values eradicate all free model parameters by assigning them a single value in one of two ways: fixing a parameter to the value dictated by the relevant null-hypothesis; or estimating the value of a parameter directly from the data (e.g., the standard deviation in a \\(t\\)-test). Beyond \\(p\\)-values and significance testing, we may say that a frequentist model consists only of a likelihood, assuming -as it were-, but never actually using, a flat prior over any remaining free model parameters. The upshot of this is that, conceptual quibbles about the nature of probability notwithstanding, from a technical point of view frequentist models can be thought of as just special cases of Bayesian models (with parameters either fixed to a single value somehow, or assuming flat priors). Seeing this subsumption relation is insightful because it implies that frequentist concepts like \\(p\\)-value, \\(\\alpha\\)-error or statistical power all directly import into the Bayesian domain (whether they are equally important and useful or not). We will visit, for instance, the notion of a Bayesian \\(p\\)-value later in this chapter. "],["approximation-in-the-model-or-through-the-computation.html", "17.2 Approximation: in the model or through the computation", " 17.2 Approximation: in the model or through the computation Standard frequentist methods often rely on assumptions, e.g., \\(\\chi^2\\)-tests cash in the fact that, given enough data, it is safe to assume a normal distribution for data that is de facto not normally distributed. In this sense, frequentist statistics has approximation built into the models, but often uses clear-cut mathematical analysis to derive results based on these approximation assumptions. Bayesian models, on the other hand, frequently do not make these approximations in their models. But since the posterior inference is hard, if not impossible to solve analytically, the Bayesian approach relies on approximating the Bayesian inference, e.g., via sampling techniques. In this way, the Bayesian approach shifts the approximation into the computation, not the researcher’s assumptions about the data-generating process as such. Notice, however, that Bayesian models can incorporate the same (kind of) approximations the frequentist approach often critically relies on. At the same time, the frequentist approach can rely similarly on numerical approximation of its key quantitative notions. The next section shows an example of this, namely the approximate computation of \\(p\\)-values through Monte Carlo sampling. "],["mc-simulated-p-values.html", "17.3 MC-simulated \\(p\\)-values", " 17.3 MC-simulated \\(p\\)-values Let’s reconsider the 24/7 data set, where we have \\(k=7\\) observations of ‘heads’ in \\(N=24\\) tosses of a coin. # 24/7 data k_obs &lt;- 7 n_obs &lt;- 24 The question of interest is whether the coin is fair, i.e., whether \\(\\theta_c = 0.5\\). R’s built-in function binom.test calculates a binomial test and produces a \\(p\\)-value which is calculated precisely (since this is possible and cheap in this case). binom.test(7,24) ## ## Exact binomial test ## ## data: 7 and 24 ## number of successes = 7, number of trials = 24, p-value = 0.06391 ## alternative hypothesis: true probability of success is not equal to 0.5 ## 95 percent confidence interval: ## 0.1261521 0.5109478 ## sample estimates: ## probability of success ## 0.2916667 It is also possible to approximate a \\(p\\)-value by Monte Carlo simulation. Notice that the definition of a \\(p\\)-value repeated here from Section 16.2 is just a statement about the probability that a random variable (from which we can take samples with MC simulation) delivers a value below a fixed threshold: \\[ p\\left(D_{\\text{obs}}\\right) = P\\left(T^{|H_0} \\succeq^{H_{0,a}} t\\left(D_{\\text{obs}}\\right)\\right) % = P(\\mathcal{D}^{|H_0} \\in \\{D \\mid t(D) \\ge t(D_{\\text{obs}})\\}) \\] So here goes: # specify how many Monte Carlo samples to take x_reps &lt;- 500000 # build a vector of likelihoods (= the relevant test statistic) # for hypothetical data observations, which are # sampled based on the assumption that H0 is true lhs &lt;- map_dbl(1:x_reps, function(i) { # hypothetical data assuming H0 is true k_hyp &lt;- rbinom(1, size = n_obs, prob = 0.5) # likelihood of that hypothetical observation dbinom(k_hyp, size = n_obs, prob = 0.5) }) # likelihood (= test statistic) of the observed data lh_obs = dbinom(k_obs, size = n_obs, prob = 0.5) # proportion of samples with a lower or equal likelihood than # the observed data mean(lhs &lt;= lh_obs) %&gt;% show() ## [1] 0.063998 Monte Carlo sampling for \\(p\\)-value approximation is always possible, even for cases where we cannot rely on known simplifying assumptions. "],["bayesian-p-values-model-checking.html", "17.4 Bayesian \\(p\\)-values &amp; model checking", " 17.4 Bayesian \\(p\\)-values &amp; model checking The previous section showed how to approximate a \\(p\\)-value with Monte Carlo sampling. Notice that nothing in this sampling-based approach hinges on the model having no free parameters. Indeed, we can similarly approximate so-called Bayesian predictive \\(p\\)-values. Bayesian predictive \\(p\\)-values have a good role to play in Bayesian data analysis: they are one possible tool for model checking a.k.a. model criticism. Suppose we have a Bayesian model for the binomial 24/7 data. The model consists of the usual likelihood function, but also has a prior (maybe from previous research, or maybe obtained from training the model on a training data set): \\[ \\theta_c \\sim \\text{Beta}(11,2) \\] Notice that this is a biased prior, placing more weight on the idea that the coin is biased towards heads. In model checking we ask whether the given model could be a plausible model for some data at hand. We are not comparing models, we just “check” or “test” (!) the model as such. Acing the test doesn’t mean that there could not be much better models. Failing the test doesn’t mean that we know of a better model (we may just have to do more thinking). Let’s approximate a Bayesian predictive \\(p\\)-value for this Bayesian model and the 24/7 data. The calculations are analogous to those in the previous section. # 24/7 data k_obs &lt;- 7 n_obs &lt;- 24 # specify how many Monte Carlo samples to take x_reps &lt;- 500000 # build a vector of likelihoods (= the relevant test statistic) # for hypothetical data observations, which are # sampled based on the assumption that the # Bayesian model to be tested is true lhs &lt;- map_dbl(1:x_reps, function(i) { # hypothetical data assuming the model is true # first sample from the prior # then sample from the likelihood theta_hyp &lt;- rbeta(1, 11, 2) k_hyp &lt;- rbinom(1, size = n_obs, prob = theta_hyp) # likelihood of that hypothetical observation dbinom(k_hyp, size = n_obs, prob = theta_hyp) }) # likelihood (= test statistic) of the observed data # determined using MC sampling lh_obs = map_dbl(1:x_reps, function(i){ theta_hyp &lt;- rbeta(1, 11, 2) dbinom(k_obs, size = n_obs, prob = theta_hyp) }) %&gt;% mean() # proportion of samples with a lower or equal likelihood than # the observed data mean(lhs &lt;= lh_obs) %&gt;% show() ## [1] 0.000158 This Bayesian predictive \\(p\\)-value is rather low, suggesting that this model (prior &amp; likelihood) is NOT a good model for the 24/7 data set. We can use Bayesian \\(p\\)-values for any Bayesian model, whether built on a prior or posterior distribution. A common application of Bayesian \\(p\\)-values in model checking are so-called posterior predictive checks. We compute a Bayesian posterior for observed data \\(D_\\text{obs}\\) and then test, via a Bayesian posterior predictive \\(p\\)-value, whether the trained model is actually a good model for \\(D_\\text{obs}\\) itself. If the \\(p\\)-value is high, that’s no cause for hysterical glee. It just means that there is no cause for alarm. If the Bayesian posterior predictive \\(p\\)-value is very low, the posterior predictive test has failed, and that means that the model, even when trained on the data \\(D_\\text{obs}\\), is NOT a good model of that very data. The model must miss something crucial about the data \\(D_\\text{obs}\\). Better start researching what that is and build a better model if possible. Most importantly, these considerations of Bayesian \\(p\\)-values show that frequentist testing has a clear analog in the Bayesian realm, namely as model checking. "],["ch-05-01-estimation-comparison.html", "17.5 Comparing Bayesian and frequentist estimates", " 17.5 Comparing Bayesian and frequentist estimates As discussed in Chapter 9, parameter estimation is traditionally governed by two measures: (i) a point-estimate for the best parameter value, and (ii) an interval-estimate for a range of values that are considered “good enough”. Table 17.1 gives the most salient answers that the Bayesian and the frequentist approaches give. Table 17.1: Common methods of obtaining point-valued and interval-range estimates for parameters, given some data, in frequentist and Bayesian approaches. estimate Bayesian frequentist best value mean of posterior maximum likelihood estimate interval range credible interval (HDI) confidence interval For Bayesians, point-valued and interval-based estimates are just summary statistics to efficiently communicate about or reason with the main thing: the full posterior distribution. For the frequentist, the point-valued and interval-based estimates might be all there is. Computing a full posterior can be very hard. Computing point-estimates is usually much simpler. Yet, all the trouble of having to specify priors, and having to calculate a much more complex mathematical object, can pay off. An example which is intuitive enough is that of a likelihood function in a multi-dimensional parameter space where there is an infinite collection of parameter values that maximize the likelihood function (think of a plateau). Asking a godly oracle for “the” MLE can be disastrously misleading. The full posterior will show the quirkiness. In other words, to find an MLE can be an ill-posed problem where exploring the posterior surface is not. Practical issues aside, there are also conceptual arguments that can be pinned against each other. Suppose you do not know the bias of a coin, you flip it once and it lands heads. The case in mathematical notation: \\(k=1\\), \\(N=1\\). As a frequentist, your “best” estimate of the coin’s bias is that it is 100% rigged: it will never land tails. As a Bayesian, with uninformed priors, your “best” estimate is, following Laplace rule, \\(\\frac{k+1}{N+2} = \\frac{2}{3}\\). Notice that there might be different notions of what counts as “best” in place. Still, the frequentist “best” estimate seems rather extreme. What about interval-ranged estimates? Which is the better tool, confidence intervals or credible intervals? – This is hard to answer. Numerical simulations can help answer these questions.89 The idea is simple but immensely powerful. We simulate, repeatedly, a ground-truth and synthetic results for fictitious experiments, and then we apply the statistical tests/procedures to these fictitious data sets. Since we know the ground-truth, we can check which tests/procedures got it right. Let’s look at a simulation set-up to compare credible intervals to confidence intervals, the latter of which are calculated by asymptotic approximation or the so-called exact method (see the info-box in Section 16.5). To do so, we repeatedly sample a ground-truth (e.g., a known coin bias \\(\\theta_{\\text{true}}\\)) from a flat distribution over \\([0;1]\\).90. We then simulate an experiment in a synthetic world with \\(\\theta_{\\text{true}}\\), using a fixed value of \\(n\\), here taken from the set \\(n \\in \\left \\{ 10, 25, 100, 1000 \\right \\}\\). We then construct a confidence interval (either approximately or precisely) and a 95% credible interval; for each of the three interval estimates. We check whether the ground-truth \\(\\theta_{\\text{true}}\\) is not included in any given interval estimate. We calculate the mean number of times such as non-inclusion (errors!) happen for each kind of interval estimate. The code below implements this and the figure below shows the results based on 10,000 samples of \\(\\theta_{\\text{true}}\\). # how many &quot;true&quot; thetas to sample n_samples &lt;- 10000 # sample a &quot;true&quot; theta theta_true &lt;- runif(n = n_samples) # create data frame to store results in results &lt;- expand.grid( theta_true = theta_true, n_flips = c(10, 25, 100, 1000) ) %&gt;% as_tibble() %&gt;% mutate( outcome = 0, norm_approx = 0, exact = 0, Bayes_HDI = 0 ) for (i in 1:nrow(results)) { # sample fictitious experimental outcome for current true theta results$outcome[i] &lt;- rbinom( n = 1, size = results$n_flips[i], prob = results$theta_true[i] ) # get CI based on asymptotic Gaussian norm_approx_CI &lt;- binom::binom.confint( results$outcome[i], results$n_flips[i], method = &quot;asymptotic&quot; ) results$norm_approx[i] &lt;- !( norm_approx_CI$lower &lt;= results$theta_true[i] &amp;&amp; norm_approx_CI$upper &gt;= results$theta_true[i] ) # get CI based on exact method exact_CI &lt;- binom::binom.confint( results$outcome[i], results$n_flips[i], method = &quot;exact&quot; ) results$exact[i] &lt;- !( exact_CI$lower &lt;= results$theta_true[i] &amp;&amp; exact_CI$upper &gt;= results$theta_true[i] ) # get 95% HDI (flat priors) Bayes_HDI &lt;- binom::binom.bayes( results$outcome[i], results$n_flips[i], type = &quot;highest&quot;, prior.shape1 = 1, prior.shape2 = 1 ) results$Bayes_HDI[i] &lt;- !( Bayes_HDI$lower &lt;= results$theta_true[i] &amp;&amp; Bayes_HDI$upper &gt;= results$theta_true[i] ) } results %&gt;% gather(key = &quot;method&quot;, &quot;Type_1&quot;, norm_approx, exact, Bayes_HDI) %&gt;% group_by(method, n_flips) %&gt;% dplyr::summarize(avg_type_1 = mean(Type_1)) %&gt;% ungroup() %&gt;% mutate( method = factor( method, ordered = T, levels = c(&quot;norm_approx&quot;, &quot;Bayes_HDI&quot;, &quot;exact&quot;) ) ) %&gt;% ggplot(aes(x = as.factor(n_flips), y = avg_type_1, color = method)) + geom_point(size = 3) + geom_line(aes(group = method), size = 1.3) + xlab(&quot;number of flips per experiment&quot;) + ylab(&quot;proportion of exclusions of true theta&quot;) These results show a few interesting things. For one, looking at the error-level of the exact confidence intervals, we see that the \\(\\alpha\\)-level of frequentist statistics is an upper bound on the amount of error. For a discrete sample space, the actual error rate can be substantially lower. Second, the approximate method for computing confidence intervals is off unless the sample size warrants the approximation. This stresses the importance of caring about when an approximation underlying a frequentist test is (not) warranted. Thirdly, the Bayesian credible interval has a “perfect match” to the assumed \\(\\alpha\\)-level for all sample sizes. However, we must take into account that the simulation assumes that the Bayesian analysis “knows the true prior”. We have actually sampled the latent parameter \\(\\theta\\) from a uniform distribution; and we have used a flat prior for the Bayesian calculations. Obviously, the more the prior divergences from the true distribution, and the fewer data observations we have, the more errors will the Bayesian approach make. Exercise 9.5 Pick the correct answer: The most frequently used point-estimate of Bayesian parameter estimation looks at… …the median of the posterior distribution. …the maximum likelihood estimate. …the mean of the posterior distribution. …the normalizing constant in Bayes rule. Solution Statement c. is correct. The most frequently used interval-based estimate in frequentist approaches is… …the support of the likelihood distribution. …the confidence interval. …the hypothesis interval. …the 95% highest-density interval of the maximum likelihood estimate. Solution Statement b. is correct. Even where the math seems daunting, simulation methods are much more tangible, applicable and sometimes require only basic programming experience.↩ This is already not innocuous. We are fixing, as it were, an assumption about how likely ground-truths should actually occur in the real world.↩ "],["beliefs-decisions-and-long-term-error.html", "17.6 Beliefs, decisions and long-term error", " 17.6 Beliefs, decisions and long-term error Bayesianism is about beliefs, frequentism is about action choices (at least in the post-Fisherian, Neyman-Pearson and modern NHST variant). Bayesians can layer a decision procedure on top of the inferred probabilities, but they do not have to. The Neyman-Pearson variant of frequentism, on the other hand, is inseparably tied to a choice criterion, thereby aiming to provide the long-term error control that motivates this approach. If Bayesian approaches adopt a fixed decision routine, like Kruschke’s ternary decision rules outlined in Chapter 11, they can be subjected to considerations of long-term error control. It can then even make sense to perform power calculations similar to those in the frequentist approach (usually: simulation based). "],["evidence-for-the-null.html", "17.7 Evidence for the null", " 17.7 Evidence for the null Frequentist analyses in the style of Neyman-Pearson do allow for a categorical decision to “accept the null-hypothesis”. This requires specification of a (point-valued) alternative hypothesis and it requires sufficient statistical power (see Section 16.4). Nonetheless, this approach still relies on using a \\(p\\)-value derived from the assumption that the null-hypothesis is true. This is still a measure of testing whether the null-model is a plausible model of the data. The frequentist approach does not offer a direct and intuitively interpretable measure of evidence in favor of the null-hypothesis. Arguably, the most straightforward measure of evidence in favor of the null-hypothesis involves assigning some relative probability to it. This can only be achieved under a Bayesian approach. For example, using model comparison, a Bayesian approach to testing a null-hypothesis is able to conclude that there is evidence in favor of the null-hypothesis (when compared against some alternative) without this necessarily being tight to (i) a point-valued alternative hypothesis or (ii) a binary decision in favor of the null-hypothesis. "],["Chap-05-02-models-three-pillars.html", "17.8 Three pillars of data analysis", " 17.8 Three pillars of data analysis There are three main uses for models in statistical data analysis: Parameter estimation: Based on model \\(M\\) and data \\(D\\), we try to infer which value of the parameter vector \\(\\theta\\) we should believe in or work with (e.g., base our decision on). Parameter estimation can also serve knowledge gain, especially if (some component of) \\(\\theta\\) is theoretically interesting. Model comparison: If we formulate at least two alternative models, we can ask which model better explains or better predicts some data. In some of its guises, model comparison helps with the question of whether a given data set provides evidence in favor of one model and against another other, and if so, how much. Prediction: Models can also be used to make predictions about future or hypothetical data observations. The frequentist and the Bayesian approach each have their specific methods and techniques to do estimation, comparison, and prediction. Even within each approach (frequentist or Bayesian) and a particular goal (estimation, comparison, or prediction) there is not necessarily unanimity about the best method or technique. Table 17.2 lists the most common/salient methods used for each goal in the frequentist and Bayesian approach, as discussed in the previous chapters. Table 17.2: Most common/salient methods of frequentist and Bayesian approaches for the three major goals of model-based data analysis. The abbreviations used are: MLE for ‘maximum likelihood estimate’, AIC for ‘Akaike information criterion’, LR-test for ‘likelihood-ratio test’ and \\(D_{rep}\\) for ‘repeat data’. inferential goal target frequentist Bayesian estimation \\(\\theta\\) MLE: \\(\\hat{\\theta} = \\arg \\max_{\\theta} P_M(D \\mid \\theta)\\) posterior: \\(P_M(\\theta \\mid D)\\) comparison \\(M\\) AIC, LR-test Bayes factor prediction \\(D\\) MLE-based: \\(P_M(D_{rep} \\mid \\hat{\\theta})\\) Posterior-based: \\(P_M(D_{rep} \\mid D)\\) The three pillars of data analysis mentioned above are tightly related, of course. For one, model comparison is often parasitic on prediction: whereas prediction asks which data is to be expected, given the model, model comparison looks at how well a given data set is or would have been predicted by different models. For another, parameter estimation and data predictions are something like each others’ reverse operations. "],["testing-hypotheses-by-estimation-comparison-model-checking.html", "17.9 Testing hypotheses by estimation, comparison &amp; model checking", " 17.9 Testing hypotheses by estimation, comparison &amp; model checking Each of the “three pillars of data analysis” discussed in the previous section can be used to test a statistical hypothesis. This is where we see a further difference between Bayesian and frequentist approaches. Bayesian hypothesis testing uses either parameter estimation or model comparison (e.g., Bayes factors), as discussed extensively in Chapter 11. Frequentist hypothesis testing in terms of \\(p\\)-values is based on the third pillar “prediction”. To see this, recall that \\(p\\)-values are derived from the assumption that the point-valued null hypothesis is true. We then ask: based on a model which assumes that the null-hypothesis is true, would we be surprised by the data we observed?; which is the same as asking: would we have predicted the data we actually saw? Seeing this difference also explains why sometimes frequentist and Bayesian approaches give different results when testing the same null-hypothesis based on the same observed data. The next section discusses such a case. "],["jeffreys-lindley-paradox.html", "17.10 Jeffreys-Lindley paradox", " 17.10 Jeffreys-Lindley paradox Often, Bayesian and frequentist methods yield qualitatively similar results. But sometimes results diverge. A prominent case of divergence is known as the Savage-Lindley paradox. The case is not really a “paradox” in a strict sense. It’s a case where predictions are clearly divergent, and it raises attention for the differences between frequentist and Bayesian testing of point-valued null hypotheses. Let’s take the following data. k = 49581 N = 98451 The point-valued null hypothesis is whether the binomial rate is unbiased, so \\(\\theta_c = 0.5\\). binom.test(k, N)$p.value ## [1] 0.02364686 Based on the standard \\(\\alpha\\)-level of \\(0.05\\), frequentism thus prescribes to reject \\(H_0\\). In contrast, using the Savage-Dickey method to compute the Bayes factor, we find strong support in favor of \\(H_0\\). dbeta(0.5, k + 1, N - k + 1) ## [1] 19.21139 The reason why these methods give different results is because they are conceptually completely different things. There is no genuine paradox. Frequentist testing is a form of model checking. The question addressed by the frequentist hypothesis test is whether a model that assumes that \\(\\theta_c = 0.5\\) is such that, if we assume that this model is true, the data above appears surprising. The Bayesian method used above hinges on the comparison of two models. The question addressed by the Bayesian comparison-based hypothesis test is which of two models better predicts the observed data from an ex ante point of view (i.e., before having seen the data): the first model assumes that \\(\\theta_c = 0.5\\) and the second model assumes that \\(\\theta_c \\sim \\text{Beta}(1,1)\\). For a large \\(N\\), like in the example at hand, it can be the case that \\(\\theta_c = 0.5\\) is a bad explanation for the data, so that a model-checking test rejects this null hypothesis. At the same time, the alternative model with \\(\\theta_c \\sim \\text{Beta}(1,1)\\) is even worse than the model \\(\\theta_c = 0.5\\), because it puts credence on many values for \\(\\theta_c\\) that are very, very bad predictors of the data. None of these considerations lend themselves to a principled argument for or against frequentism or Bayesianism. The lesson to be learned is that these different approaches ask different questions (about models and data). The agile data analyst will diligently check each concrete research context for which method is most conducive to gaining the insights relevant for the given purpose. "],["explicit-beliefs-vs-implicit-intentions.html", "17.11 Explicit beliefs vs. implicit intentions", " 17.11 Explicit beliefs vs. implicit intentions The main objection against Bayesianism which motivated and still drives the frequentist program is that Bayesian priors are subjective, and therefore to be regarded as less scientific than hard objectively justifiable ingredients, such as likelihood functions. A modern Bayesian riposte bites the bullet, chews it well, and spits it back. While priors are subjective, they are at least explicit. They are completely out in the open and, if the data is available, predictions for any other set of prior assumptions can simply be tested. A debate about which “subjective priors” to choose is “objectively” possible. In contrast, the frequentist notion of a \\(p\\)-value (and with it the confidence interval) relies on something even more mystic, namely the researcher’s intentions during the data collection, something that is not even in principle openly scrutinizable after the fact. To see how central frequentist notions rely on implicit intentions and counterfactual assumptions about data we could have seen but didn’t, let’s consider an example (see also Wagenmakers (2007) and Kruschke (2015) for discussion). The example is based on the 24/7 data again. This time, we are going to look at two cases. Stop at \\(N=24\\): The researchers decided in advance to collect \\(N=24\\) data points. They found \\(k=7\\) heads in this experiment. Stop at \\(k=7\\): The researchers decided to flip their coin until they observed \\(k=7\\) heads. It took them \\(N=24\\) tosses in their experiment. The research question is, as usual, whether \\(\\theta_c = 0.5\\). A common intuition is to say: why would the manner of data collection matter? Data is data. We base our inference on data. We don’t base our inference on how the data was obtained. Right? - Wrong if you are a frequentist. The manner of data collection dictates what other possible observations of the experiment are. These in turn matter for computing \\(p\\)-values. For the “Stop at \\(N=24\\)” case, the likelihood function is what we used before, the Binomial distribution: \\[ \\text{Binomial}(k ; n = 24, \\theta = 0.5) = {{N}\\choose{k}} \\theta^{k} \\, (1-\\theta)^{n-k} \\] We therefore obtain the \\(p\\)-value-based result that the null hypothesis cannot be rejected (at \\(\\alpha = 0.05\\)). But when we look at the “Stop at \\(k=7\\)” case, we need a different likelihood function. In principle, we might have had to flip the coin for more than \\(N=24\\) times until receiving \\(k=7\\) heads. The likelihood function needed for this case is the negative Binomial distribution: \\[ \\text{neg-Binomial}(n ; k = 7, \\theta = 0.5) = \\frac{k}{n} \\choose{n}{k} \\theta^{k} \\, (1-\\theta)^{n - k}\\] The resulting sampling distribution and the \\(p\\)-value we obtain for it are shown in the plot below. So, with the exact same data but different assumptions about how this data was generated, we get a different \\(p\\)-value; indeed, a difference that spans the significance boundary of \\(\\alpha = 0.05\\). The researcher’s intentions about how to collect data influence the statistical analysis. Dependence on researcher intentions is worse than dependence on subjective priors, because it is impossible to verify ex post what the precise data-generating protocol was. Wait! Doesn’t Bayesian inference have this problem? No, it doesn’t. The difference in likelihood functions used above is a different normalizing constant. The normalizing constant cancels out in parameter estimation, and also in model-comparison (if we assume that both models compared use the same likelihood function).91 The case of model comparison is obvious. To see that normalizing constants cancel out for parameter estimation, consider this: \\[ \\begin{align*} P(\\theta \\mid D) &amp; = \\frac{P(\\theta) \\ P(D \\mid \\theta)}{\\int_{\\theta&#39;} P(\\theta&#39;) \\ P(D \\mid \\theta&#39;)} \\\\ &amp; = \\frac{ \\frac{1}{X} \\ P(\\theta) \\ P(D \\mid \\theta)}{ \\ \\frac{1}{X}\\ \\int_{\\theta&#39;} P(\\theta&#39;) \\ P(D \\mid \\theta&#39;)} \\\\ &amp; = \\frac{P(\\theta) \\ \\frac{1}{X}\\ P(D \\mid \\theta)}{ \\int_{\\theta&#39;} P(\\theta&#39;) \\ \\frac{1}{X}\\ P(D \\mid \\theta&#39;)} \\end{align*} \\] References "],["app-90-further-material.html", "A Further useful material ", " A Further useful material "],["material-on-introduction-to-probability.html", "A.1 Material on Introduction to Probability:", " A.1 Material on Introduction to Probability: “Introduction to Probability” by J.K. Blitzstein and J. Hwang (Blitzstein and Hwang 2014) “Probability Theory: The Logic of Science” by E.T. Jaynes (Jaynes 2003) References "],["material-on-bayesian-data-analysis.html", "A.2 Material on Bayesian Data Analysis:", " A.2 Material on Bayesian Data Analysis: “Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan” by J. Kruschke (Kruschke 2015) “Bayesian Data Analysis” by A. Gelman et al. (Gelman et al. 2014) “Statistical Rethinking: A Bayesian Course with Examples in R and Stan” by R. McElreath (McElreath 2015) webbook based on McElreath’s book: Statistical Rethinking with brms, ggplot2, and the tidyverse by Solomon Kurz References "],["material-on-frequentist-statistics.html", "A.3 Material on frequentist statistics:", " A.3 Material on frequentist statistics: “Statistics for Linguists: An introduction using R”, by B. Winter (Winter 2019) References "],["material-on-r-tidyverse-etc-.html", "A.4 Material on R, tidyverse, etc.:", " A.4 Material on R, tidyverse, etc.: official R manual: An Introduction to R “R for Data Science: Import, Tidy, Transform, Visualize, and Model Data” by H. Wickham and G. Grolemund (Wickham and Grolemund 2016) RStudio’s Cheat Sheets “Data Visualization” by K. Healy (Healy 2018) webbook Learning Statistics with R by Danielle Navarro webbook with focus on visualization: Data Science for Psychologists by Hansjörg Neth References "],["further-information-for-rstudio.html", "A.5 Further information for RStudio", " A.5 Further information for RStudio Keyboard shortcuts for Windows and Mac in RStudio: “Tools -&gt; Keyboard Shortcuts Help” or also on the RStudio support site "],["further-information-on-webppl.html", "A.6 Further information on WebPPL", " A.6 Further information on WebPPL WebPPL (pronounced “web people”) is a probabilistic programming language embedded in JavaScript. Unlike JavaScript, WebPPL does not support looping constructs (such as for or while). Instead, it encourages a functional way of programming, using recursion and higher-order functions. Please refer to this tutorial for examples and further explanations. A.6.1 Primitives and sampling functions We can use WebPPL to (easily) sample from probability distributions, many of which are already implemented and ready to use. A full list of built-in primitive distributions can be found in the documentation. If we would like to draw one sample from, say, a standard normal distribution, we could run sample(Gaussian({mu: 0, sigma: 1})). A more convenient expression would be to just use the respective sampling function, in this case gaussian({mu: 0, sigma: 1}) (notice the lowercase letter in the function name). Sampling functions can be combined with the repeat() function to take more than one sample, ultimately leading to better approximations. Let’s look at a simple example to see how repeated sampling from a primitive distribution works. In the code box below, we take \\(1000\\) samples from a beta distribution with parameters \\(\\alpha = 4\\) and \\(\\beta = 6\\) and visualize them (more on this below). viz(repeat(1000, function() {beta({a: 4, b: 6})})); A.6.2 Inference with Infer() We might also want to create our own distribution objects (= probability distributions). For this purpose, the built-in function Infer() comes in pretty handy. It takes as input a function with no arguments and returns a distribution object. The function passed to Infer() is the sampling function that should be turned into a distribution object. Additionally, Infer() can take on another optional argument, namely the method for performing inference. If this argument is not specified, WebPPL will automatically choose a reasonable method for inference. More on this function and different methods here. Here’s an example of how to perform inference using the MCMC method. The example is one of a logistic regression (based on very little data) and the model returns samples from the posterior predictive distribution for a previously unseen data point. Click on the yellowish box to check what the code does and how Infer() is used. Please re-visit Chapter 9.3.1 for more information on MCMC algorithms. // training data var xs = [-10, -5, 2, 6, 10] var labels = [false, false, true, true, true] // new data point to predict a label for var x_new = 1 ///fold: var model = function() { // priors of regression parameters var beta_1 = gaussian(0, 1) var beta_0 = gaussian(0, 1) var sigmoid = function(x) { return 1 / (1 + Math.exp(-1 * (beta_1 * x + beta_0))) } map2( function(x, label) { factor(Bernoulli({p: sigmoid(x)}).score(label)) }, xs, labels) return bernoulli(sigmoid(x_new)) } viz.auto(Infer({method: 'MCMC', samples: 10000, burn: 2000}, model)) /// A.6.3 Visualization WebPPL comes with a major benefit in that it makes plotting as easy as pie. All we have to do is basically wrap the viz() function of the viz-package around our data, and depending on the nature of the data (continuous or discrete), WebPPL will automatically come up with a visualization of it. Of course, we can also explicitly tell WebPPL how we want our data to be plotted. Much like in ggplot, we just add the (abbreviated) plotting method to the function name. An explicit way of plotting a histogram, for instance, would be to call viz.hist(). The supported methods for data visualization are documented here. In the example below, the data stored in variable xs is plotted once with the default viz() function and once with the explicit viz.hist() function. What do you notice with regard to the output? var xs = [-2, -1, 1, 2, 3, 4, 4, 5]; viz(xs); viz.hist(xs); A.6.4 Installation You can run WebPPL code directly from within the editor on webppl.org. If you want to install WebPPL locally, follow the steps below: Install git. Install Node.js. Run npm install -g webppl in your command line. Run npm update -g webppl to update your current version of WebPPL. These steps are also mentioned in the documentation. A.6.5 Usage Run WebPPL programs locally with webppl FILE_NAME.wppl. A.6.6 Keyboard shortcuts (for in-browser use) Press Ctrl + Enter to run code. Select code and press the Tab key to fix indentations. Press Ctrl + / to comment or uncomment code (apparently, this shortcut only works with an English keyboard). A.6.7 Further resources official website documentation short introduction tutorial Bayesian Data Analysis using Probabilistic Programs: Statistics as pottery by webbook on BDA with WebPPL by MH Tessler "],["app-91-distributions.html", "B Common probability distributions", " B Common probability distributions This chapter summarizes common probability distributions that occur at central places in this book. "],["selected-continuous-distributions-of-random-variables.html", "B.1 Selected continuous distributions of random variables", " B.1 Selected continuous distributions of random variables B.1.1 Normal distribution One of the most important distribution families is the Gaussian or normal family because it fits many natural phenomena. Furthermore, the sampling distributions of many estimators depend on the normal distribution either because they are derived from normally distributed random variables or because they can be asymptotically approximated by a normal distribution for large samples (Central limit theorem). Distributions of the normal family are symmetric with range \\((-\\infty,+\\infty)\\) and have two parameters \\(\\mu\\) and \\(\\sigma\\), respectively referred to as the mean and the standard deviation of the normal random variable. These parameters are examples of location and scale parameters. The normal distribution is located at \\(\\mu\\), and the choice of \\(\\sigma\\) scales its width. The distribution is symmetric, with most observations lying around the central peak \\(\\mu\\) and more extreme values being further away depending on \\(\\sigma\\). \\[X \\sim Normal(\\mu,\\sigma) \\ \\ \\text{, or alternatively written as: } \\ \\ X \\sim \\mathcal{N}(\\mu,\\sigma) \\] Figure B.1 shows the probability density function of three normally distributed random variables with different parameters. Figure B.2 shows the corresponding cumulative function of the three normal distributions. Figure B.1: Examples of a probability density function of the normal distribution. Numbers in legend represent parameter pairs \\((\\mu, \\sigma)\\). Figure B.2: The cumulative distribution functions of the normal distributions corresponding to the previous probability density functions. Probability density function \\[f(x)=\\frac{1}{\\sigma\\sqrt{2\\pi}}\\exp\\left(-0.5\\left(\\frac{x-\\mu}{\\sigma}\\right)^2\\right)\\] Cumulative distribution function \\[F(x)=\\int_{-\\inf}^{x}f(t)dt\\] Expected value \\(E(X)=\\mu\\) Variance \\(Var(X)=\\sigma^2\\) Deviation and Coverage The normal distribution is often associated with the 68-95-99.7 rule. The values refer to the probability of a random data point landing within one, two or three standard deviations of the mean (Figure B.3 depicts these three intervals). For example, about 68% of the values drawn from a normal distribution are within one standard deviation \\(\\sigma\\) away from the mean \\(\\mu\\). \\(P(\\mu-\\sigma \\leq X \\leq \\mu+\\sigma) = 0.6827\\) \\(P(\\mu-2\\sigma \\leq X \\leq \\mu+2\\sigma) = 0.9545\\) \\(P(\\mu-3\\sigma \\leq X \\leq \\mu+3\\sigma) = 0.9973\\) Figure B.3: The coverage of a normal distribution. Z-transformation / standardization A special case of normally distributed random variables is the standard normal distributed variable with \\(\\mu=0\\) and \\(\\sigma=1\\): \\(Y\\sim Normal(0,1)\\). Each normal distribution \\(X\\) can be converted into a standard normal distribution \\(Z\\) by z-transformation (see equation below): \\[Z=\\frac{X-\\mu}{\\sigma}\\] The advantage of standardization is that values from different scales can be compared because they become scale-independent by z-transformation. Alternative parameterization Often a normal distribution is parameterized in terms of its mean \\(\\mu\\) and variance \\(\\sigma^2\\). This is clear, from writing \\(X\\sim Normal(\\mu, \\sigma^2)\\), instead of \\(X\\sim Normal(\\mu, \\sigma)\\). Linear transformations If normal random variable \\(X\\sim Normal(\\mu, \\sigma^2)\\) is linearly transformed by \\(Y=a*X+b\\), then the new random variable \\(Y\\) is again normally distributed with \\(Y \\sim Normal(a\\mu+b,a^2\\sigma^2)\\). Are \\(X\\sim Normal(\\mu_x, \\sigma^2)\\) and \\(Y\\sim Normal(\\mu_y, \\sigma^2)\\) normally distributed and independent, then their sum is again normally distributed with \\(X+Y \\sim Normal(\\mu_x+\\mu_y, \\sigma_x^2+\\sigma_y^2)\\). B.1.1.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a normal distribution: var mu = 2; // mean var sigma = 3; // standard deviation var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {gaussian({mu: mu, sigma: sigma})})); /// B.1.2 Chi-squared distribution The \\(\\chi^2\\)-distribution is widely used in hypothesis testing in inferential statistics because many test statistics are approximately distributed as \\(\\chi^2\\)-distribution. The \\(\\chi^2\\)-distribution is directly related to the standard normal distribution: The sum of the squares of \\(n\\) independent and standard normally distributed random variables \\(X_1,X_2,...,X_n\\) is distributed according to a \\(\\chi^2\\)-distribution with \\(n\\) degrees of freedom: \\[Y=X_1^2+X_2^2+...+X_n^2.\\] The \\(\\chi^2\\)-distribution is a skewed probability distribution with range \\([0,+\\infty)\\) and only one parameter \\(n\\), the degrees of freedom (if \\(n=1\\), then the range is \\((0,+\\infty)\\)): \\[X\\sim \\chi^2(n).\\] Figure B.4 shows the probability density function of three \\(\\chi^2\\)-distributed random variables with different values for the parameter. Notice that with increasing degrees of freedom, the \\(\\chi^2\\)-distribution can be approximated by a normal distribution (for \\(n \\geq 30\\)). Figure B.5 shows the corresponding cumulative function of the three \\(\\chi^2\\)-density distributions. Figure B.4: Examples of a probability density function of the chi-squared distribution. Figure B.5: The cumulative distribution functions of the chi-squared distributions corresponding to the previous probability density functions. Probability density function \\[f(x)=\\begin{cases}\\frac{x^{\\frac{n}{2}-1}e^{-\\frac{x}{2}}}{2^{\\frac{n}{2}}\\Gamma (\\frac{n}{2})} &amp;\\textrm{ for }x&gt;0,\\\\ 0 &amp;\\textrm{ otherwise.}\\end{cases}\\] where \\(\\Gamma (\\frac{n}{2})\\) denotes the gamma function. Cumulative distribution function \\[F(x)=\\frac{\\gamma (\\frac{n}{2},\\frac{x}{2})}{\\Gamma \\frac{n}{2}},\\] with \\(\\gamma(s,t)\\) being the lower incomplete gamma function: \\[\\gamma(s,t)=\\int_0^t t^{s-1}e^{-t} dt.\\] Expected value \\(E(X)=n\\) Variance \\(Var(X)=2n\\) Transformations The sum of two \\(\\chi^2\\)-distributed random variables \\(X \\sim \\chi^2(m)\\) and \\(Y \\sim \\chi^2(n)\\) is again a \\(\\chi^2\\)-distributed random variable with \\(X+Y=\\chi^2(m+n)\\). B.1.2.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a \\(\\chi^2\\)-distribution: var df = 1; // degrees of freedom var n_samples = 30000; // number of samples used for approximation ///fold: var chisq = function(nu) { var y = sample(Gaussian({mu: 0, sigma: 1})); if (nu == 1) { return y*y; } else { return y*y+chisq(nu-1); } } viz(repeat(n_samples, function(x) {chisq(df)})); /// B.1.3 F-distribution The F-distribution, named after R.A. Fisher, is particularly used in regression and variance analysis. It is defined by the ratio of two \\(\\chi^2\\)-distributed random variables \\(X\\sim \\chi^2(m)\\) and \\(Y\\sim \\chi^2(n)\\), each divided by its degrees of freedom: \\[F=\\frac{\\frac{X}{m}}{\\frac{Y}{n}}.\\] The F-distribution is a continuous skewed probability distribution with range \\((0,+\\infty)\\) and two parameters \\(m\\) and \\(n\\), corresponding to the degrees of freedom of the two \\(\\chi^2\\)-distributed random variables: \\[X \\sim F(m,n).\\] Figure B.6 shows the probability density function of three F-distributed random variables with different parameter values. For a small number of degrees of freedom, the density distribution is skewed to the left side. When the number increases, the density distribution gets more and more symmetric. Figure B.7 shows the corresponding cumulative function of the three density distributions. Figure B.6: Examples of a probability density function of the F-distribution. Pairs of numbers in the legend are parameters \\((m,n)\\). Figure B.7: The cumulative distribution functions of the F-distributions corresponding to the previous probability density functions. Probability density function \\[F(x)=m^{\\frac{m}{2}}n^{\\frac{n}{2}} \\cdot \\frac{\\Gamma (\\frac{m+n}{2})}{\\Gamma (\\frac{m}{2})\\Gamma (\\frac{n}{2})} \\cdot \\frac{x^{\\frac{m}{2}-1}}{(mx+n)^{\\frac{m+n}{2}}} \\textrm{ for } x&gt;0,\\] where \\(\\Gamma(x)\\) denotes the gamma function. Cumulative distribution function \\[F(x)=I\\left(\\frac{m \\cdot x}{m \\cdot x+n},\\frac{m}{2},\\frac{n}{2}\\right),\\] with \\(I(z,a,b)\\) being the regularized incomplete beta function: \\[I(z,a,b)=\\frac{1}{B(a,b)} \\cdot \\int_0^z t^{a-1}(1-t)^{b-1} dt.\\] Expected value \\(E(X) = \\frac{n}{n-2}\\) (for \\(n \\geq 3\\)) Variance \\(Var(X) = \\frac{2n^2(n+m-2)}{m(n-4)(n-2)^2}\\) (for \\(n \\geq 5\\)) B.1.3.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on an F-distribution: var df1 = 12; // degrees of freedom 1 var df2 = 12; // degrees of freedom 2 var n_samples = 30000; // number of samples used for approximation ///fold: var chisq = function(nu) { var y = sample(Gaussian({mu: 0, sigma: 1})); if (nu == 1) { return y*y; } else { return y*y+chisq(nu-1); } } var F = function(nu1, nu2) { var X = chisq(nu1)/nu1; var Y = chisq(nu2)/nu2; return X/Y; } viz(repeat(n_samples, function(x) {F(df1, df2)})); /// B.1.4 Student’s t-distribution The Student’s \\(t\\)-distribution, or just \\(t\\)-distribution for short, was discovered by William S. Gosset in 1908 (Vallverdú 2016), who published his work under the pseudonym “Student”. He worked at the Guinness factory and had to deal with the problem of small sample sizes, where using a normal distribution as an approximation can be too crude. To overcome this problem, Gosset conceived of the \\(t\\)-distribution. Accordingly, this distribution is used in particular when the sample size is small and the variance unknown, which is often the case in reality. Its shape resembles the normal bell shape and has a peak at zero, but the \\(t\\)-distribution is a bit lower and wider (bigger tails) than the normal distribution. The standard \\(t\\)-distribution consists of a standard-normally distributed random variable \\(X \\sim \\text{Normal}(0,1)\\) and a \\(\\chi^2\\)-distributed random variable \\(Y \\sim \\chi^2(n)\\) (\\(X\\) and \\(Y\\) are independent): \\[T = \\frac{X}{\\sqrt{Y / n}}.\\] The \\(t\\)-distribution has the range \\((-\\infty,+\\infty)\\) and one parameter \\(\\nu\\), the degrees of freedom. The degrees of freedom can be calculated by the sample size \\(n\\) minus one: \\[t \\sim \\text{Student-}t(\\nu = n -1).\\] Figure B.8 shows the probability density function of three \\(t\\)-distributed random variables with different parameters, and Figure B.9 shows the corresponding cumulative functions. Notice that for small degrees of freedom \\(\\nu\\), the \\(t\\)-distribution has bigger tails. This is because the \\(t\\)-distribution was specially designed to provide more conservative test results when analyzing small samples. When the degrees of freedom increase, the \\(t\\)-distribution approaches a normal distribution. For \\(\\nu \\geq 30\\), this approximation is quite good. Figure B.8: Examples of a probability density function of the \\(t\\)-distribution. Figure B.9: The cumulative distribution functions of the \\(t\\)-distributions corresponding to the previous probability density functions. Probability density function \\[ f(x, \\nu)=\\frac{\\Gamma(\\frac{\\nu+1}{2})}{\\sqrt{\\nu\\pi} \\cdot \\Gamma(\\frac{\\nu}{2})}\\left(1+\\frac{x^2}{\\nu}\\right)^{-\\frac{\\nu+1}{2}},\\] with \\(\\Gamma(x)\\) denoting the gamma function. Cumulative distribution function \\[F(x, \\nu)=I\\left(\\frac{x+\\sqrt{x^2+\\nu}}{2\\sqrt{x^2+\\nu}},\\frac{\\nu}{2},\\frac{\\nu}{2}\\right),\\] where \\(I(z,a,b)\\) denotes the regularized incomplete beta function: \\[I(z,a,b)=\\frac{1}{B(a,b)} \\cdot \\int_0^z t^{a-1}(1-t)^{b-1} \\text{d}t.\\] Expected value \\(E(X) = 0\\) Variance \\(Var(X) = \\frac{n}{n-2}\\) (for \\(n \\geq 30\\)) B.1.4.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a \\(t\\)-distribution: var df = 3; // degrees of freedom var n_samples = 30000; // number of samples used for approximation ///fold: var chisq = function(nu) { var y = sample(Gaussian({mu: 0, sigma: 1})); if (nu == 1) { return y*y; } else { return y*y+chisq(nu-1); } } var t = function(nu) { var X = sample(Gaussian({mu: 0, sigma: 1})); var Y = chisq(nu); return X/Math.sqrt(Y/nu); } viz(repeat(n_samples, function(x) {t(df)})); /// Beyond the standard \\(t\\)-distribution there are also generalized \\(t\\)-distributions taking three parameters \\(\\nu\\), \\(\\mu\\) and \\(\\sigma\\), where the latter two are just the mean and the standard deviations, similar to the case of the normal distribution. B.1.5 Beta distribution The beta distribution creates a continuous distribution of numbers between 0 and 1. Therefore, this distribution is useful if the uncertain quantity is bounded by 0 and 1 (or 100%), is continuous, and has a single mode. In Bayesian Data Analysis, the beta distribution has a special standing as prior distribution for a Bernoulli or binomial likelihood. The reason for this is that a combination of a beta prior and a Bernoulli (or binomial) likelihood results in a posterior distribution with the same form as the beta distribution. Such priors are referred to as conjugate priors (see Chapter 9.1.3). A beta distribution has two parameters \\(a\\) and \\(b\\) (sometimes also represented in Greek letters \\(\\alpha\\) and \\(\\beta\\)): \\[X \\sim Beta(a,b).\\] The two parameters can be interpreted as the number of observations made, such that: \\(n=a+b\\). If \\(a\\) and \\(b\\) get bigger, the beta distribution gets narrower. If only \\(a\\) gets bigger, the distribution moves rightward, and if only \\(b\\) gets bigger, the distribution moves leftward. As the parameters define the shape of the distribution, they are also called shape parameters. A Beta(1,1) is equivalent to a uniform distribution. Figure B.10 shows the probability density function of four beta distributed random variables with different parameter values. Figure B.11 shows the corresponding cumulative functions. Figure B.10: Examples of a probability density function of the beta distribution. Pairs of numbers in the legend represent parameters \\((a, b)\\). Figure B.11: The cumulative distribution functions of the beta distributions corresponding to the previous probability density functions. Probability density function \\[f(x)=\\frac{\\theta^{(a-1)} (1-\\theta)^{(b-1)}}{B(a,b)},\\] where \\(B(a,b)\\) is the beta function: \\[B(a,b)=\\int^1_0 \\theta^{(a-1)} (1-\\theta)^{(b-1)}d\\theta.\\] Cumulative distribution function \\[F(x)=\\frac{B(x;a,b)}{B(a,b)},\\] where \\(B(x;a,b)\\) is the incomplete beta function: \\[B(x;a,b)=\\int^x_0 t^{(a-1)} (1-t)^{(b-1)} dt,\\] and \\(B(a,b)\\) the (complete) beta function: \\[B(a,b)=\\int^1_0 \\theta^{(a-1)} (1-\\theta)^{(b-1)}d\\theta.\\] Expected value Mean: \\(E(X)=\\frac{a}{a+b}\\) Mode: \\(\\omega=\\frac{(a-1)}{a+b-2}\\) Variance Variance: \\(Var(X)=\\frac{ab}{(a+b)^2(a+b+1)}\\) Concentration: \\(\\kappa=a+b\\) (related to variance such that the bigger \\(a\\) and \\(b\\) are, the narrower the distribution) Reparameterization of the beta distribution Sometimes it is helpful (and more intuitive) to write the beta distribution in terms of its mode \\(\\omega\\) and concentration \\(\\kappa\\) instead of \\(a\\) and \\(b\\): \\[Beta(a,b)=Beta(\\omega(\\kappa-2)+1, (1-\\omega)(\\kappa-2)+1), \\textrm{ for } \\kappa &gt; 2.\\] B.1.5.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a beta distribution: var a = 2; // shape parameter alpha var b = 4; // shape parameter beta var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {beta({a: a, b: b})})); /// B.1.6 Uniform distribution The (continuous) uniform distribution takes values within a specified range \\(a\\) and \\(b\\) that have constant probability. Due to its shape, the distribution is also sometimes called rectangular distribution. The uniform distribution is common for random number generation. In Bayesian Data Analysis, it is often used as prior distribution to express ignorance. This can be thought of in the following way: When different events are possible, but no (reliable) information exists about their probability of occurrence, the most conservative (and also intuitive) choice would be to assign probability in such a way that all events are equally likely to occur. The uniform distribution models this intuition and generates a completely random number in some interval \\([a,b]\\). The distribution is specified by two parameters: the endpoints \\(a\\) (minimum) and \\(b\\) (maximum). \\[X \\sim Uniform(a,b) \\ \\ \\text{or alternativelly written as: } \\ \\ \\mathcal{U}(a,b)\\] When \\(a=0\\) and \\(b=1\\), the distribution is referred to as standard uniform distribution. Figure B.12 shows the probability density function of two uniformly distributed random variables with different parameter values. Figure B.13 shows the corresponding cumulative functions. Figure B.12: Examples of a probability density function of the uniform distribution. Pairs of numbers in the legend are parameter values \\((a,b)\\). Figure B.13: The cumulative distribution functions of the uniform distributions corresponding to the previous probability density functions. Probability density function \\[f(x)=\\begin{cases} \\frac{1}{b-a} &amp;\\textrm{ for } x \\in [a,b],\\\\0 &amp;\\textrm{ otherwise.}\\end{cases}\\] Cumulative distribution function \\[F(x)=\\begin{cases}0 &amp; \\textrm{ for } x&lt;a,\\\\\\frac{x-a}{b-a} &amp;\\textrm{ for } a\\leq x &lt; b,\\\\ 1 &amp;\\textrm{ for }x \\geq b. \\end{cases}\\] Expected value \\(E(X)=\\frac{a+b}{2}\\) Variance \\(Var(X)=\\frac{(b-a)^2}{12}\\) B.1.6.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a uniform distribution: var a = 0; // lower bound var b = 1; // upper bound (> a) var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {uniform({a: a, b: b})})); /// B.1.7 Dirichlet distribution The Dirichlet distribution is a multivariate generalization of the beta distribution: While the beta distribution is a distribution over binomials, the Dirichlet is a distribution over multinomials. It can be used in any situation where an entity has to necessarily fall into one of \\(n+1\\) mutually exclusive subclasses, and the goal is to study the proportion of entities belonging to the different subclasses. The Dirichlet distribution is commonly used as prior distribution in Bayesian statistics, as this family is a conjugate prior for the categorical distribution and the multinomial distribution. The Dirichlet distribution \\(\\mathcal{Dir}(\\alpha)\\) is a family of continuous multivariate probability distributions, parameterized by a vector \\(\\alpha\\) of positive reals. Thus, it is a distribution with \\(k\\) positive parameters \\(\\alpha^k\\) with respect to a \\(k\\)-dimensional space. \\[X \\sim \\mathcal{Dirichlet}(\\boldsymbol{\\alpha})\\] The probability density function (see formula below) of the Dirichlet distribution for \\(k\\) random variables is a \\(k-1\\) dimensional probability simplex that exists on a \\(k\\)-dimensional space. How does the parameter \\(\\alpha\\) influence the Dirichlet distribution? Values of \\(\\alpha_i&lt;1\\) can be thought of as anti-weight that pushes away \\(x_i\\) toward extremes (see upper left panel of Figure B.14). If \\(\\alpha_1=...=\\alpha_k=1\\), then the points are uniformly distributed (see upper right panel). Higher values of \\(\\alpha_i\\) lead to greater “weight” of \\(X_i\\) and a greater amount of the total “mass” assigned to it (see lower left panel). If all \\(\\alpha_i\\) are equal, the distribution is symmetric (see lower right panel for an asymmetric distribution). Figure B.14: Examples of a probability density function of the Dirichlet distribution with dimension \\(k\\) for different parameter vectors \\(\\alpha\\). Probability density function \\[f(x)=\\frac{\\Gamma\\left(\\sum_{i=1}^{n+1} \\alpha_i\\right)}{\\prod_{i=1}^{n+1}\\Gamma(\\alpha_i)}\\prod_{i=1}^{n+1}p_i^{\\alpha_i-1},\\] with \\(\\Gamma(x)\\) denoting the gamma function and \\[p_i=\\frac{X_i}{\\sum_{j=1}^{n+1}X_j}, 1\\leq i\\leq n,\\] where \\(X_1,X_2,...,X_{n+1}\\) are independent gamma random variables with \\(X_i \\sim Gamma(\\alpha_i,1)\\). Expected value \\(E(p_i)=\\frac{\\alpha_i}{t}, \\textrm{ with } t=\\sum_{i=1}^{n+1}\\alpha_i\\) Variance \\(Var(p_i)=\\frac{\\alpha_i(t-\\alpha_i)}{t^2(t+1)}, \\textrm{ with } t=\\sum_{i=1}^{n+1}\\alpha_i\\) B.1.7.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a Dirichlet distribution: var alpha = Vector([1, 1, 5]); // concentration parameter var n_samples = 1000; // number of samples used for approximation ///fold: var model = function() { var dir_sample = dirichlet({alpha: alpha}) return({\"x_1\" : dir_sample.data[\"0\"], \"x_2\" : dir_sample.data[\"1\"]}) } viz(Infer({method : \"rejection\", samples: n_samples}, model)) /// References "],["selected-discrete-distributions-of-random-variables.html", "B.2 Selected discrete distributions of random variables", " B.2 Selected discrete distributions of random variables B.2.1 Binomial distribution The binomial distribution is a useful model for binary decisions where the outcome is a choice between two alternatives (e.g., Yes/No, Left/Right, Present/Absent, Heads/Tails, …). The two outcomes are coded as \\(0\\) (failure) and \\(1\\) (success). Consequently, let the probability of occurrence of the outcome “success” be \\(p\\), then the probability of occurrence of “failure” is \\(1-p\\). Consider a coin-flip experiment with the outcomes “heads” or “tails”. If we flip a coin repeatedly, e.g., 30 times, the successive trials are independent of each other and the probability \\(p\\) is constant, then the resulting binomial distribution is a discrete random variable with outcomes \\(\\{0,1,2,...,30\\}\\). The binomial distribution has two parameters “size” and “prob”, often denoted as \\(n\\) and \\(p\\), respectively. The “size” parameter refers to the number of trials and “prob” to the probability of success: \\[X \\sim Binomial(n,p).\\] Figure B.15 shows the probability mass function of three binomially distributed random variables with different parameter values. As stated above, \\(p\\) refers to the probability of success. The higher this probability, the more often we will observe the outcome coded with “1”. Therefore, the distribution tends toward the right side and vice-versa. The distribution gets more symmetric if the parameter \\(p\\) approximates 0.5. Figure B.16 shows the corresponding cumulative functions. Figure B.15: Examples of a probability mass function of the binomial distribution. Numbers in the legend are pairs of parameters \\((n, p)\\). Figure B.16: The cumulative distribution functions of the binomial distributions corresponding to the previous probability mass functions. Probability mass function \\[f(x)=\\binom{n}{x}p^x(1-p)^{n-x},\\] where \\(\\binom{n}{x}\\) is the binomial coefficient. Cumulative function \\[F(x)=\\sum_{k=0}^{x}\\binom{n}{k}p^k(1-p)^{n-k}\\] Expected value \\(E(X)=n \\cdot p\\) Variance \\(Var(X)=n \\cdot p \\cdot (1-p)\\) B.2.1.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a binomial distribution: var p = 0.5; // probability of success var n = 4; // number of trials (>= 1) var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {binomial({p: p, n: n})})); /// B.2.2 Multinomial distribution The multinomial distribution is a generalization of the binomial distribution to the case of \\(n\\) repeated trials: While the binomial distribution can have two outcomes, the multinomial distribution can have multiple outcomes. Consider an experiment where each trial can result in any of \\(k\\) possible outcomes with a probability \\(p_i\\), where \\(i=1,2,...,k\\), with \\(\\sum_{i=1}^kp_i=1\\). For \\(n\\) repeated trials, let \\(k_i\\) denote the number of times \\(X=x_i\\) was observed, where \\(i=1,2,...,m\\). It follows that \\(\\sum_{i=1}^m k_i=n\\). Probability mass function The probability of observing a vector of outcomes \\(\\mathbf{k}=[k_1,...,k_m]^T\\) is \\[f(\\mathbf{k}|\\mathbf{p})=\\binom{n}{k_1\\cdot k_2 \\cdot...\\cdot k_m} \\prod_{i=1}^m p_i^{k_i},\\] where \\(\\binom{n}{k_1\\cdot k_2 \\cdot...\\cdot k_m}\\) is the multinomial coefficient: \\[\\binom{n}{k_1\\cdot k_2 \\cdot...\\cdot k_m}=\\frac{n!}{k_1!\\cdot k_2! \\cdot...\\cdot k_m!}.\\] It is a generalization of the binomial coefficient \\(\\binom{n}{k}\\). Expected value: \\(E(X)=n\\cdot p_i\\) Variance: \\(Var(X)=n\\cdot p_i\\cdot (1-p_i)\\) B.2.2.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a multinomial distribution: var ps = [0.25, 0.25, 0.25, 0.25]; // probabilities var n = 4; // number of trials (>= 1) var n_samples = 30000; // number of samples used for approximation ///fold: viz.hist(repeat(n_samples, function(x) {multinomial({ps: ps, n: n})})); /// B.2.3 Bernoulli distribution The Bernoulli distribution is a special case of the binomial distribution with \\(size = 1\\). The outcome of a Bernoulli random variable is therefore either 0 or 1. Apart from that, the same information holds as for the binomial distribution. As the “size” parameter is now negligible, the Bernoulli distribution has only one parameter, the probability of success \\(p\\): \\[X \\sim Bern(p).\\] Figure B.17 shows the probability mass function of three Bernoulli distributed random variables with different parameters. Figure B.18 shows the corresponding cumulative distributions. Figure B.17: Examples of a probability mass function of the Bernoulli distribution. Figure B.18: The cumulative distribution functions of the Bernoulli distributions corresponding to the previous probability mass functions. Probability mass function \\[f(x)=\\begin{cases} p &amp;\\textrm{ if } x=1,\\\\ 1-p &amp;\\textrm{ if } x=0.\\end{cases}\\] Cumulative function \\[F(x)=\\begin{cases} 0 &amp;\\textrm{ if } x &lt; 0, \\\\ 1-p &amp;\\textrm{ if } 0 \\leq x &lt;1,\\\\1 &amp;\\textrm{ if } x \\geq 1.\\end{cases}\\] Expected value \\(E(X)=p\\) Variance \\(Var(X)=p \\cdot (1-p)\\) B.2.3.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a Bernoulli distribution: var p = 0.5; // probability of success var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {bernoulli({p: p})})); /// B.2.4 Categorical distribution The categorical distribution is a generalization of the Bernoulli distribution for categorical random variables: While a Bernoulli distribution is a distribution over two alternatives, the categorical is a distribution over multiple alternatives. For a single trial (e.g., a single die roll), the categorical distribution is equal to the multinomial distribution. The categorical distribution is parametrized by the probabilities assigned to each event. Let \\(p_i\\) be the probability assigned to outcome \\(i\\). The set of \\(p_i\\)’s are the parameters, constrained by \\(\\sum_{i=1}^kp_i=1\\). \\[X \\sim Categorical(\\mathbf{p})\\] Figure B.19: Examples of a probability mass function of the categorical distribution. Figure B.20: The cumulative distribution functions of the categorical distributions corresponding to the previous probability mass functions. Probability mass function \\[f(x|\\mathbf{p})=\\prod_{i=1}^kp_i^{\\{x=i\\}},\\] where \\(\\{x=i\\}\\) evaluates to 1 if \\(x=i\\), otherwise 0 and \\(\\mathbf{p}={p_1,...,p_k}\\), where \\(p_i\\) is the probability of seeing event \\(i\\). Expected Value \\(E(\\mathbf{x})=\\mathbf{p}\\) Variance \\(Var(\\mathbf{x})=\\mathbf{p}\\cdot(1-\\mathbf{p})\\) B.2.4.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a categorical distribution: var ps = [0.5, 0.25, 0.25]; // probabilities var vs = [1, 2, 3]; // categories var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {categorical({ps: ps, vs: vs})})); /// B.2.5 Beta-Binomial distribution As the name already indicates, the beta-binomial distribution is a mixture of a binomial and beta distribution. Remember, a binomial distribution is useful to model a binary choice with outcomes “0” and “1”. The binomial distribution has two parameters \\(p\\) and \\(n\\), denoting the probability of success (“1”) and the number of trials, respectively. Furthermore, we assume that the successive trials are independent and \\(p\\) is constant. In a beta-binomial distribution, \\(p\\) is not anymore assumed to be constant (or fixed) but changes from trial to trial. Thus, a further assumption about the distribution of \\(p\\) is made, and here the beta distribution comes into play: the probability \\(p\\) is assumed to be randomly drawn from a beta distribution with parameters \\(a\\) and \\(b\\). Therefore, the beta-binomial distribution has three parameters \\(n\\), \\(a\\) and \\(b\\): \\[X \\sim BetaBinom(n,a,b).\\] For large values of a and b, the distribution approaches a binomial distribution. When \\(a=1\\) and \\(b=1\\), the distribution equals a discrete uniform distribution from 0 to \\(n\\). When \\(n = 1\\), the distribution equals a Bernoulli distribution. Figure B.21 shows the probability mass function of three beta-binomial distributed random variables with different parameter values. Figure B.22 shows the corresponding cumulative distributions. Figure B.21: Examples of a probability mass function of the beta-binomial distribution. Triples of numbers in the legend represent parameter values \\((n,a,b)\\). Figure B.22: The cumulative distribution functions of the beta-binomial distributions corresponding to the previous probability mass functions. Probability mass function \\[f(x)=\\binom{n}{x} \\frac{B(a+x,b+n-x)}{B(a,b)},\\] where \\(\\binom{n}{x}\\) is the binomial coefficient and \\(B(x)\\) is the beta function (see beta distribution). Cumulative function \\[F(x)=\\begin{cases} 0 &amp;\\textrm{ if } x&lt;0,\\\\ \\binom{n}{x} \\frac{B(a+x,b+n-x)}{B(a,b)} {}_3F_2(n,a,b) &amp;\\textrm{ if } 0 \\leq x &lt; n,\\\\ 1 &amp;\\textrm{ if } x \\geq n. \\end{cases}\\] where \\({}_3F_2(n,a,b)\\) is the generalized hypergeometric function. Expected value \\(E(X)=n \\frac{a}{a+b}\\) Variance \\(Var(X)=n \\frac{ab}{(a+b)^2} \\frac{a+b+n}{a+b+1}\\) B.2.5.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a beta-binomial distribution: var a = 1; // shape parameter alpha var b = 1; // shape parameter beta var n = 10; // number of trials (>= 1) var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {binomial({n: n, p: beta(a, b)})})); /// B.2.6 Poisson distribution A Poisson distributed random variable represents the number of events occurring in a given time interval. The Poisson distribution is a limiting case of the binomial distribution when the number of trials becomes very large and the probability of success is small (e.g., the number of car accidents in Osnabrueck in the next month, the number of typing errors on a page, the number of interruptions generated by a CPU during T seconds, etc.). Events described by a Poisson distribution must fulfill the following conditions: they occur in non-overlapping intervals, they do not occur simultaneously, and each event occurs at a constant rate. The Poisson distribution has one parameter, the rate \\(\\lambda\\), sometimes also referred to as intensity: \\[X \\sim Poisson(\\lambda).\\] The parameter \\(\\lambda\\) can be thought of as the expected number of events in the time interval. Consequently, changing the rate parameter changes the probability of seeing different numbers of events in one interval. Figure B.23 shows the probability mass function of three Poisson distributed random variables with different parameter values. Notice that the higher \\(\\lambda\\), the more symmetrical the distribution gets. In fact, the Poisson distribution can be approximated by a normal distribution for a rate parameter of \\(\\geq\\) 10. Figure B.24 shows the corresponding cumulative distributions. Figure B.23: Examples of a probability mass function of the Poisson distribution. Figure B.24: The cumulative distribution functions of the Poisson distributions corresponding to the previous probability mass functions. Probability mass function \\[f(x)=\\frac{\\lambda^x}{x!}e^{-\\lambda}\\] Cumulative function \\[F(x)=\\sum_{k=0}^{x}\\frac{\\lambda^k}{k!}e^{-\\lambda}\\] Expected value \\(E(X)= \\lambda\\) Variance \\(Var(X)=\\lambda\\) B.2.6.1 Hands-on Here’s WebPPL code to explore the effect of different parameter values on a Poisson distribution: var lambda = 5; // rate parameter var n_samples = 30000; // number of samples used for approximation ///fold: viz(repeat(n_samples, function(x) {poisson({mu: lambda})})); /// "],["app-92-exponential-family.html", "C Exponential Family and Maximum Entropy", " C Exponential Family and Maximum Entropy This chapter deals with the Exponential Family of probability distributions. "],["an-important-family-the-exponential-family.html", "C.1 An important family: The Exponential Family", " C.1 An important family: The Exponential Family The most common distributions used in statistical modeling are members of the exponential family. Among others: Poisson distribution, Bernoulli distribution, Normal distribution, Chi-Square distribution, and of course the Exponential distribution. In the upcoming section, some of these distributions will be described in more detail. But what makes the exponential family so special? On the one hand, distributions of this family have some convenient mathematical properties which make them attractive to use in statistical modeling, e.g., the availability of a conjugate prior for Bayesian analyses. Furthermore, the above example distributions are really just examples. The exponential family encompasses a wide class of distributions which makes it possible to model a large number of cases. On the other hand, the use of distributions from the exponential family is also attractive from a conceptional perspective. For example, suppose that we want to infer a probability distribution subject to certain constraints, such as a coin flip experiment which can have only a dichotomous outcome {0,1} and has a constant probability. Which distribution should be used in order to model this scenario? There are several possible distributions that can be used. According to which criteria should a distribution be selected? Often one attempts a conservative choice, that is to bring as little subjective information into a model as possible. Or in other terms, one goal could be to select the distribution, among all possible distributions, that is maximally ignorant and least biased given the constraints. Consequently, the question arises how “ignorance” can be measured and distributions compared according to their “information content”. This chapter explores these questions based on information-theoretic notions such as “entropy”, and the “Maximum Entropy Principle”. As we will see here, distributions belonging to the exponential family arise as solutions to the maximum entropy problem subject to linear constraints. "],["the-maximum-entropy-principle.html", "C.2 The Maximum Entropy Principle", " C.2 The Maximum Entropy Principle C.2.1 Information Entropy Entropy is a measure of information content of an outcome of \\(X\\). A less probable outcome conveys more information than more probable ones. Thus, entropy can be stated as a measure of uncertainty. When the goal is to find a distribution that is as ignorant as possible, then, consequently, entropy should be maximal. Formally, entropy is defined as follows: If \\(X\\) is a discrete random variable with distribution \\(P(X=x_i)=p_i\\), then the entropy of \\(X\\) is \\[H(X)=-\\sum_{i} p_i \\log p_i.\\] If \\(X\\) is a continuous random variable with probability density \\(p(x)\\) then the differential entropy of \\(X\\) is \\[H(X)=-\\int_{-\\infty}^{+\\infty} p(x) \\log p(x) dx.\\] From which considerations is this entropy definition derived? There exist various approaches that finally come to the same answer: the above-stated definition of entropy. However, the most cited derivation is Shannon’s theorem. Another and perhaps more intuitive derivation is Wallis’ derivation. Jaynes (2003) describes both approaches in detail. The following provides a short insight into both derivations and is taken from Jaynes (2003). C.2.1.1 Shannon’s theorem Shannon’s approach starts by stating conditions that a measure of the amount of uncertainty \\(H_n\\) has to satisfy. It is possible to set up some kind of association between the amount of uncertainty and real numbers. \\(H_n\\) is a continuous function of \\(p_i\\). Otherwise, an arbitrarily small change in the probability distribution would lead to a big change in the amount of uncertainty. \\(H_n\\) should correspond to common sense in that, when there are many possibilities, we are more uncertain than when there are a few. This condition has the effect that in case the \\(p_i\\) are all equal, the quantity \\(h(n)\\) is a monotonic increasing function of \\(n\\). \\(H_n\\) is consistent in that, when there is more than one way of working out its value, we must get the same answer. Under these assumptions, the resulting unique measure of uncertainty of a probability distribution \\(p\\) turns out to be just the average log-probability: \\[H(p)=-\\sum_i p_i \\log(p_i).\\] Accepting this interpretation of entropy, it follows that the distribution \\((p_1,...,p_n)\\) which maximizes the above equation, subject to constraints imposed by the available information, will represent the most honest description of what the model knows about the propositions \\((A_1,...,A_n)\\). The function \\(H\\) is called the entropy, or the information entropy of the distribution \\(\\{p_i\\}\\). C.2.1.2 The Wallis derivation A second and perhaps more intuitive approach to deriving entropy was suggested by G. Wallis. We are given information \\(I\\), which is to be used in assigning probabilities \\(\\{p_1,...,p_m\\}\\) to \\(m\\) different probabilities. We have a total amount of probability \\[\\sum_{i=1}^{m} p_i =1\\] to allocate among them. The problem can be stated as follows. Choose some integer \\(n&gt;&gt;m\\), and imagine that we have \\(n\\) little quanta of probabilities, each of magnitude \\(\\delta=\\frac{1}{n}\\), to distribute in a way we see fit. Suppose we were to scatter these quanta at random among the \\(m\\) choices (penny-pitch game into \\(m\\) equal boxes). If we simply toss these quanta of probability at random, so that each box has an equal probability of getting them, nobody can claim that any box is being unfairly favored over any other. If we do this and the first box receives exactly \\(n_1\\) quanta, the second \\(n_2\\) quanta etc., we will say the random experiment has generated the probability assignment: \\[p_i=n_i\\delta=\\frac{n_i}{n}, \\textrm{ with } i=1,2,...,m.\\] The probability that this will happen is the multinomial distribution: \\[m^{-n} \\frac{n!}{n_1!\\cdot...\\cdot n_m!}.\\] Now imagine that we repeatedly scatter the \\(n\\) quanta at random among the \\(m\\) boxes. Each time we do this we examine the resulting probability assignment. If it happens to conform to the information \\(I\\), we accept it; otherwise, we reject it and try again. We continue until some probability assignment \\(\\{p_1,...,p_m\\}\\) is accepted. What is the most likely probability distribution to result from this game? It is the one which maximizes \\[W=\\frac{n!}{n_1! \\cdot ... \\cdot n_m!}\\] subject to whatever constraints are imposed by the information \\(I\\). We can refine this procedure by using smaller quanta, i.e., large \\(n\\). By using Stirling’s approximation \\[n!\\sim \\sqrt{(2\\pi n)} \\left(\\frac{n}{e}\\right)^n,\\] and taking the logarithm from it \\[\\log(n!) \\sim \\sqrt{(2\\pi n)}+n\\log\\left(\\frac{n}{e}\\right),\\] we have \\[\\log(n!) \\sim \\sqrt{(2\\pi n)}+n\\log(n) - n.\\] Taking furthermore, also the logarithm from \\(W\\) and substituting \\(\\log(n!)\\) by Stirling’s approximation, finally gives the definition of information entropy, as derived by Shannon’s theorem: \\[\\frac{1}{n} \\log(W) \\rightarrow -\\sum_{i=1}^{m}p_i\\log(p_i)=H(p_1,...,p_m).\\] To sum it up: Entropy is a measure of uncertainty. The higher the entropy of a random variable \\(X\\), the more uncertainty it incorporates. When the goal is to find a maximal ignorance distribution, this goal can be consequently translated into a maximization problem: Find the distribution with maximal entropy subject to existing constraints. This will be the topic of the next section. C.2.2 Deriving Probability Distributions using the Maximum Entropy Principle The maximum entropy principle is a means of deriving probability distributions given certain constraints and the assumption of maximizing entropy. One technique for solving this maximization problem is the Lagrange multiplier technique. C.2.2.1 Lagrangian multiplier technique Given a multivariable function \\(f(x,y,...)\\) and constraints of the form \\(g(x,y,...)=c\\), where \\(g\\) is another multivariable function with the same input space as \\(f\\) and \\(c\\) is a constant: In order to minimize (or maximize) the function \\(f\\) consider the following steps, assuming \\(f\\) to be \\(f(x)\\): Introduce a new variable \\(\\lambda\\), called Lagrange multiplier, and define a new function \\(\\mathcal{L}\\) with the form: \\[\\mathcal{L}(x,\\lambda)=f(x)+\\lambda (g(x)-c).\\] Set the derivative of the function \\(\\mathcal{L}\\) equal to zero: \\[\\mathcal{L&#39;}(x,\\lambda)=0,\\] in order to find the critical points of \\(\\mathcal{L}\\). Consider each resulting solution within the limits of the made constraints and derive the resulting distribution \\(f\\), which gives the minimum (or maximum) one is searching for. For more details, see Academy (2019) C.2.2.2 Example 1: Derivation of maximum entropy pdf with no other constraints For more details, see Finlayson (2017) and Keng (2017) Suppose a random variable for which we have absolutely no information on its probability distribution, besides the fact that it should be a pdf and thus, integrate to 1. We ask for the following: What type of probability density distribution gives maximum entropy when the random variable is bounded by a finite interval, say \\(a\\leq X \\leq b\\)? (Reza 1994) We assume that the maximum ignorance distribution is the one with maximum entropy. It minimizes the prior information in a distribution and is therefore the most conservative choice. For the continuous case entropy, the measure of uncertainty, is defined as \\[H(x)=-\\int_{a}^{b}p(x) \\log(p(x))dx,\\] with subject to the mentioned constraint that the sum of all probabilities is one (as it is a pdf): \\[\\int_{a}^{b}p(x)dx =1.\\] Rewriting this into the form of a Lagrangian equation gives \\[\\mathcal{L}=-\\int_{a}^{b}p(x) \\log(p(x))dx + \\lambda \\left(\\int_{a}^{b}p(x)dx-1 \\right).\\] The next step is to minimize the Lagrangian function. To solve this, we have to use the calculus of variations (Keng 2017). First differentiating \\(\\mathcal{L}\\) with respect to \\(p(x)\\): \\[\\frac{\\partial \\mathcal{L}}{\\partial p(x)}=0,\\] \\[-1-\\log(p(x))+\\lambda=0,\\] \\[p(x)=e^{(\\lambda-1)}.\\] Second, the result of \\(p(x)\\) has to satisfy the stated constraint: \\[\\int_{a}^{b} p(x)dx=1,\\] \\[\\int_{a}^{b} e^{1-\\lambda} dx=1.\\] Solving this equation with respect to \\(\\lambda\\) gives: \\[\\lambda=1-\\log\\left(\\frac{1}{b-a}\\right).\\] Taking both solutions together, we get the following probability density function: \\[p(x)=e^{(1-\\lambda)}=e^{\\left(1-\\left(1-\\log\\left(\\frac{1}{b-a}\\right)\\right)\\right)},\\] \\[p(x)= \\frac{1}{b-a}.\\] And this is the uniform distribution on the interval \\([a,b]\\). The answer to the above question is: The maximum entropy distribution is associated with a random variable that is distributed as a uniform probability density distribution between \\(a\\) and \\(b\\). This should not be too unexpected. It is quite intuitive that a uniform distribution is the maximal ignorance distribution (when no other constraints were made). The next example will be more exciting. C.2.2.3 Example 2: Derivation of maximum entropy pdf with given mean \\(\\mu\\) and variance \\(\\sigma^2\\) Suppose a random variable \\(X\\) with a preassigned standard deviation \\(\\sigma\\) and mean \\(\\mu\\). Again the question is: Which function \\(p(x)\\) gives the maximum of the entropy \\(H(x)\\)? The Maximum Entropy is defined for the current case as \\[H(X)=-\\int_{-\\infty}^{\\infty} p(x) \\log p(x)dx,\\] is subject to the constraint that it should be a pdf \\[\\int_{-\\infty}^{\\infty} p(x)dx = 1,\\] and that \\(\\mu\\) and \\(\\sigma\\) are given (whereby only one constrained is needed, as the \\(\\mu\\) is already included in the definition of \\(\\sigma\\)): \\[\\int_{-\\infty}^{\\infty}(x-\\mu)^2 p(x) dx = \\sigma^2.\\] Accordingly to the above mentioned technique the formulas are summarized in form of the Lagrangian equation: \\[\\mathcal{L}= -\\int_{-\\infty}^{\\infty} p(x) \\log p(x)dx + \\lambda_0\\left(\\int_{-\\infty}^{\\infty} p(x)dx - 1 \\right) + \\lambda_1\\left(\\int_{-\\infty}^{\\infty}(x-\\mu)^2 p(x) dx - \\sigma^2 \\right).\\] Next, \\(\\mathcal{L}\\) will be partially differentiated with respect to \\(p(x)\\): \\[\\frac{\\partial \\mathcal{L}}{\\partial p(x)}=0,\\] \\[-(1+\\log p(x))+\\lambda_0+\\lambda_1 (x-\\mu)^2=0,\\] \\[p(x)=e^{\\lambda_0+\\lambda_1 (x-\\mu)^2-1}.\\] Further, we have to make sure that the result holds for the stated constraints: \\[\\int_{-\\infty}^{\\infty} e^{\\lambda_0+\\lambda_1 (x-\\mu)^2-1}-1 dx = 1,\\] and \\[\\int_{-\\infty}^{\\infty}(x-\\mu)^2 e^{\\lambda_0+\\lambda_1 (x-\\mu)^2-1} dx = \\sigma^2.\\] For the first constraint, we get \\[e^{\\lambda_0-1} \\sqrt{-\\frac{\\pi}{\\lambda_1}} = 1,\\] and for the second constraint \\[e^{\\lambda_0-1} = \\sqrt{\\frac{1}{2\\pi}} \\frac{1}{\\sigma},\\] Thus, \\[\\lambda_1=\\frac{-1}{2\\sigma^2}.\\] Taking all together, we can write: \\[p(x)=e^{\\lambda_0+\\lambda_1 (x-\\mu)^2-1}=e^{\\lambda_0-1}e^{\\lambda_1 (x-\\mu)^2},\\] substituting the solutions for \\(e^{\\lambda_0-1}\\) and \\(\\lambda_1\\): \\[p(x)= \\sqrt{\\frac{1}{2\\pi}} \\frac{1}{\\sigma} e^{\\frac{-1}{2\\sigma^2}(x-\\mu)^2},\\] finally we can rearrange the terms a bit and get: \\[p(x)= \\frac{1}{\\sigma\\sqrt{2\\pi}}\\exp{\\left(\\frac{-1}{2}\\left(\\frac{(x-\\mu)^2}{\\sigma^2}\\right)\\right)},\\] the Gaussian probability density distribution. To sum it up: If one is to infer a probability distribution given certain constraints, out of all distributions \\(\\{p_i\\}\\) compatible with them, one should pick the distribution \\(\\{p_i^*\\}\\) having the largest value of \\(H\\) (De Martino and De Martino 2018). In other terms, a Maximum Entropy distribution is completely undetermined by features that do not appear explicitly in the constraints subject to which it has been computed. An overview of Maximum Entropy distributions can be found on Wikipedia. References "],["app-93-data-sets.html", "D Data sets used in the book", " D Data sets used in the book Several data sets are used throughout the book as ‘running examples’. They occur in different places to illustrate different things. This chapter centrally describes each data set, together with the most important visualizations. "],["app-93-data-sets-mental-chronometry.html", "D.1 Mental Chronometry", " D.1 Mental Chronometry D.1.1 Nature, origin and rationale of the data Franciscus Donders is remembered as one of, if not the first experimental cognitive psychologists. He famously introduced the subtraction logic which looks at differences in reaction times across different tasks to infer the difference in the complexity of the mental processes involved in these tasks. The Mental Chronometry data set presents the results of an online replication of one such subtraction-experiment. D.1.1.1 The experiment Fifty participants were recruited using the crowd-sourcing platform Prolific and paid for their participation. In each experimental trial, participants see either a blue square or a blue circle appear on the screen and are asked to respond as quickly as possible. The experiment consists of three parts, presented to all participants in the same order (see below). The parts differ in the adequate response to the visual stimuli. Reaction task The participant presses the space bar whenever there is a stimulus (square or circle). Recorded: reaction time Go/No-Go task The participant presses the space bar whenever their target (one of the two stimuli) is on the screen. Recorded: the reaction time and the response Discrimination task The participant presses the F key on the keyboard when there is one of the stimuli and the J key when there is the other one of the stimuli on the screen. Recorded: the reaction time and the response The reaction time measurement starts from the onset of the visual stimuli to the button press. The response variable records whether the reaction was correct or incorrect. For each participant, the experiment randomly allocates one shape (circle or square) as the target to be used in both the second and the third task. The experiment was realized using _magpie and can be tried out here. D.1.1.2 Theoretical motivation &amp; hypotheses We expect that reaction times of correct responses are lowest in the reaction task, higher in the Go/No-Go task, and highest in the discrimination task. D.1.2 Loading and preprocessing the data The raw data produced by the online experiment is not particularly tidy. It needs substantial massages before plotting and analysis. mc_data_raw &lt;- aida::data_MC_raw glimpse(mc_data_raw) ## Rows: 3,750 ## Columns: 32 ## $ submission_id &lt;dbl&gt; 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8… ## $ QUD &lt;chr&gt; &quot;Press SPACE when you see a shape on the screen&quot;, &quot;Pres… ## $ RT &lt;dbl&gt; 376, 311, 329, 270, 284, 311, 269, 317, 325, 240, 262, … ## $ age &lt;dbl&gt; 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,… ## $ comments &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ correctness &lt;chr&gt; &quot;correct&quot;, &quot;correct&quot;, &quot;correct&quot;, &quot;correct&quot;, &quot;correct&quot;, … ## $ education &lt;chr&gt; &quot;high school / college&quot;, &quot;high school / college&quot;, &quot;high… ## $ elemSize &lt;dbl&gt; 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, … ## $ endTime &lt;dbl&gt; 1.570374e+12, 1.570374e+12, 1.570374e+12, 1.570374e+12,… ## $ expected &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ experiment_id &lt;dbl&gt; 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,… ## $ f &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ focalColor &lt;chr&gt; &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;,… ## $ focalNumber &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ focalShape &lt;chr&gt; &quot;square&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;circ… ## $ gender &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;fema… ## $ j &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ key1 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ key2 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ key_pressed &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ languages &lt;chr&gt; &quot;Right&quot;, &quot;Right&quot;, &quot;Right&quot;, &quot;Right&quot;, &quot;Right&quot;, &quot;Right&quot;, &quot;… ## $ pause &lt;dbl&gt; 2631, 1700, 1322, 1787, 1295, 2330, 1620, 2460, 1580, 1… ## $ response &lt;chr&gt; &quot;space&quot;, &quot;space&quot;, &quot;space&quot;, &quot;space&quot;, &quot;space&quot;, &quot;space&quot;, &quot;… ## $ sort &lt;chr&gt; &quot;grid&quot;, &quot;grid&quot;, &quot;grid&quot;, &quot;grid&quot;, &quot;grid&quot;, &quot;grid&quot;, &quot;grid&quot;,… ## $ startDate &lt;chr&gt; &quot;Sun Oct 06 2019 15:45:19 GMT+0100 (Hora de verão da Eu… ## $ startTime &lt;dbl&gt; 1.570373e+12, 1.570373e+12, 1.570373e+12, 1.570373e+12,… ## $ stimulus &lt;chr&gt; &quot;square&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;circ… ## $ target &lt;chr&gt; &quot;square&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;circ… ## $ timeSpent &lt;dbl&gt; 7.2514, 7.2514, 7.2514, 7.2514, 7.2514, 7.2514, 7.2514,… ## $ total &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ trial_number &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ trial_type &lt;chr&gt; &quot;reaction_practice&quot;, &quot;reaction_practice&quot;, &quot;reaction_pra… The most pressing problem is that entries in the column trial_type contain two logically separate pieces of information: the block (reaction, go/no-go, discrimination) and whether the data comes from a practice trial (which we want to discard) or a main trial (which we want to analyze). We therefore separate this information, and perform some other massages, to finally select a preprocessed data set for further analysis: block_levels &lt;- c(&quot;reaction&quot;, &quot;goNoGo&quot;, &quot;discrimination&quot;) # ordering of blocks for plotting, etc. mc_data_preprocessed &lt;- mc_data_raw %&gt;% separate(trial_type, c(&quot;block&quot;, &quot;stage&quot;), sep = &quot;_&quot;, remove = FALSE) %&gt;% mutate(comments = ifelse(is.na(comments), &quot;non given&quot;, comments)) %&gt;% filter(stage == &quot;main&quot;) %&gt;% mutate( block = factor(block, ordered = T, levels = block_levels), response = ifelse(is.na(response), &quot;none&quot;, response) ) %&gt;% filter(response != &quot;wait&quot;) %&gt;% rename( handedness = languages, # variable name is simply wrong total_time_spent = timeSpent ) %&gt;% select( submission_id, trial_number, block, stimulus, RT, handedness, gender, total_time_spent, comments ) D.1.3 Cleaning the data Remember that the criteria for data exclusion should ideally be defined before data collection (or at least inspection). They should definitely never be chosen in such a way as to maximize the “desirability” of an analysis. Data cleaning is not a way of making sure that your favorite research hypothesis “wins”. Although we have not preregistered any data cleaning regime or analyses for this data set, we demonstrate a frequently used cleaning scheme for reaction time data, which does depend on the data in some sense, but does not require precise knowledge of the data. In particular, we are going to do this: We remove the data from an individual participant \\(X\\) if there is an experimental condition \\(C\\) such that the mean RT of \\(X\\) for condition \\(C\\) is more than 2 standard deviations away from the overall mean RT for condition \\(C\\). From the remaining data, we then remove any individual trial \\(Y\\) if the RT of \\(Y\\) is more than 2 standard deviations away from the mean of experimental condition \\(C\\) (where \\(C\\) is the condition of \\(Y\\), of course). Notice that in the case at hand, the experimental conditions are the three types of tasks. D.1.3.1 Cleaning by-participant Our rule for removing data from outlier participants is this: We remove the data from an individual participant \\(X\\) if there is an experimental condition \\(C\\) such that the mean RT of \\(X\\) for condition \\(C\\) is more than 2 standard deviations away from the overall mean RT for condition \\(C\\). We also remove all trials with reaction times below 100ms. This procedure is implemented in this code: # summary stats (means) for participants d_sum_stats_participants &lt;- mc_data_preprocessed %&gt;% group_by(submission_id, block) %&gt;% summarise( mean_P = mean(RT) ) # summary stats (means and SDs) for conditions d_sum_stats_conditions &lt;- mc_data_preprocessed %&gt;% group_by(block) %&gt;% summarise( mean_C = mean(RT), sd_C = sd(RT) ) d_sum_stats_participants &lt;- full_join( d_sum_stats_participants, d_sum_stats_conditions, by = &quot;block&quot; ) %&gt;% mutate( outlier_P = abs(mean_P - mean_C) &gt; 2 * sd_C ) # show outlier participants d_sum_stats_participants %&gt;% filter(outlier_P == 1) %&gt;% show() ## # A tibble: 1 x 6 ## # Groups: submission_id [1] ## submission_id block mean_P mean_C sd_C outlier_P ## &lt;dbl&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 8505 discrimination 1078. 518. 185. TRUE When plotting the data for this condition and this participant, we see that the high overall mean is not just caused by a single outlier, but several trials that took longer than 1 second. mc_data_preprocessed %&gt;% semi_join( d_sum_stats_participants %&gt;% filter(outlier_P == 1), by = c(&quot;submission_id&quot;) ) %&gt;% ggplot(aes(x = trial_number, y = RT)) + geom_point() We are then going to exclude this participant’s entire data from all subsequent analysis:92 mc_data_cleaned &lt;- mc_data_preprocessed %&gt;% filter(submission_id != d_sum_stats_participants$submission_id[1]) D.1.3.2 Cleaning by-trial Our rule for excluding data from individual trials is: From the remaining data, we then remove any individual trial \\(Y\\) if the RT of \\(Y\\) is more than 2 standard deviations away from the mean of experimental condition \\(C\\) (where \\(C\\) is the condition of \\(Y\\), of course). We also remove all trials with reaction times below 100ms. The following code implements this: # mark individual trials as outliers mc_data_cleaned &lt;- mc_data_cleaned %&gt;% full_join( d_sum_stats_conditions, by = &quot;block&quot; ) %&gt;% mutate( trial_type = case_when( abs(RT - mean_C) &gt; 2 * sd_C ~ &quot;too far from mean&quot;, RT &lt; 100 ~ &quot;&lt; 100ms&quot;, TRUE ~ &quot;acceptable&quot; ) %&gt;% factor(levels = c(&quot;acceptable&quot;, &quot;&lt; 100ms&quot;, &quot;too far from mean&quot;)), trial = 1:nrow(mc_data_cleaned) ) # visualize outlier trials mc_data_cleaned %&gt;% ggplot(aes(x = trial, y = RT, color = trial_type)) + geom_point(alpha = 0.4) + facet_grid(~block) + geom_point(alpha = 0.9, data = filter(mc_data_cleaned, trial_type != &quot;acceptable&quot;)) So, we remove 63 individual trials. mc_data_cleaned &lt;- mc_data_cleaned %&gt;% filter(trial_type == &quot;acceptable&quot;) D.1.4 Exploration: summary stats &amp; plots What’s the distribution of total_time_spent, i.e., the time each participant took to complete the whole study? mc_data_cleaned %&gt;% select(submission_id, total_time_spent) %&gt;% unique() %&gt;% ggplot(aes(x = total_time_spent)) + geom_histogram() There are two participants who took noticeably longer than all the others, but we need not necessarily be concerned about this, because it is not unusual for participants of online experiments to open the experiment and wait before actually starting. Here are summary statistics for the reaction time measures for each condition (= block). mc_sum_stats_blocks_cleaned &lt;- mc_data_cleaned %&gt;% group_by(block) %&gt;% nest() %&gt;% summarise( CIs = map(data, function(d) bootstrapped_CI(d$RT)) ) %&gt;% unnest(CIs) mc_sum_stats_blocks_cleaned ## # A tibble: 3 x 4 ## block lower mean upper ## &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 reaction 296. 300. 304. ## 2 goNoGo 420. 427. 434. ## 3 discrimination 480. 488. 496. And a plot of the summary: mc_sum_stats_blocks_cleaned %&gt;% ggplot(aes(x = block, y = mean, fill = block)) + geom_col() + geom_errorbar(aes(ymin = lower, ymax = upper), size = 0.3, width = 0.2 ) + ylab(&quot;mean reaction time&quot;) + xlab(&quot;&quot;) + scale_fill_manual(values = project_colors) + theme(legend.position = &quot;none&quot;) We can also plot the data in a manner that is more revealing of the distribution of measurements in each condition: mc_data_cleaned %&gt;% ggplot(aes(x = RT, color = block, fill = block)) + geom_density(alpha = 0.3) This may seem a harsh step, but when data acquisition is cheap, it’s generally not a bad strategy to be very strict in exclusion criteria, and to apply rules that are not strongly context-dependent.↩ "],["app-93-data-sets-simon-task.html", "D.2 Simon Task", " D.2 Simon Task The Simon task is a well-established experimental paradigm designed to study how different properties of a stimulus might interfere during information processing or decision making. Concretely, the original Simon investigates if responses are faster and more accurate when the stimulus to respond to occurs in the same relative location (e.g., right on the screen) as the response button required by that stimulus (e.g., pressing the button p on the keyboard). D.2.1 Experiment You can try out the experiment for yourself here. D.2.1.1 Participants A total of 213 participants took part in an online version of a Simon task. Participants were students of Cognitive Science at the University of Osnabrück, taking part in courses “Introduction to Cognitive (Neuro-)Psychology” or “Experimental Psychology Lab Practice” in the summer term of 2019. D.2.1.2 Materials &amp; Design Each trial started by showing a fixation cross for 200 ms in the center of the screen. Then, one of two geometrical shapes was shown for 500 ms. The target shape was either a blue square or a blue circle. The target shape appeared either on the left or right of the screen. Each trial determined uniformly at random which shape (square or circle) to show as target and where on the screen to display it (left or right). Participants were instructed to press keys q (left of keyboard) or p (right of keyboard) to identify the kind of shape on the screen. The shape-key allocation happened initially, uniformly at random once for each participant and remained constant throughout the experiment. For example, a participant may have been asked to press q for square and p for circle. Trials were categorized as either ‘congruent’ or ‘incongruent’. They were congruent if the location of the stimulus was the same relative location as the response key (e.g., square on the right of the screen, and p key to be pressed for square) and incongruent if the stimulus was not in the same relative location as the response key (e.g., square on the right and q key to be pressed for square). In each trial, if no key was pressed within 3 seconds after the appearance of the target shape, a message to please respond faster was displayed on the screen. D.2.1.3 Procedure Participants were first welcomed and made familiar with the experiment. They were told to optimize both speed and accuracy. They then practiced the task for 20 trials before starting the main task, which consisted of 100 trials. Finally, the experiment ended with a post-test survey in which participants were asked for their student IDs and the class they were enrolled in. They were also able to leave any optional comments. D.2.2 Hypotheses We are interested in the following hypotheses: D.2.2.1 Hypothesis 1: Reaction times If stimulus location interferes with information processing, we expect that it should take longer to make correct responses in the incongruent condition than in the congruent condition. Schematically, our first hypothesis about decision speed is therefore: \\[ \\text{RT}_{\\text{correct},\\ \\text{congruent}} &lt; \\text{RT}_{\\text{correct},\\ \\text{incongruent}} \\] D.2.2.2 Hypothesis 2: Accuracy If stimulus location interferes with information processing, we also expect to see more errors in the incongruent condition than in the congruent condition. Schematically, our second hypothesis about decision accuracy is therefore: \\[ \\text{Accuracy}_{\\text{correct},\\ \\text{congruent}} &gt; \\text{Accuracy}_{\\text{correct},\\ \\text{incongruent}} \\] D.2.3 Results D.2.3.1 Loading and inspecting the data We load the data and show a summary of the variables stored in the tibble: d &lt;- aida::data_ST_raw glimpse(d) ## Rows: 25,560 ## Columns: 15 ## $ submission_id &lt;dbl&gt; 7432, 7432, 7432, 7432, 7432, 7432, 7432, 7432, 7432,… ## $ RT &lt;dbl&gt; 1239, 938, 744, 528, 706, 547, 591, 652, 627, 485, 51… ## $ condition &lt;chr&gt; &quot;incongruent&quot;, &quot;incongruent&quot;, &quot;incongruent&quot;, &quot;incongr… ## $ correctness &lt;chr&gt; &quot;correct&quot;, &quot;correct&quot;, &quot;correct&quot;, &quot;correct&quot;, &quot;correct&quot;… ## $ class &lt;chr&gt; &quot;Intro Cogn. Neuro-Psychology&quot;, &quot;Intro Cogn. Neuro-Ps… ## $ experiment_id &lt;dbl&gt; 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 5… ## $ key_pressed &lt;chr&gt; &quot;q&quot;, &quot;q&quot;, &quot;q&quot;, &quot;q&quot;, &quot;p&quot;, &quot;p&quot;, &quot;q&quot;, &quot;p&quot;, &quot;q&quot;, &quot;q&quot;, &quot;q&quot;… ## $ p &lt;chr&gt; &quot;circle&quot;, &quot;circle&quot;, &quot;circle&quot;, &quot;circle&quot;, &quot;circle&quot;, &quot;ci… ## $ pause &lt;dbl&gt; 1896, 1289, 1705, 2115, 2446, 2289, 2057, 2513, 1865,… ## $ q &lt;chr&gt; &quot;square&quot;, &quot;square&quot;, &quot;square&quot;, &quot;square&quot;, &quot;square&quot;, &quot;sq… ## $ target_object &lt;chr&gt; &quot;square&quot;, &quot;square&quot;, &quot;square&quot;, &quot;square&quot;, &quot;circle&quot;, &quot;ci… ## $ target_position &lt;chr&gt; &quot;right&quot;, &quot;right&quot;, &quot;right&quot;, &quot;right&quot;, &quot;left&quot;, &quot;right&quot;, … ## $ timeSpent &lt;dbl&gt; 7.565417, 7.565417, 7.565417, 7.565417, 7.565417, 7.5… ## $ trial_number &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16… ## $ trial_type &lt;chr&gt; &quot;practice&quot;, &quot;practice&quot;, &quot;practice&quot;, &quot;practice&quot;, &quot;prac… The most important columns in this data set for our purposes are: submission_id: an ID identifying each participant RT: the reaction time for each trial condition: whether the trial was a congruent or an incongruent trial correctness: whether the answer in the current trial was correct or incorrect trial_type: whether the data is from a practice or a main test trial D.2.3.2 Cleaning the data We look at outlier-y behavior at the level of individual participants first, then at the level of individual trials. D.2.3.2.1 Individual-level error rates &amp; reaction times It is conceivable that some participants did not take the task seriously. They may have just fooled around. We will therefore inspect each individual’s response patterns and reaction times. If participants appear to have “misbehaved”, we discard all of their data. (CAVEAT: Notice the researcher degrees of freedom in the decision of what counts as “misbehavior”! It is therefore that choices like these are best committed to in advance, e.g., via pre-registration!) We can calculate the mean reaction times and the error rates for each participant. d_individual_summary &lt;- d %&gt;% filter(trial_type == &quot;main&quot;) %&gt;% # look at only data from main trials group_by(submission_id) %&gt;% # calculate the following for each individual summarize(mean_RT = mean(RT), error_rate = 1 - mean(ifelse(correctness == &quot;correct&quot;, 1, 0))) head(d_individual_summary) ## # A tibble: 6 x 3 ## submission_id mean_RT error_rate ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7432 595. 0.05 ## 2 7433 458. 0.04 ## 3 7434 531. 0.04 ## 4 7435 433. 0.12 ## 5 7436 748. 0.06 ## 6 7437 522. 0.12 Let’s plot this summary information: d_individual_summary %&gt;% ggplot(aes(x = mean_RT, y = error_rate)) + geom_point() Here’s a crude way of branding outlier-participants: d_individual_summary &lt;- d_individual_summary %&gt;% mutate(outlier = case_when(mean_RT &lt; 350 ~ TRUE, mean_RT &gt; 750 ~ TRUE, error_rate &gt; 0.5 ~ TRUE, TRUE ~ FALSE)) d_individual_summary %&gt;% ggplot(aes(x = mean_RT, y = error_rate)) + geom_point() + geom_point(data = filter(d_individual_summary, outlier == TRUE), color = &quot;firebrick&quot;, shape = &quot;square&quot;, size = 5) We then clean the data set in a first step by removing all participants identified as outlier-y: d &lt;- full_join(d, d_individual_summary, by = &quot;submission_id&quot;) # merge the tibbles d &lt;- filter(d, outlier == FALSE) message(&quot;We excluded &quot;, sum(d_individual_summary$outlier), &quot; participants for suspicious mean RTs and higher error rates.&quot;) ## We excluded 5 participants for suspicious mean RTs and higher error rates. D.2.3.2.2 Trial-level reaction times It is also conceivable that individual trials resulted in early accidental key presses or were interrupted in some way or another. We therefore look at the overall distribution of RTs and determine what to exclude. (Again, it is important that decisions of what to exclude should ideally be publicly preregistered before data analysis.) Let’s first plot the overall distribution of RTs. d %&gt;% ggplot(aes(x = RT)) + geom_histogram() + geom_jitter(aes(x = RT, y = 1), alpha = 0.3, height = 300) Some very long RTs make this graph rather uninformative. Let’s therefore exclude all trials that lasted longer than 1 second and also all trials with reaction times under 100 ms. message( &quot;We exclude &quot;, nrow(filter(d, RT &lt; 100)) + nrow(filter(d, RT &gt; 1000)), &quot; trials based on too fast or too slow RTs.&quot; ) # exclude these trials d &lt;- filter(d, RT &gt; 100 &amp; RT &lt; 1000) Here’s the distribution of RTs after cleaning: d %&gt;% ggplot(aes(x = RT)) + geom_histogram() + geom_jitter(aes(x = RT, y = 1), alpha = 0.3, height = 300) Finally, we discard the training trials: d &lt;- filter(d, trial_type == &quot;main&quot;) D.2.3.3 Hypothesis-driven summary statistics D.2.3.3.1 Hypothesis 1: Reaction times We are mostly interested in the influence of congruency on the reaction times in the trials where participants gave a correct answer. But here we also look at, for comparison, the reaction times for incorrect trials. Here is a summary of the means and standard deviations for each condition: d_sum &lt;- d %&gt;% group_by(correctness, condition) %&gt;% summarize(mean_RT = mean(RT), sd_RT = sd(RT)) d_sum ## # A tibble: 4 x 4 ## # Groups: correctness [2] ## correctness condition mean_RT sd_RT ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 correct congruent 453. 99.6 ## 2 correct incongruent 477. 85.1 ## 3 incorrect congruent 462 97.6 ## 4 incorrect incongruent 393. 78.1 Numerically, the reaction times for the correct-congruent trials are indeed faster than for the correct-incongruent trials. Here’s a plot of the reaction times split up by whether the answer was correct and whether the trial was congruent or incongruent. d %&gt;% ggplot(aes(x = RT)) + geom_jitter(aes(y = 0.0005), alpha = 0.1, height = 0.0005) + geom_density(fill = &quot;gray&quot;, alpha = 0.5) + geom_vline(data = d_sum, mapping = aes(xintercept = mean_RT), color = &quot;firebrick&quot;) + facet_grid(condition ~ correctness) D.2.3.3.2 Hypothesis 2: Accuracy Our second hypothesis is about the proportion of correct answers, comparing the congruent against the incongruent trials. Here is a summary statistic for the acurracy in both conditions: d %&gt;% group_by(condition) %&gt;% summarize(acurracy = mean(correctness == &quot;correct&quot;)) ## # A tibble: 2 x 2 ## condition acurracy ## * &lt;chr&gt; &lt;dbl&gt; ## 1 congruent 0.961 ## 2 incongruent 0.923 Again, numerically it seems that the hypothesis is borne out that accuracy is higher in the congruent trials. "],["app-93-data-sets-king-of-france.html", "D.3 King of France", " D.3 King of France D.3.1 Nature, origin and rationale of the data A presupposition of a sentence is a piece of information that is necessary for the sentence to make sense, but which is not communicated explicitly. If I say “Jones chained my camel to a tree”, this sentence presupposes, somewhat incredibly, that I own a camel. If it is false that I own a camel, the sentence makes no sense. Yet, if I say it and you say: “I disagree”, you take issue with my claim about chaining, not about me owning a camel. In this sense, the presupposition is not part of the explicitly contributed content (it is “not at issue content”, as the linguists would say). We here partially replicate a previous study by Abrusán and Szendröi (2013) investigating how sentences with false presuppositions are perceived. The main question of interest for us is whether sentences with a false presupposition are rather regarded as true or rather as false. We therefore present participants with sentences (see below) and have them rate these as ‘true’ or ‘false’, a so-called truth-value judgement task, a common paradigm in experimental semantics and pragmatics. (The original study by Abrusán and Szendröi (2013) also included a third option ‘cannot tell’, which we do not use since this data set is mainly used for toying around with binary choice data.) Abrusán and Szendröi (2013) presented their participants with 11 different types of sentences, of which we here only focus on five. Here are examples of the five conditions we test, using the corresponding condition numbers from the experiment by Abrusán and Szendröi (2013). C0. The king of France is bald. C1. France has a king, and he is bald. C6. The King of France isn’t bald. C9. The King of France, he did not call Emmanuel Macron last night. C10. Emmanuel Macron, he did not call the King of France last night. The presupposition in question is “France has a king”. C0 and C1 differ only with respect to whether this piece of information is presupposed (C0) or explicitly asserted (C1). The variants C0 and C6 differ only with respect to negation in the main (asserted) proposition. Finally, the contrast pair C9 and C10 is interesting because of a particular topic-focus structure and the placement of negation. In C9, the topic is “the King of France”, which introduces the presupposition in question. In C10, the topic is “Emmanuel Macron”, but it introduces the presupposition under a negation. Figure D.1 shows the results reported by Abrusán and Szendröi (2013). Figure D.1: Results of Abrusán and Szendröi (2013) . D.3.1.1 The experiment D.3.1.1.1 Participants We obtained data from 97 participants via the online crowd-sourcing platform Prolific.93 All participants were native speakers of English. D.3.1.1.2 Material The sentence material consisted of five vignettes. Here are the sentences that constitute “condition 1” of each of the five vignettes: V1. The King of France is bald. V2. The Emperor of Canada is fond of sushi. V3. The Pope’s wife is a lawyer. V4. The Belgian rainforest provides a habitat for many species. V5. The volcanoes of Germany dominate the landscape. As every vignette occurred in each of the five conditions, there are a total of 25 critical sentences. Additionally, for each vignette, there is a “background check” sentence, which is intended to find out whether participants know whether the relevant presuppositions are true. The “background check” sentences are: BC1. France has a king. BC2. The Pope is currently not married. BC3. Canada is a democracy. BC4. Belgium has rainforests. BC5. Germany has volcanoes. Finally, there are also 110 filler sentences, which do not have a presupposition, but also require common world knowledge for a correct answer. As each filler has an uncontroversially correct answer, these fillers also serve as a general attention check to probe into whether participants are reading the sentences carefully enough. Example filler sentences are: F1. William Shakespeare was a famous Italian painter in Rome. F2. There were two world wars in the 20th century. D.3.1.1.3 Procedure Each experimental run started with five practice trials, which used the five additional sentences, which were like the filler material and the same for each participant, presented in random order. The main part of the experiment presented each participant with five critical sentences, exactly one from each vignette and exactly one from each condition, allocated completely at random. Each participant also saw all of the five “background check” sentences. Each “background check” sentence was presented after the corresponding vignette’s critical sentence. All of these test trials were interspersed with 14 random filler sentences. D.3.1.1.4 Realization The experiment was realized using _magpie and can be tried out here. D.3.1.2 Hypotheses We will be interested in the following research questions: H1: The latent probability of “TRUE” judgements is higher in C0 (with presupposition) than in C1 (where the presupposition is part of the at-issue / asserted content). H2: There is no difference in truth-value judgements between C0 (the positive sentence) and C6 (the negative sentence). H3: The disposition towards “TRUE” judgements is lower for C9 (where the presupposition is topical) than for C10 (where the presupposition is not topical and occurs under negation). D.3.2 Loading and preprocessing the data First, load the data: data_KoF_raw &lt;- aida::data_KoF_raw And then have a glimpse: glimpse(data_KoF_raw) ## Rows: 2,813 ## Columns: 16 ## $ submission_id &lt;dbl&gt; 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,… ## $ RT &lt;dbl&gt; 8110, 35557, 3647, 16037, 11816, 6024, 4986, 13019, 53… ## $ age &lt;dbl&gt; 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57… ## $ comments &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ item_version &lt;chr&gt; &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;, &quot;none&quot;… ## $ correct_answer &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FA… ## $ education &lt;chr&gt; &quot;Graduated College&quot;, &quot;Graduated College&quot;, &quot;Graduated C… ## $ gender &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;fem… ## $ languages &lt;chr&gt; &quot;English&quot;, &quot;English&quot;, &quot;English&quot;, &quot;English&quot;, &quot;English&quot;,… ## $ question &lt;chr&gt; &quot;World War II was a global war that lasted from 1914 t… ## $ response &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FA… ## $ timeSpent &lt;dbl&gt; 39.48995, 39.48995, 39.48995, 39.48995, 39.48995, 39.4… ## $ trial_name &lt;chr&gt; &quot;practice_trials&quot;, &quot;practice_trials&quot;, &quot;practice_trials… ## $ trial_number &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, … ## $ trial_type &lt;chr&gt; &quot;practice&quot;, &quot;practice&quot;, &quot;practice&quot;, &quot;practice&quot;, &quot;pract… ## $ vignette &lt;chr&gt; &quot;undefined&quot;, &quot;undefined&quot;, &quot;undefined&quot;, &quot;undefined&quot;, &quot;u… The most important variables in this data set are: submission_id: unique identifier for each participant trial_type: whether the trial was of the category filler, main, practice or special, where the latter encodes the “background checks” item_version: the condition to which the test sentence belongs (only given for trials of type main and special) response: the answer (“TRUE” or “FALSE”) on each trial vignette: the current item’s vignette number (applies only to trials of type main and special) As the variable names used in the raw data are not ideal, we will pre-process the raw data a bit for easier analysis. data_KoF_processed &lt;- data_KoF_raw %&gt;% # discard practice trials filter(trial_type != &quot;practice&quot;) %&gt;% mutate( # add a &#39;condition&#39; variable condition = case_when( trial_type == &quot;special&quot; ~ &quot;background check&quot;, trial_type == &quot;main&quot; ~ str_c(&quot;Condition &quot;, item_version), TRUE ~ &quot;filler&quot; ) %&gt;% factor( ordered = T, levels = c(str_c(&quot;Condition &quot;, c(0, 1, 6, 9, 10)), &quot;background check&quot;, &quot;filler&quot;) ) ) D.3.3 Cleaning the data We clean the data in two consecutive steps: Remove all data from any participant who got more than 50% of the answer to filler material wrong. Remove individual main trials if the corresponding “background check” question was answered wrongly. D.3.3.1 Cleaning by-participant # look at error rates for filler sentences by subject # mark every subject with &lt; 0.5 proportion correct subject_error_rate &lt;- data_KoF_processed %&gt;% filter(trial_type == &quot;filler&quot;) %&gt;% group_by(submission_id) %&gt;% summarise( proportion_correct = mean(correct_answer == response), outlier_subject = proportion_correct &lt; 0.5 ) %&gt;% arrange(proportion_correct) Plot the results: # plot by-subject error rates subject_error_rate %&gt;% ggplot(aes(x = proportion_correct, color = outlier_subject, shape = outlier_subject)) + geom_jitter(aes(y = &quot;&quot;), width = 0.001) + xlab(&quot;Poportion of correct answers&quot;) + ylab(&quot;&quot;) + ggtitle(&quot;Distribution of proportion of correct answers on filler trials&quot;) + xlim(0, 1) + scale_color_discrete(name = &quot;Outlier&quot;) + scale_shape_discrete(name = &quot;Outlier&quot;) Apply the cleaning step: # add info about error rates and exclude outlier subject(s) d_cleaned &lt;- full_join(data_KoF_processed, subject_error_rate, by = &quot;submission_id&quot;) %&gt;% filter(outlier_subject == FALSE) D.3.3.2 Cleaning by-trial # exclude every critical trial whose &#39;background&#39; test question was answered wrongly d_cleaned &lt;- d_cleaned %&gt;% # select only the &#39;background question&#39; trials filter(trial_type == &quot;special&quot;) %&gt;% # is the background question answered correctly? mutate( background_correct = correct_answer == response ) %&gt;% # select only the relevant columns select(submission_id, vignette, background_correct) %&gt;% # right join lines to original data set right_join(d_cleaned, by = c(&quot;submission_id&quot;, &quot;vignette&quot;)) %&gt;% # remove all special trials, as well as main trials with incorrect background check filter(trial_type == &quot;main&quot; &amp; background_correct == TRUE) D.3.4 Exploration: summary stats &amp; plots Plot for ratings by condition: d_cleaned %&gt;% # drop unused factor levels droplevels() %&gt;% # get means and 95% bootstrapped CIs for each condition group_by(condition) %&gt;% nest() %&gt;% summarise( CIs = map(data, function(d) bootstrapped_CI(d$response == &quot;TRUE&quot;)) ) %&gt;% unnest(CIs) %&gt;% # plot means and CIs ggplot(aes(x = condition, y = mean, fill = condition)) + geom_bar(stat = &quot;identity&quot;) + geom_errorbar(aes(ymin = lower, ymax = upper, width = 0.2)) + ylim(0, 1) + ylab(&quot;&quot;) + xlab(&quot;&quot;) + ggtitle(&quot;Proportion of &#39;TRUE&#39; responses per condition&quot;) + theme(legend.position = &quot;none&quot;) + scale_fill_manual(values = project_colors) Plot for each condition &amp; vignette: data_KoF_processed %&gt;% filter(trial_type == &quot;main&quot;) %&gt;% droplevels() %&gt;% group_by(condition, vignette) %&gt;% nest() %&gt;% summarise( CIs = map(data, function(d) bootstrapped_CI(d$response == &quot;TRUE&quot;)) ) %&gt;% unnest(CIs) %&gt;% ggplot(aes(x = condition, y = mean, fill = vignette)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge2&quot;) + geom_errorbar( aes(ymin = lower, ymax = upper), width = 0.3, position = position_dodge(width = 0.9) ) + ylim(0, 1) + ylab(&quot;&quot;) + xlab(&quot;&quot;) + ggtitle(&quot;Proportion of &#39;TRUE&#39; responses per condition &amp; vignette&quot;) References "],["app-93-data-sets-BLJM.html", "D.4 Bio-Logic Jazz-Metal (and where to consume it)", " D.4 Bio-Logic Jazz-Metal (and where to consume it) D.4.1 Nature, origin and rationale of the data This is a very short and non-serious experiment that asks for just three binary decisions from each participant, namely their spontaneous preference for one of two presented options (biology vs. logic, jazz vs. metal, and mountains vs. beach). The data from this experiment will be analyzed and plotted. This is supposed to be a useful and hopefully entertaining self-generated data set with which to practice making contingency tables and to apply binomial tests and fun stuff like that. D.4.1.1 The experiment D.4.1.1.1 Participants We obtained data from 102 participants, all of whom were students of a course based on this web-book held in the winter term of 2019/2020 at the University of Osnabrück. D.4.1.1.2 Material There were three critical trials (and nothing else). All trials had the same trailing question: If you have to choose between the following two options, which one do you prefer? Each critical trial then presented two options as buttons, one of which had to be clicked. Biology vs. Logic Jazz vs. Metal Mountains vs. Beach D.4.1.1.3 Procedure Each participant saw all three critical trials (and no other trials) in random order. D.4.1.1.4 Realization The experiment was realized using _magpie and can be tried out here. D.4.1.2 Theoretical motivation &amp; hypotheses This is a bogus experiment, and no sane person would advance a serious hypothesis about this. Except for the main author of this book, who conjectures that appreciators of Metal music like logic more than Jazz-enthusiasts would (because Metal is cleaner and more mechanic, while Jazz is fuzzy and organic, obviously).94 D.4.2 Loading and preprocessing the data First, load the data: data_BLJM_raw &lt;- aida::data_BLJM_raw Take a peak: glimpse(data_BLJM_raw) ## Rows: 306 ## Columns: 19 ## $ submission_id &lt;dbl&gt; 379, 379, 379, 378, 378, 378, 377, 377, 377, 376, 376, … ## $ QUD &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ RT &lt;dbl&gt; 9230, 9330, 5248, 5570, 2896, 36236, 5906, 4767, 10427,… ## $ age &lt;dbl&gt; 30, 30, 30, 29, 29, 29, 20, 20, 20, 21, 21, 21, 23, 23,… ## $ comments &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ education &lt;chr&gt; &quot;Graduated High School&quot;, &quot;Graduated High School&quot;, &quot;Grad… ## $ endTime &lt;dbl&gt; 1.573751e+12, 1.573751e+12, 1.573751e+12, 1.573738e+12,… ## $ experiment_id &lt;dbl&gt; 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8… ## $ gender &lt;chr&gt; &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female… ## $ languages &lt;chr&gt; &quot;German&quot;, &quot;German&quot;, &quot;German&quot;, &quot;German&quot;, &quot;German&quot;, &quot;Germ… ## $ option1 &lt;chr&gt; &quot;Mountains&quot;, &quot;Biology&quot;, &quot;Metal&quot;, &quot;Metal&quot;, &quot;Biology&quot;, &quot;M… ## $ option2 &lt;chr&gt; &quot;Beach&quot;, &quot;Logic&quot;, &quot;Jazz&quot;, &quot;Jazz&quot;, &quot;Logic&quot;, &quot;Beach&quot;, &quot;Be… ## $ question &lt;chr&gt; &quot;If you have to choose between the following two option… ## $ response &lt;chr&gt; &quot;Beach&quot;, &quot;Logic&quot;, &quot;Metal&quot;, &quot;Metal&quot;, &quot;Logic&quot;, &quot;Beach&quot;, &quot;… ## $ startDate &lt;chr&gt; &quot;Thu Nov 14 2019 18:01:24 GMT+0100 (CET)&quot;, &quot;Thu Nov 14 … ## $ startTime &lt;dbl&gt; 1.573751e+12, 1.573751e+12, 1.573751e+12, 1.573738e+12,… ## $ timeSpent &lt;dbl&gt; 2.3601500, 2.3601500, 2.3601500, 2.1552667, 2.1552667, … ## $ trial_name &lt;chr&gt; &quot;forced_choice&quot;, &quot;forced_choice&quot;, &quot;forced_choice&quot;, &quot;for… ## $ trial_number &lt;dbl&gt; 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1… The most important variables in this data set are: submission_id: unique identifier for each participant option1 and option2: what the choice options where response: which of the two options was chosen Notice that there is no convenient column indicating which of the three critical conditions we are dealing with, so we extract that information from the data given in columns option1 and option2, while also discarding everything we will not need:95 data_BLJM_processed &lt;- data_BLJM_raw %&gt;% mutate( condition = str_c(str_sub(option2, 1, 1), str_sub(option1, 1, 1)) ) %&gt;% select(submission_id, condition, response) data_BLJM_processed ## # A tibble: 306 x 3 ## submission_id condition response ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 379 BM Beach ## 2 379 LB Logic ## 3 379 JM Metal ## 4 378 JM Metal ## 5 378 LB Logic ## 6 378 BM Beach ## 7 377 BM Mountains ## 8 377 LB Biology ## 9 377 JM Jazz ## 10 376 BM Beach ## # … with 296 more rows D.4.3 Exploration: counts &amp; plots We are interested in relevant counts of the original data, namely the number of times certain choices were made. First, let’s look at the overal choice rates in each condition: data_BLJM_processed %&gt;% # we use function`count` from the `dplyr` package dplyr::count(condition, response) ## # A tibble: 6 x 3 ## condition response n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 BM Beach 44 ## 2 BM Mountains 58 ## 3 JM Jazz 64 ## 4 JM Metal 38 ## 5 LB Biology 58 ## 6 LB Logic 44 Overall it seems that mountains are preferred over beaches, Jazz is preferred over Metal and Biology is preferred over Logic. The overall counts, however, do not tell us anything about any potentially interesting relationship between preferences. So, let’s have a closer look at the lecturer’s conjecture that a preference for logic tends to go with a stronger preference for metal than a preference for biology does. To check this, we need to look at different counts, namely the number of people who selected which music-subject pair. We collect these counts in a variable called BLJM_associated_counts: BLJM_associated_counts &lt;- data_BLJM_processed %&gt;% select(submission_id, condition, response) %&gt;% pivot_wider(names_from = condition, values_from = response) %&gt;% select(-BM) %&gt;% dplyr::count(JM, LB) BLJM_associated_counts ## # A tibble: 4 x 3 ## JM LB n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Jazz Biology 38 ## 2 Jazz Logic 26 ## 3 Metal Biology 20 ## 4 Metal Logic 18 Notice that this representation is tidy, but not ideal for visual inspection. A more commonly seen format can be obtained by pivoting to a wider representation: # visually attractive table representation BLJM_associated_counts %&gt;% pivot_wider(names_from = LB, values_from = n) ## # A tibble: 2 x 3 ## JM Biology Logic ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Jazz 38 26 ## 2 Metal 20 18 The tidy representation is ideal for plotting, though. Notice, however, that the code below plots proportions of choices, not raw counts: BLJM_associated_counts %&gt;% ggplot(aes(x = LB, y = n/sum(n), color = JM, shape = JM, group = JM)) + geom_point(size = 3) + geom_line() + labs( title = &quot;Proportion of choices of each music+subject pair&quot;, x = &quot;&quot;, y = &quot;&quot; ) The lecturer’s conjecture might be correct. This does look like there could be an interaction. While Jazz is preferred more generally, the preference for Jazz over Metal seems more pronounced for those participants who preferred Biology than for those who preferred Logic. Notice how easy it is to motivate any-old psychological theory. Some other scientific disciplines are much better at smothering nonsensical ideas from the start.↩ The processed data set is also available via aida::data_BLJM.↩ "],["app-93-data-sets-avocado.html", "D.5 Avocado prices", " D.5 Avocado prices D.5.1 Nature, origin and rationale of the data This data set has been plucked from Kaggle. More information on the origin and composition of this data set can be found on Kaggle’s website covering the avocado data. The data set includes information about the prices of (Hass) avocados and the amount sold (of different kinds) at different points in time. The data is originally from the Hass Avocado Board, where the data is described as follows: The [data] represents weekly 2018 retail scan data for National retail volume (units) and price. Retail scan data comes directly from retailers’ cash registers based on actual retail sales of Hass avocados. Starting in 2013, the table below reflects an expanded, multi-outlet retail data set. Multi-outlet reporting includes an aggregation of the following channels: grocery, mass, club, drug, dollar and military. The Average Price (of avocados) in the table reflects a per unit (per avocado) cost, even when multiple units (avocados) are sold in bags. The Product Lookup codes (PLU’s) in the table are only for Hass avocados. Other varieties of avocados (e.g. greenskins) are not included in this table. Columns of interest are: Date: date of the observation AveragePrice: average price of a single avocado Total Volume: total number of avocados sold type: whether the price/amount is for conventional or organic 4046: total number of small avocados sold (PLU 4046) 4225: total number of medium avocados sold (PLU 4225) 4770: total number of large avocados sold (PLU 4770) D.5.2 Loading and preprocessing the data We load the data into a variable named avocado_data but also immediately rename some of the columns to have more convenient handles: avocado_data &lt;- aida::data_avocado_raw %&gt;% # remove currently irrelevant columns select(-X1, -contains(&quot;Bags&quot;), -year, -region) %&gt;% # rename variables of interest for convenience rename( total_volume_sold = `Total Volume`, average_price = `AveragePrice`, small = &#39;4046&#39;, medium = &#39;4225&#39;, large = &#39;4770&#39;, ) We can then take a glimpse: glimpse(avocado_data) ## Rows: 18,249 ## Columns: 7 ## $ Date &lt;date&gt; 2015-12-27, 2015-12-20, 2015-12-13, 2015-12-06, 20… ## $ average_price &lt;dbl&gt; 1.33, 1.35, 0.93, 1.08, 1.28, 1.26, 0.99, 0.98, 1.0… ## $ total_volume_sold &lt;dbl&gt; 64236.62, 54876.98, 118220.22, 78992.15, 51039.60, … ## $ small &lt;dbl&gt; 1036.74, 674.28, 794.70, 1132.00, 941.48, 1184.27, … ## $ medium &lt;dbl&gt; 54454.85, 44638.81, 109149.67, 71976.41, 43838.39, … ## $ large &lt;dbl&gt; 48.16, 58.33, 130.50, 72.58, 75.78, 43.61, 93.26, 8… ## $ type &lt;chr&gt; &quot;conventional&quot;, &quot;conventional&quot;, &quot;conventional&quot;, &quot;co… The preprocessed version of the data is stored in aida::data_avocado for later reuse. D.5.3 Summary statistics We are interested in the following summary statistics for the variables total_amount_sold and average_price for the whole data and for each type of avocado separately: mean median variance the bootstrapped 95% confidence interval of the mean To get these results we define a convenience function that calculates exactly these measures: summary_stats_convenience_fct &lt;- function(numeric_data_vector) { bootstrap_results &lt;- bootstrapped_CI(numeric_data_vector) tibble( CI_lower = bootstrap_results$lower, mean = bootstrap_results$mean, CI_upper = bootstrap_results$upper, median = median(numeric_data_vector), var = var(numeric_data_vector) ) } We then apply this function once for the whole data set and once for each type of avocado (conventional or organic). We do this using a nested tibble in order to record the joint output of the convenience function (so that we only need to calculate the bootstrapped 95% confidence interval twice). # summary stats for the whole data taken together avocado_sum_stats_total &lt;- avocado_data %&gt;% select(type, average_price, total_volume_sold) %&gt;% pivot_longer( cols = c(total_volume_sold, average_price), names_to = &#39;variable&#39;, values_to = &#39;value&#39; ) %&gt;% group_by(variable) %&gt;% nest() %&gt;% summarise( summary_stats = map(data, function(d) summary_stats_convenience_fct(d$value)) ) %&gt;% unnest(summary_stats) %&gt;% mutate(type = &quot;both_together&quot;) %&gt;% # reorder columns: moving `type` to second position select(1, type, everything()) # summary stats for each type of avocado avocado_sum_stats_by_type &lt;- avocado_data %&gt;% select(type, average_price, total_volume_sold) %&gt;% pivot_longer( cols = c(total_volume_sold, average_price), names_to = &#39;variable&#39;, values_to = &#39;value&#39; ) %&gt;% group_by(type, variable) %&gt;% nest() %&gt;% summarise( summary_stats = map(data, function(d) summary_stats_convenience_fct(d$value)) ) %&gt;% unnest(summary_stats) # joining the summary stats in a single tibble avocado_sum_stats &lt;- full_join(avocado_sum_stats_total, avocado_sum_stats_by_type) # inspect the results avocado_sum_stats ## # A tibble: 6 x 7 ## variable type CI_lower mean CI_upper median var ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 average_price both_togeth… 1.40 1.41e0 1.41e0 1.37e0 1.62e- 1 ## 2 total_volume_so… both_togeth… 801715. 8.51e5 9.02e5 1.07e5 1.19e+13 ## 3 average_price conventional 1.15 1.16e0 1.16e0 1.13e0 6.92e- 2 ## 4 total_volume_so… conventional 1552136. 1.65e6 1.76e6 4.08e5 2.25e+13 ## 5 average_price organic 1.65 1.65e0 1.66e0 1.63e0 1.32e- 1 ## 6 total_volume_so… organic 44988. 4.78e4 5.08e4 1.08e4 2.03e+10 D.5.4 Plots Here are plots of the distributions of average_price for different types of avocados: avocado_data %&gt;% ggplot(aes(x = average_price, fill = type)) + geom_histogram(binwidth = 0.01) + facet_wrap(type ~ ., ncol = 1) + coord_flip() + geom_point( data = avocado_sum_stats_by_type %&gt;% filter(variable == &quot;average_price&quot;), aes(y = 0, x = mean) ) + ylab(&#39;&#39;) + xlab(&#39;Average price&#39;) + theme(legend.position = &quot;none&quot;) Here is a scatter plot of the logarithm of total_volume_sold against average_price: avocado_data %&gt;% ggplot(aes(x = log(total_volume_sold), y = average_price)) + geom_point(color = &quot;darkgray&quot;, alpha = 0.3) + geom_smooth(color = &quot;black&quot;, method = &quot;lm&quot;) + xlab(&#39;Logarithm of total volume sold&#39;) + ylab(&#39;Average price&#39;) + ggtitle(&quot;Avocado prices plotted against the (log) amount sold&quot;) And another scatter plot, using a log-scaled \\(x\\)-axis and distinguishing different types of avocados: # pipe data set into function `ggplot` avocado_data %&gt;% # reverse factor level so that horizontal legend entries align with # the majority of observations of each group in the plot mutate( type = fct_rev(type) ) %&gt;% # initialize the plot ggplot( # defined mapping mapping = aes( # which variable goes on the x-axis x = total_volume_sold, # which variable goes on the y-axis y = average_price, # which groups of variables to distinguish group = type, # color and fill to change by grouping variable fill = type, color = type ) ) + # declare that we want a scatter plot geom_point( # set low opacity for each point alpha = 0.1 ) + # add a linear model fit (for each group) geom_smooth( color = &quot;black&quot;, method = &quot;lm&quot; ) + # change the default (normal) of x-axis to log-scale scale_x_log10() + # add dollar signs to y-axis labels scale_y_continuous(labels = scales::dollar) + # change axis labels and plot title &amp; subtitle labs( x = &#39;Total volume sold (on a log scale)&#39;, y = &#39;Average price&#39;, title = &quot;Avocado prices plotted against the amount sold per type&quot;, subtitle = &quot;With linear regression lines&quot; ) "],["app-93-data-sets-temperature.html", "D.6 Annual average world surface temperature", " D.6 Annual average world surface temperature D.6.1 Nature, origin and rationale of the data This data set has been downloaded from Berkeley Earth.96 More information on the origin and composition of this data set can be found here. Specifically, what we will use here is the time series data for “land only” using the annual summary of monthly average temperature. We have added to the data set used here the absolute average temperature. (Berkeley Earth only lists the “annual anomaly”, i.e., the deviation from a grand mean.) Columns of interest are: year: year of the observation (1750-2019) anomaly: deviation from the grand mean of 1750-1980, which equals 8.61 degrees Celsius uncertainty: measure of uncertainty associated with the reported anomaly avg_temp: the annual average world surface temperature D.6.2 Loading and preprocessing the data We load the data into a variable named data_temperature: data_temperature &lt;- aida::data_WorldTemp And inspect the first rows of data: head(data_temperature) ## # A tibble: 6 x 4 ## year anomaly uncertainty avg_temp ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1750 -1.41 NA 7.20 ## 2 1751 -1.52 NA 7.09 ## 3 1753 -1.07 1.3 7.54 ## 4 1754 -0.614 1.09 8.00 ## 5 1755 -0.823 1.24 7.79 ## 6 1756 -0.547 1.28 8.06 D.6.3 Hypothesis &amp; modeling approach We care about whether the annual average temperature increased over time. We address this question with a simple linear regression model, in particular the relationship avg_temp ~ year. We are interested in whether the slope coefficient of that regression model is credibly/significantly bigger than zero. Using a simple linear regression here is clearly and blatantly way too simple a modeling approach, but it serves our purposes and the violent simplification should make you think how/why exactly the linear regression model is conceptually inadequate for this data and inference model. D.6.4 Plotting Here is a scatterplot of annual average temperature avg_temp against year. The straight line is the best linear predictor. data_temperature %&gt;% ggplot(aes(x = year, y = avg_temp)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs( y = &quot;temperature (degrees Celsius)&quot;, title = &quot;Annual average surface land temperature&quot; ) Downloaded on October 6th, 2020.↩ "],["app-93-data-sets-murder-data.html", "D.7 Murder data", " D.7 Murder data D.7.1 Nature, origin and rationale of the data The murder data set contains information about the relative number of murders in American cities. It also contains further socio-economic information, such as a city’s unemployment rate, and the percentage of inhabitants with a low income. We use this data set just for illustration. No further real-world conclusions should be drawn from this, as the data should be treated as entirely fictitious. murder_data &lt;- aida::data_murder We take a look at the data: murder_data %&gt;% head() ## # A tibble: 6 x 4 ## murder_rate low_income unemployment population ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 11.2 16.5 6.2 587000 ## 2 13.4 20.5 6.4 643000 ## 3 40.7 26.3 9.3 635000 ## 4 5.3 16.5 5.3 692000 ## 5 24.8 19.2 7.3 1248000 ## 6 12.7 16.5 5.9 643000 Each row in this data set shows data from a city. The information in the columns is: murder_rate: annual murder rate per million inhabitants low_income: percentage of inhabitants with a low income (however that is defined) unemployment: percentage of unemployed inhabitants population: number of inhabitants of a city There is information for a total of 20 cities in this data set. Here’s a nice way of plotting each variable against each other: GGally::ggpairs(murder_data, title = &quot;Murder rate data&quot;) The diagonal of this graph shows the density curve of the data in each column. Scatter plots below the diagonal show pairs of values from two columns plotted against each other. The information above the diagonal gives the correlation score of each pair of variables. The “research question” of interest for this data set is which factors help predict a city’s murder_rate. In other words, we want to know, for example, whether knowing a random city’s value for the variable unemployment, will allow us to make better predictions about that city’s value for the variable murder_rate. Chapter 12 uses this data set to specifically ask whether we can use information from variables like unemployment to predict murder_rate based on the assumption of a linear relationship. It is important to stress here that asking for an epistemic / stochastic relationship of the form “Does \\(x\\) help to make better predictions about \\(y\\)?” does not relate to or presuppose a causal relationship between \\(x\\) and \\(y\\). The variables \\(x\\) and \\(y\\) could be mutual effects of a common cause, and yet still knowing about \\(x\\) could carry information about \\(y\\) even if manipulating \\(x\\) by divine intervention would not change \\(y\\), and vice versa. "],["app-93-data-sets-politeness.html", "D.8 Politeness data", " D.8 Politeness data D.8.1 Nature, origin and rationale of the data The politeness data is borrowed from Winter and Grawunder (2012).97 The data set contains measurements of voice pitch obtained from a \\(2 \\times 2\\) factorial design, with factors gender and context. The data is from Korean speakers. Here is a glimpse of the data: politeness_data &lt;- aida::data_polite glimpse(politeness_data) ## Rows: 83 ## Columns: 5 ## $ subject &lt;chr&gt; &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, &quot;F1&quot;, … ## $ gender &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, … ## $ sentence &lt;chr&gt; &quot;S1&quot;, &quot;S1&quot;, &quot;S2&quot;, &quot;S2&quot;, &quot;S3&quot;, &quot;S3&quot;, &quot;S4&quot;, &quot;S4&quot;, &quot;S5&quot;, &quot;S5&quot;, … ## $ context &lt;chr&gt; &quot;pol&quot;, &quot;inf&quot;, &quot;pol&quot;, &quot;inf&quot;, &quot;pol&quot;, &quot;inf&quot;, &quot;pol&quot;, &quot;inf&quot;, &quot;pol… ## $ pitch &lt;dbl&gt; 213.3, 204.5, 285.1, 259.7, 203.9, 286.9, 250.8, 276.8, 231.… The variables contained here are: subject: an indicator for each experimental participant gender: an indicator of each participants gender (only binary) sentence: an indicator of the sentence spoken by the participant context: the main manipulation of whether the context was a “polite” or “informal” setting pitch: the measured voice pitch (presumably: average over the sentence spoken) D.8.2 Hypotheses The main research question of interest here is whether voice pitch is higher in “polite” contexts than in “informal”, and whether this effect is more or less present for male or female speakers. D.8.3 Summary statistics Here are the mean pitch values for the four relevant design cells: ## # A tibble: 4 x 3 ## # Groups: gender [2] ## gender context mean_pitch ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 M pol 133. ## 2 M inf 144. ## 3 F pol 233. ## 4 F inf 261. D.8.4 Visualization Here is a plot showing the distribution of pitch measures in each group (small semi-transparent points), as well the cell means (big solid points): References "],["app-94-open-science.html", "E Open science practices", " E Open science practices [Main author of chapter: Özge Özenoglu] This chapter is dedicated to reflecting on open science practices regarding data collection, analysis and sharing the results with the scientific community. To motivate why this is necessary, Section E.1 unravels how publication bias, questionable research practices, inflated error rates, and the lack of transparency threaten the credibility of psychological science. This section will be somewhat pessimistic. However, there is no need to despair! Section E.2 provides an overview of measures to solve (or at least reduce) the problems from the previous section. Finally, Section E.3 summarizes what everybody can do to embrace transparent, open, and replicable research. "],["app-94-replication-crisis.html", "E.1 Psychology’s replication crisis", " E.1 Psychology’s replication crisis What happens with a scientific discipline if it predominantly fails to replicate98 previous discoveries? This question frequently arose after a groundbreaking project revealed that psychology is facing a replication crisis. In 2011, the Open Science Collaboration (2015) launched a large-scale project – the so-called “Reproducibility Project” – in which they attempted 100 direct replications of experimental and correlational studies in psychology. The results are worrisome: 97% of the original studies reported statistically significant results, whereas the initiative could merely replicate 36% of the results.99 This low replicability rate, however, does not imply that about two-thirds of the discoveries are wrong. It emphasizes that research outcomes should not be taken at face value but scrutinized by the scientific community. Most of all, the results show that scientists should take action to increase the replicability of their studies. This urgent need is further fueled by the discovery that the prevalence of low replicability rates diminishes the public’s trust (e.g., Wingen, Berkessel, and Englich 2019) and, in the long run, might undermine the credibility of psychology as a science. In order to know how to increase a study’s replicability, it is crucial to investigate what causes replications to fail. Essentially, failing to replicate the significant results of the original study has three roots: The original study yielded a false-positive, the replication study yielded a false-negative, or too divergent methodologies led to two different outcomes (Open Science Collaboration 2015). We focus here on false-positives and diverging methodologies. We only briefly touch on false-negatives in the replication study when we talk about low statistical power. E.1.1 Publication bias, QRP’s, and false-positives Weighing evidence in favor of verifying preconceptions and beliefs rather than falsifying them is a cognitive bias (confirmation bias). This natural form of reasoning can be a considerable challenge in doing proper research, as the full amount of information should be taken into account and not just those consistent with prior beliefs. Confirmation bias also manifests itself in a tendency to see patterns in the data and perceive meaning, when there is only noise (apophenia) and overestimating the prediction of an event after it occurred, typically expressed as “I knew it all along!” (hindsight bias). These biases further pave the way for a skewed incentive structure that prefers confirmation over inconclusiveness or contradiction. In psychological science, there is a vast prevalence of publications that report significant (\\(p &lt; 0.05\\)) and novel findings in contrast to null-results (e.g., Sterling 1959) or replication studies (e.g., Makel, Plucker, and Hegarty 2012). This substantial publication bias towards positive and novel results may initially seem entirely plausible. Journals might want to publish flashy headlines that catch the reader’s attention rather than “wasting” resources for studies that remain inconclusive. Furthermore, scientific articles that report significant outcomes are more likely to be cited (Duyx et al. 2017) and thus may increase the journal’s impact factor (JIF). Replication studies might not be incentivized because they are considered tedious and redundant. Why publish results that don’t make new contributions to science?100 Publication bias operates at the expense of replicability and thus the reliability of science. The pressure of generating significant results can further fuel the researcher’s bias (Fanelli 2010). Increasing cognitive biases towards the desired positive result could therefore lead researchers to draw false conclusions. To cope with this “Publish or Perish” mindset, researchers may increasingly engage in questionable research practices (QRP’s) as a way of somehow obtaining a \\(p\\)-value less than the significance level \\(\\alpha\\). QRP’s fall into the grey area of research and might be the norm in psychological science. Commonly researchers “\\(p\\)-hack” their way to a significant \\(p\\)-value by analyzing the data multiple ways through exploiting the flexibility in data collection and data analysis (researcher degrees of freedom). This exploratory behavior is frequently followed by selective reporting of what “worked”, so-called cherry-picking. Such \\(p\\)-hacking also takes on the form of unreported omission of statistical outliers and conditions, post hoc decisions to analyze a subgroup, or to change statistical analyses. Furthermore, researchers make rounding errors by reporting their results to cross the significance threshold (.049 becomes .04), they randomly stop collecting data when the desired \\(p\\)-value of under .05 pops up, or they present exploratory hypotheses101 as being confirmatory (HARKing, Hypothesizing After the Results are Known). Diederik Stapel, a former professor of social psychology at Tilburg University, writes in his book Faking Science: A True Story of Academic Fraud about his scientific misconduct. He shows how easy it is to not just fool the scientific community (in a discipline where transparency is not common practice) but also oneself: I did a lot of experiments, but not all of them worked. […] But when I really believed in something […] I found it hard to give up, and tried one more time. If it seemed logical, it must be true. […] You can always make another couple of little adjustments to improve the results. […] I ran some extra statistical analyses looking for a pattern that would tell me what had gone wrong. When I found something strange, I changed the experiment and ran it again, until it worked (Stapel 2014, 100–101). If the publication of a long-standing study determines whether researchers get funding or a job, it is perfectly understandable why they consciously or subconsciously engage in such practices. However, exploiting researcher degrees of freedom by engaging in QRP’s poses a significant threat to the validity of the scientific discovery by blatantly inflating the probability of false-positives. By not correcting the significance threshold accordingly, many analyses are likely to be statistically significant just by chance, and reporting solely those that “worked” additionally paints a distorted picture on the confidence of the finding. Example. Let’s illustrate \\(p\\)-hacking based on a popular comic by xkcd. In the comic, two researchers investigate whether eating jelly beans causes acne. A \\(p\\)-value larger than the conventional \\(\\alpha\\)-threshold doesn’t allow them to reject the null hypothesis of no effect. Well, it must be one particular color that is associated with acne. The researchers now individually test the 20 different colors of jelly beans. Indeed, numerous tests later, they obtain the significant \\(p\\)-value that they have probably been waiting for. The verdict: Green jelly beans are associated with acne! Of course, this finding leads to a big headline in the newspaper. The article reports that there is only a 5% chance that the finding is due to coincidence. However, the probability that the finding is a fluke is about 13 times higher than anticipated and reported in the paper. Let’s check what happened here: In the first experiment (without color distinctions), there was a \\(5\\%\\) chance of rejecting \\(H_0\\), and consequently a \\(95\\%\\) chance of failing to reject \\(H_0\\). Since the \\(\\alpha\\)-level is the upper bound on a false-positive outcome, the confidence in the finding reported in the newspaper would have been true if the researchers had kept it with just one hypothesis test. However, by taking the 20 different colors into account, the probability of obtaining a non-significant \\(p\\)-value in each of the 20 tests dropped from \\(95\\%\\) to \\(0.95^{20} \\approx 35.85\\%\\), leaving room for a \\(64.15\\%\\) chance that at least one test yielded a false-positive. The probability of at least one false-positive due to conducting multiple hypothesis tests on the same data set is called the family-wise error rate (FWER). Formally, it can be calculated like so: \\[\\alpha_{FWER} = 1 - (1 - \\alpha)^n,\\] where \\(\\alpha\\) denotes the significance level for each individual test, which is conventionally set to \\(\\alpha = 0.05\\), and \\(n\\) the total number of hypothesis tests. Conducting multiple tests on the same data set and not correcting the family-wise error rate accordingly, therefore makes it more likely that a study finds a statistically significant result by coincidence. To investigate how prevalent QRP’s are in psychological science, Leslie John et al. (John, Loewenstein, and Prelec 2012) surveyed over 2000 psychologists regarding their engagement in QRP’s. They found that 66.5% of the respondents admitted that they failed to report all dependent measures, 58% collected more data after seeing whether the results were significant, 50% selectively reported studies that “worked”, and 43.4% excluded data after looking at the impact of doing so. Based on the self-admission estimate, they derived a prevalence estimate of 100% for each mentioned QRP. These numbers once more reinforce the suspicion that QRP’s are the norm in psychology. Together with the fact that these practices can blatantly inflate the false-positive rates, one might conclude that much of the psychological literature cannot be successfully replicated and thus might be wrong. E.1.2 Low statistical power Another factor that can account for unreliable discoveries in the scientific literature is the persistence of highly underpowered studies in psychology (e.g., Cohen 1962; Sedlmeier and Gigerenzer 1989; Marjan, Dijk, and Wicherts 2012; Szucs and Ioannidis 2017). A study’s statistical power is the probability of correctly rejecting a false null hypothesis, i.e., the ideal in NHST. Defined as \\(1 − \\beta\\), power is directly related to the probability of encountering a false-negative, meaning that low-powered studies are less likely to reject \\(H_0\\) when it is in fact false. Figure E.1 shows the relationship between \\(\\alpha\\)-errors and \\(\\beta\\)-errors (slightly adapted from a previous figure in Chapter 16.4), as well as the power to correctly rejecting \\(H_0\\). Figure E.1: Relationship between power, \\(\\alpha\\) and \\(\\beta\\)-errors. It may be tempting to conclude that a statistically significant result of an underpowered study is “more convincing”. However, low statistical power also decreases the probability that a significant result reflects a true effect (that is, that the detected difference is really present in the population). This probability is referred to as the Positive Predictive Value (PPV). The PPV is defined as \\[PPV = \\frac{(1 - \\beta) \\cdot R}{(1 - \\beta) \\cdot R + \\alpha},\\] where \\(1 − \\beta\\) is the statistical power, \\(R\\) is the pre-study odds (the odds of the prevalence of an effect before conducting the experiment), and \\(\\alpha\\) is the type I error. Choosing the conventional \\(\\alpha\\) of 5% and assuming \\(R\\) to be 25%, the PPV for a statistically significant result of a study with 80% power - which is deemed acceptable - is 0.8. If the power is reduced to 35%, the PPV is 0.64. A 64% chance that a discovered effect is true implies that there is a 36% chance that a false discovery was made. Therefore, low-powered studies are more likely to obtain flawed and unreliable outcomes, which contribute to the poor replicability of discoveries in the scientific record. Another consequence of underpowered studies is the overestimation of effect sizes102 and a higher probability of an effect size in the wrong direction. These errors are referred to as Type M (Magnitude) and Type S (Sign) errors, respectively (Gelman and Carlin 2014). If, for example, the true effect size (which is unknown in reality) between group \\(A\\) and \\(B\\) is 20 ms, finding a significant effect size of 50 ms would overestimate the true effect size by a factor of 2.5. If we observe an effect size of -50 ms, we would even wrongly assume that group \\(B\\) performs faster than group \\(A\\). The statistical power, as well as Type S and Type M error rates can be easily estimated by simulation. Recall the example from Chapter 16.6.3, where we investigated whether the distribution of IQ’s from a sample of CogSci students could have been generated by an average IQ of 100, i.e., \\(H_0: \\mu_{CogSci} = 100 \\ (\\delta = 0)\\). This time, we’re doing a two-tailed \\(t\\)-test, where the alternative hypothesis states that there is a difference in means without assigning relevance to the direction of the difference, i.e., \\(H_a: \\mu_{CogSci} \\neq 100 \\ (\\delta \\neq 0)\\). We plan on recruiting 25 CogScis and set \\(\\alpha = 0.05\\). Before we start with the real experiment, we check its power, Type S, and Type M error rates by hypothetically running the same experiment 10000 times in the WebPPL code box below. From the previous literature, we estimate the true effect size to be 1 (CogScis have an average IQ of 101) and the standard deviation to be 15. Since we want to know how many times we correctly reject the null hypothesis of equal means, we set the estimated true effect size as ground truth (delta variable) and sample from \\(Normal(100 + \\delta, 15)\\). Variable t_crit stores the demarcation point for statistical significance in a \\(t\\)-distribution with n - 1 degrees of freedom. We address the following questions: If the true effect size is 1, what is the probability of correctly rejecting the null hypothesis of equal means (= an effect size of 0)? If the true effect size is 1, what is the probability that a significant result will reflect a negative effect size (that is, an average IQ of less than 100)? If the true effect size is 1 and we obtain a statistically significant result, what is the ratio of the estimated effect size to the true effect size (exaggeration ratio)? Play around with the parameter values to get a feeling of how power can be increased. Remember to change the t_crit variable when choosing a different sample size. The critical \\(t\\)-value can be easily looked up in a \\(t\\)-table or computed with the respective quantile function in R (e.g, qt(c(0.025,0.975), 13) for a two-sided test with \\(\\alpha = 0.05\\) and \\(n = 14\\)). For \\(n \\geq 30\\), the \\(t\\)-distribution approximates the standard normal distribution. var delta = 1; // true effect size between mu_CogSci and mu_0 var sigma = 15; // standard deviation var n = 25; // sample size per experiment var t_crit = 2.063899; // +- critical t-value for n-1 degrees of freedom var n_sim = 10000; // number of simulations (1 simulation = 1 experiment) ///fold: var se = sigma/Math.sqrt(n); // standard error // Effect size estimates: /* In each simulation, drep(n_sim) takes n samples from a normal distribution centered around the true mean and returns a vector of the effect sizes */ var drep = function(n_sim) { if(n_sim == 1) { var sample = repeat(n, function(){gaussian({mu: 100 + delta, sigma: sigma})}); var effect_size = [_.mean(sample)-100]; return effect_size; } else { var sample = repeat(n, function(){gaussian({mu: 100 + delta, sigma: sigma})}); var effect_size = [_.mean(sample)-100]; return effect_size.concat(drep(n_sim-1)); } } // vector of all effect sizes var ES = drep(n_sim); // Power: /* get_signif(n_sim) takes the number of simulations and returns a vector of only significant effect sizes. It calculates the absolute observed t-value, i.e., |effect size / standard error| and compares it with the critical t-value. If the absolute observed t-value is greater than or equal to the critical t-value, the difference in means is statistically significant. Note that we take the absolute t-value since we're conducting a two-sided t-test and therefore also have to consider values that are in the lower tail of the sampling distribution. */ var get_signif = function(n_sim) { if(n_sim == 1) { var t_obs = Math.abs(ES[0]/se); if(t_obs >= t_crit) { return [ES[0]]; } else { return []; } } else { var t_obs = Math.abs(ES[n_sim-1]/se); if(t_obs >= t_crit) { return [ES[n_sim-1]].concat(get_signif(n_sim-1)); } else { return [].concat(get_signif(n_sim-1)); } } } // vector of only significant effect size estimates var signif_ES = get_signif(n_sim); // proportion of times where the null hypothesis would have been correctly rejected var power = signif_ES.length/n_sim; // Type S error: /* get_neg_ES(n_sim) takes the number of simulations and returns a vector of significant effect sizes that are negative. */ var get_neg_ES = function(n_sim){ if(n_sim == 1){ if(signif_ES[n_sim-1] As the power of replication studies is typically based on the reported effect size of the original study, an inflated effect size also renders the power of the replication study to be much lower than anticipated. Hence, an underpowered study may additionally increase the replications’ probability of encountering a type II error, which may lead replicators to misinterpret the statistical significance of the original study as being a false-positive. Besides being self-defeating for authors of the original study, this may compromise the veracity of the cumulative knowledge base that direct replications aim to build. E.1.3 Lack of transparency When it comes to the reporting of methodologies, there seem to be disagreements within the scientific community. In his new Etiquette for Replication, Daniel Kahneman (2014) called for new standards for conducting direct replication studies. Concretely, replicators should be obliged to consult the authors of the original study – otherwise, the replication should not be valid. According to him, the described methodologies in psychology papers are too vague to permit direct replications. He argues that “[…] behavior is easily affected by seemingly irrelevant factors” and that paraphrasing experimental instructions discards crucial information, as “[…] their wording and even the font in which they are printed are known to be significant”. Kahneman’s proposed rules for the interaction between authors and replicators led to heated discussions within the discipline. Chris Chambers (2017, 52–55) refers to several responses to Kahneman, among others, from psychologist Andrew Wilson. In his blog post, titled Psychology’s real replication problem: our Methods sections, he takes an unequivocal stand on rejecting rigid standards for replication studies: If you can’t stand the replication heat, get out of the empirical kitchen because publishing your work means you think it’s ready for prime time, and if other people can’t make it work based on your published methods then that’s your problem and not theirs (Wilson 2014). Of course, there are also voices between those extremes that, even if they disagree with Kahneman’s proposal, agree that there are shortcomings in reporting methodologies. So why are method sections not as informative as they should be? A reason might be that the trend towards disregarding direct replications – due to lacking incentives – decreases the importance of detailed descriptions about the experimental design or data analyses. Furthermore, editors may favor brief method descriptions due to a lack of space in the paper. To minimize a variation in methodologies that might account for different outcomes, it is essential that journal policies change accordingly. In addition to detailed reporting of methodologies, further materials such as scripts and raw data are known to facilitate replication efforts. In an attempt to retrieve data from previous studies, Hardwicke and Ioannidis (2018) encountered that almost 40% of the authors did not respond to their request in any form, followed by almost 30% not willing to share their data. The reluctance to share data for reanalysis can be related to weaker evidence and more errors in reporting statistical results (Wicherts, Bakker, and Molenaar 2011). This finding further intensifies the need for assessing the veracity of the reported results by reanalyzing the raw data, i.e., checking its computational reproducibility. However, computational replication attempts can hardly be conducted without transparency of the original study. To end this vicious circle and make sharing common practice, journals could establish mandatory sharing policies or provide incentives for open practices. References "],["app-94-remedies.html", "E.2 Possible remedies", " E.2 Possible remedies The intertwined connections between contributing factors show how quickly the reproducibility and replicability of a study can be compromised. In order to safeguard research integrity, it is therefore necessary that many factors are addressed. Over the past years, the severity of the consequences of irreplicable research has spawned many solution attempts. The following provides an overview of the most effective measures so far. E.2.1 Improve scientific rigor E.2.1.1 Preregistration A preregistration is a protocolled research plan prior to data collection – including hypotheses, methodology, research design, and statistical analyses. With this commitment, researcher degrees of freedom are drastically constrained, so that (sub)conscious engagement in QRP’s like \\(p\\)-hacking or HARKing is limited. Such practices are limited because preregistered studies draw a clear line between exploratory and confirmatory analyses. The confirmatory analyses regarding the prespecified hypothesis (i.e., the prediction) are protocolled in advance so that exploring the data and then selectively reporting is not possible without being detectable. Some may perceive preregistrations as a limitation on “scientific creativity”. However, preregistrations are not intended to deter researchers from exploring their data. Examining the data is the core of generating new hypotheses for further confirmatory analyses, which is ultimately vital for scientific progress. Nevertheless, to counteract a potential inflation of false-positive rates, any \\(p\\)-values calculated by a test deceived after data inspection need to be marked as post hoc. You do not need to write a preregistration from scratch. In fact, websites such as the Open Science Framework (OSF) or AsPredicted offer useful templates, only needed to be filled out as detailed as possible. Below is a list of what your preregistration should ideally include. For more information on each point listed, please take a look at the preregistration template provided by the OSF. Study information: title, authors, description (optional), hypotheses Design plan: study type, blinding, study design, randomization (optional) Sampling plan: existing data, explanation of existing data (optional), data collection procedures, sample size, sample size rationale (optional), stopping rule (optional) Analysis plan: statistical models, transformations (optional), inference criteria (optional), data exclusion (optional), missing data (optional), exploratory analyses (optional) E.2.1.2 Know your stats 1. Learn more about statistical frameworks A good departure point for increasing research quality is to learn more about statistical frameworks, such as Null Hypothesis Significance Testing. A common misinterpreted and misused concept in NHST is the \\(p\\)-value itself. Therefore, when adopting a frequentist approach to hypothesis testing, it is important to intensively engage with the purpose and interpretation of the \\(p\\)-value. In the exercise box below (repeated with minor changes from before), you can test your knowledge about it. Please re-visit Chapter 16.2 if you feel like brushing up on the topic. Self-test on \\(p\\)-values Which statement(s) about \\(p\\)-values is/are true? The \\(p\\)-value is… …the probability that the null hypothesis \\(H_0\\) is true. …the probability that the alternative hypothesis \\(H_a\\) is true. …the probability, derived from the assumption that \\(H_0\\) is true, of obtaining an outcome for the chosen test statistic that is the exact same as the observed outcome. …a measure of evidence in favor of \\(H_0\\). …the probability, derived from the assumption that \\(H_0\\) is true, of obtaining an outcome for the chosen test statistic that is the same as the observed outcome or more extreme towards \\(H_a\\). …the probability of a Type-I error. …a measure of evidence against \\(H_0\\). Solution Statements e. and g. are correct. Another statistical framework worth considering is a Bayesian approach to hypothesis testing. Unlike frequentist statistics, Bayesian data analysis does not bake in binary decision routines, such as to reject or not to reject a given null hypothesis. Instead, evidence is quantified. Assigning less importance to a single value that decides whether a study is published or not might reduce the pressure to pass the threshold at all costs. Moreover, Bayesian statistics provide a broader spectrum for drawing conclusions from the results. The posterior tells us how probable a hypothesis is given the data, \\(P(H|D)\\). In contrast, frequentist hypothesis testing gives the probability of the observed data or more extreme data (denoted by the asterisk) if the null hypothesis were true, \\(P(D^*|H_0)\\). This not only lacks information about the correctness of the alternative hypothesis (which is often the research question) but also that of the null hypothesis itself. While a non-significant \\(p\\)-value is no go-ahead for accepting \\(H_0\\), Bayes factors can in fact give evidence in favor of \\(H_0\\) by comparing both hypotheses in light of the data. 2. Control for the error rate The most obvious way to reduce the probability of a false-positive is to lower the significance threshold. Indeed, many researchers argue that a 1 in 20 chance of obtaining a false-positive is too high and call for lowering the conventional \\(\\alpha\\) threshold from 0.05 to 0.005 (Benjamin et al. 2017). This call sparked a hot debate in the scientific community. Lakens et al. (2018) argue that switching to a lower threshold might even have negative consequences on the feasibility of replication studies. Researchers should instead justify the choice of the threshold individually. Further resources on the “\\(\\alpha\\)-debate” are linked in Section E.4. Regardless of whether you agree with “Team Redefine \\(\\alpha\\)” or not, it is crucial to further correct the threshold if at least two analyses were conducted on the same data set. Probably the simplest and most conservative method to adjust the family-wise error rate to 0.05 is to use a Bonferroni correction, where the per-contrast \\(\\alpha\\)-level is divided by the number \\(n\\) of tests on the same data set. In the fishy jelly bean study from the previous section, the researchers could have corrected the error rate as follows: \\[ \\alpha_{corrected} = \\frac{\\alpha}{n} = \\frac{0.05}{20} = 0.0025 \\] This new cut-off point at 0.0025 ensures an upper bound of 5% for a false-positive result despite multiple testing: \\[ \\alpha_{FWER} = 1-(1-0.0025)^{20} \\approx 0.049 \\] So, in order to claim a statistically significant link between acne and the jelly bean flavor at hand, the \\(p\\)-value in this particular test has to be smaller than 0.0025. 3. Increase statistical power Power is mainly improved by increasing the underlying effect size, decreasing the standard deviation, increasing the \\(\\alpha\\)-level, and increasing the sample size (see figure E.2). However, not all factors are feasible, practical, or common. The true effect size is unknown in reality and needs to be estimated when calculating the power. Since it is not influenceable, the true effect size is as big as it gets. The standard deviation can theoretically be reduced (e.g., by controlling for measurement error), but only up to a point. A higher demarcation point for statistical significance simultaneously entails a higher risk of making a false discovery and is thus not desirable at all. This leaves us with the sample size. Intuitively put, increasing the number of observations in the sample will provide more information about the population we want to generalize to (think Law of Large Numbers). 100 CogSci students are more representative of the whole CogSci population than only 25 students. Therefore, the more data we collect, the likelier we get to the true average IQ. Concretely, a larger sample size will decrease the standard error of the mean (SEM), which is the standard deviation of the sample means. With a smaller standard error, smaller effect sizes are detectable. The minimum required sample size to detect a given effect size is often calculated with a so-called power analysis (see Section 16.4). If the power analysis yields a sample size estimate that is difficult to realize, it may be an indicator that the effect size is so minor that the study could even not be worth the effort. If authors still want to conduct their studies, inviting many more participants and thereby prolonging the experiment can conflict with time and financial limitations. According to the motto “where there’s a will, there’s a way”, authors can team up with other labs to achieve the calculated sample size. Useful resources and software for power analyses are linked in Section E.4. Figure E.2: Factors that affect the power of a study. A| An example of low statistical power. B| A larger effect size makes differences easier to detect. C| Less variability in the groups makes smaller differences detectable. D| A higher \\(\\alpha\\)-level increases the probability of rejecting \\(H_0\\). 4. Correlation \\(\\neq\\) Causation As already outlined in Chapter 5.3, a positive or negative correlation must not be interpreted as a causal relationship between two measurements \\(A\\) and \\(B\\). In fact, there can also be a third variable \\(C\\) that caused both \\(A\\) and \\(B\\). Let’s illustrate erroneous conflation of correlation and causation with an example. It is known that a rapid drop in barometric pressure (\\(A\\)) is followed by stormy weather (\\(B\\)). This co-occurrence, however, cannot be interpreted as \\(A\\) causing \\(B\\), i.e., the barometric pressure causing a storm. Rather, there is a third factor \\(C\\), that causes both the drop in barometric pressure and stormy weather, namely the falling air pressure that precedes both events. An observed correlation between two measurements, attributed to either a third (confounding) variable or to random chance, is called a spurious relationship or spurious correlation. Note that spurious correlations are often not readily identifiable, which is why we never can surely speak of causation. This realization is important to keep in mind when interpreting the results of a study. E.2.2 Realigning incentive structures E.2.2.1 Registered Reports A Registered Report (RR) is a preregistration that is integrated into the publication process. Here, peer review splits into two stages: one before data collection and one after conducting the experiment. Initially, the manuscript is triaged by an editorial team for rigor, feasibility, and suitability of the research proposal. If approved, the manuscript passes to the first stage of peer review, where the study design, methods, and proposed analyses are assessed in more depth. In addition to other methodological aspects, reviewers assess if proposed studies are adequately powered, requiring the a priori statistical power to be at least 90%. In the first stage, peer reviewers preliminary accept the submitted manuscript, ask the researchers to revise or reject it right away. If the manuscript passes the first stage, it is “in principle accepted” (IPA) and guaranteed to be published – irrespective of the results. After data collection and analyses, the manuscript is completed with the results section and discussion and then submitted to stage two peer review. To be admissible, authors are often required to make their anonymized raw data and study materials publicly available and provide a link within the stage two manuscript. In this last stage, the adherence to the manuscript approved in stage one is assessed. If the results are reported thoroughly, and potential deviations from the IPA report are justified and transparent, the paper is published. Registered Reports eliminate publication bias. By accepting the manuscript in stage one of peer review, the respective journal guarantees the publication of the study, irrespective of whether the outcomes are null results or significant. With results-blind peer review, fewer papers with non-significant results should land in the file drawers103 and instead be added to the scientific literature. By eliminating publication bias, Registered Reports aim to take off the pressure from researchers to chase significant \\(p\\)-values and shift the focus to valuing good quality research that complies with the hypothetico-deductive model of the scientific method. Two recent studies suggest that Registered Reports are indeed effective in realigning incentive structures. Scheel, Schijen, and Lakens (2020) found that 56% of the Registered Reports did not yield statistically significant results. In a study by Allen and Mehler (2019), the percentage was even higher. The results vary tremendously from the authors’ estimation of 5%-20% of null results in traditional literature. If many journals and authors promote this publication format, it is conceivable that the skewed incentive structure can be normalized entirely. Indeed, the number of journals offering Registered Reports is increasing exponentially. What started with three journals in 2013 – with Cortex as the first journal to implement them – has been steadily growing ever since, with currently 273 participating journals at the time of writing (end of 2020). With realigning incentive structures, it may be reasonable that also a journal’s prestige is evaluated differently. Instead of depending on citations, a journal’s impact could be assessed on how much it promotes open science practices (see TOP Factor) and replicable research (see Replicability-Index). E.2.2.2 Replication initiatives Direct replications are the cornerstone of science. They assure the validity and credibility of scientific discoveries on which further research can build upon. However, a neophiliac incentive system makes this scrutiny unlikely to be published and may lead researchers to see no sense in attempting direct replications of previous findings. Here are two solution attempts journals may adopt to stop neophilia in favor of preserving psychology’s “self-correcting system”: 1. Pottery Barn Rule The “Pottery Barn Rule” is a solution attempt proposed by psychologist Sanjay Srivastava (2012). According to the motto “you break it, you buy it”, he proposes that once a journal has published a study, it should also be accountable to publish direct replications of the findings. Importantly, this commitment also includes failed replications and replication attempts despite a flawed methodology of the original study. An example of the implementation of such a concept is the Psychology and Neuroscience Section of Royal Society Open Science. 2. Registered Replication Reports A Registered Replication Report (RRR) is a publication format that is entirely dedicated to direct replications. It consists of multi-lab direct replication studies that aim to precisely estimate effect sizes in studies whose results are highly influential in their field or attracted media attention. The Association for Psychological Science (APS) is the first organization to implement and encourage this extension of classic Registered Reports. E.2.3 Promote transparency E.2.3.1 Open Science Badges To provide an incentive for open science practices, more and more journals are adopting badges. By sharing data, providing materials, or preregistering, the authors “earn” the corresponding badge, which will be depicted in the respective article. The three types of badges are shown in figure E.3. Figure E.3: Badges to incentivize preregistration, as well as data and material sharing. This simple solution already shows initial indications of a positive impact. Kidwell et al. (2016) found that implementing badges increases data and material sharing. Although the authors did not include the impact of the preregistration badge in their assessment, it is conceivable that the possibility of earning the badge will result in more preregistrations – or at least awareness of their existence. E.2.3.2 TOP Guidelines The Transparency and Openness Promotion Guidelines comprise open science standards for eight categories. Journals that promote open science practices can implement one or more guidelines into their policy, thereby choosing the level of stringency. For example, if a journal adopts level III (the most stringent level) of the “Data” standard, it requires authors to make their data retrievable for readers. In addition, the journal undertakes to independently reproduce the results before publishing the paper. A full list of the TOP Guidelines can be found on the website of the Center for Open Science. E.2.3.3 Disclosure statements Sometimes it doesn’t need much to cause a great effect. In fact, it can only take 21 words to enhance integrity in research papers: We report how we determined our sample size, all data exclusions (if any), all manipulations, and all measures in the study. This 21-word solution by Simmons, Nelson, and Simonsohn (2012) requests from researchers to honestly report everything in order to render this statement true. For example, if there were data exclusions in a reaction time study, the disclosure statement could be supplemented with a sentence like: “We excluded every individual trial faster than 100 ms and slower than 1500 ms.” If such disclosure statements were the norm or mandatory, authors who want to conceal details of data collection and analysis would have to actually lie about their disclosure. And deliberate lying probably exceeds the “grey area” in research. Excursion: Improve usability Sharing analysis scripts and (raw) data is certainly a good starting point to facilitate replication efforts. However, it is also important to ensure that code and data are correctly interpreted by the reader. The following three best practices will help improve the usability of your files. Add a README file. A README file is usually the first place to go when exploring a project repository (e.g., on OSF or GitHub). Ideally, it should give methodological information, a walkthrough on the files and the folder structure of the project, and contact information (especially the full name and a permanent email address). It is also useful to document the software (preferably open source), versioning, and packages needed for analysis. Provide metadata. Metadata, that is, “data about data”, refers to structural, descriptive, or administrative properties of the gathered data. It gives, to name a few, information about who collected the data, the time period, and the location of data collection. Furthermore, it refers to the actual content of the data, e.g., what the column names mean and what types of measurements are stored. A detailed description of all measured variables is also called a “Codebook”. Comment your code. Reading into someone else’s code is hard enough. It gets more time-consuming and nerve-racking if the code is also not supplemented with proper comments. Let the reader know what your code does by providing useful comments and descriptive variable names. This also has the benefit that you have a better understanding of the analysis script when you come back to it at a later point in time. References "],["app-94-recap.html", "E.3 Chapter summary", " E.3 Chapter summary In this chapter, we peeked into the abyss of psychology’s replication crisis and learned how biases towards significant outcomes fuel the engagement in questionable research practices, ultimately compromising the validity of the finding. We also learned that underpowered studies will not only hardly find true-positives, but also render detected effects useless. Lastly, the lack of transparency, be it in reported methods or keeping data and analysis code private, may account for moderators between the original and replication study. Later, we looked at several promising solution attempts and initial prospects of improvement. It is important to note though, that there is no single panacea for all obstacles to good scientific practices. It is rather a combination of several measures, such as preregistration/Registered Reports, badges, TOP guidelines, and replication initiatives. The existence and increased implementation of such measures manifest that standards in psychological research are about to change. The replication crisis is followed by a credibility revolution, prompting psychology to reward what should be rewarded - scientific rigor and integrity. Our little journey through the replication crisis ends here. Here are the most important points to keep in mind: Limit exploitation of researcher degrees of freedom Be aware of cognitive biases, such as confirmation bias, apophenia, and hindsight bias Raise awareness and be aware of QRP’s and their implications for the validity of research outcomes Preregister your study Limit statistical fallacies Learn more about Null Hypothesis Significance Testing Consider adopting a Bayesian approach to hypothesis testing Control for error rates Make sure that your study has sufficient power (conduct a power analysis) Keep in mind that correlation does not imply causation Eliminate publication bias Consider proposing an upcoming study as a Registered Report Replicate! Embrace transparency Make your raw data, study materials, and analysis scripts available, along with README files Metadata/Codebooks Descriptive comments and variable names in analysis scripts You did not engage in selective reporting? Awesome! Let the reader know by explicitly writing a disclosure statement (e.g., 21-word solution) "],["app-94-resources.html", "E.4 Further resources", " E.4 Further resources Incentives More information on Registered Reports: https://www.cos.io/initiatives/registered-reports Assessing the effectiveness of Registered Reports: Chambers, C. D., Tzavella, L. (2020). Registered Reports: Past, Present and Future. https://doi.org/10.31222/osf.io/43298 Hardwicke, T. E., Ioannidis, J. P. A. (2018). Mapping the universe of registered reports. Nature Human Behaviour, 2, 793-796. https://doi.org/10.1038/s41562-018-0444-y Workflow of Registered Replication Reports (example AMPPS): https://www.psychologicalscience.org/publications/ampps/rrr-guidelines Brian Nosek on the importance of replication: https://www.youtube.com/watch?v=wsRmyW8GmJs Statistics Researcher degrees of freedom and QRP’s Two papers on the reasons behind false discoveries: Simmons, J. P., Nelson, L. D., Simonsohn, U. (2011). False-Positive Psychology: Undisclosed Flexibility in Data Collection and Analysis Allows Presenting Anything as Significant. Psychological Science, 22(11), 1359-1366. https://doi.org/10.1177/0956797611417632 Ioannidis, J. P. A. (2005) Why Most Published Research Findings Are False. PLoS Medicine, 2(8), e124. https://doi.org/10.1371/journal.pmed.0020124 More on the \\(\\alpha\\)-debate: Morey, R. D. (2018, Jan 1). Redefining statistical significance: the statistical arguments [blog post]. Retrieved from https://medium.com/@richarddmorey/redefining-statistical-significance-the-statistical-arguments-ae9007bc1f91 de Ruiter, J. (2019). Redefine or justify? Comments on the alpha debate. Psychonomic Bulletin &amp; Review, 26, 430-433. https://doi.org/10.3758/s13423-018-1523-9 Overview of methods to adjust the family-wise error rate: Chen, S.-Y., Feng, Z., Yi, X. (2017). A general introduction to adjustment for multiple comparisons. Journal Of Thoracic Disease, 9(6), 1725-1729. https://doi.org/10.21037/jtd.2017.05.34 Statistical power An introductory video on statistical power by the OSF: https://www.youtube.com/watch?v=-ZU7fbvSJ60 A video on consequences of low statistical power by the OSF: https://www.youtube.com/watch?v=7daQRvRO-NE&amp;t=20s An R package to assess Type S and Type M error rates: https://cran.r-project.org/web/packages/retrodesign/index.html Correcting for inflated effect sizes fueled by publication bias: Simonsohn, U., Nelson, L. D., Simmons, J. P. (2014). \\(p\\)-Curve and Effect Size: Correcting for Publication Bias Using Only Significant Results. Perspectives on Psychological Science, 9(6), 666-681. https://doi.org/10.1177/1745691614553988 Frequentist power analysis in R: https://www.statmethods.net/stats/power.html G*Power - A Software for frequentist power analysis: https://www.psychologie.hhu.de/arbeitsgruppen/allgemeine-psychologie-und-arbeitspsychologie/gpower.html A blogpost on Bayesian power analysis: https://solomonkurz.netlify.app/post/bayesian-power-analysis-part-i/ Transparency A survey that aimed to gain insight into why authors keep their data private: Houtkoop, B. L., Chambers, C., Macleod, M., Bishop, D. V. M., Nichols, T. E., Wagenmakers, E.-J. (2018). Data Sharing in Psychology: A Survey on Barriers and Preconditions. Advances in Methods and Practices in Psychological Science, 1(1), 70-85. https://doi.org/10.1177/2515245917751886 More information on open science badges: https://www.cos.io/initiatives/badges More information on TOP Guidelines: https://www.cos.io/initiatives/top-guidelines A platform for disclosure statements: https://psychdisclosure.org/ Guidelines to write README files and Metadata: https://data.research.cornell.edu/content/readme More on the hows and whys of sharing: Klein, O., Hardwicke, T. E., Aust, F., Breuer, J., Danielsson, H., Hoeflich Mohr, A., IJzerman, H., Nilsonne, G., Vanpaemel, W., Frank, M. C. (2018). A practical guide for transparency in psychological science. Collabra: Psychology, 4(1), 20. https://doi.org/10.1525/collabra.158 Miscellaneous A comic about the replication crisis: https://thenib.com/repeat-after-me/?t=defau A youtube-playlist of 5-10 minute videos on open science: https://www.youtube.com/watch?v=1rFWeTryiW4&amp;list=PLtAL5tCifMi5zG70dslERYcGApAQcvj1s A video on norms in science: https://www.youtube.com/watch?v=00btFojQPiU&amp;t=36s Highly recommended resources that provide a broad overview of the replication crisis, contributing factors, and solution attempts: Chambers, C. (2017). The Seven Deadly Sins of Psychology: A Manifesto for Reforming the Culture of Scientific Practice. Princeton University Press. https://doi.org/10.1515/9781400884940 Munafò, M. R., Nosek, B. A., Bishop, D. V., Button, K. S., Chambers, C. D., Du Sert, N. P., … Ioannidis, J. P. (2017). A manifesto for reproducible science. Nature Human Behaviour, 1(1), 0021. https://doi.org/10.1038/s41562-016-0021 "],["references.html", "References", " References "]]
